/* The following code was generated by JFlex 1.6.1 */

package Analisis;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import Analisis.lexema;
import Utilidades.ErrorC;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>scanner.jflex</tt>
 */
public class scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int comentarioSimple = 2;
  public static final int comentarioMulti = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  4, 58,  2,  3,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     1, 44, 10,  0, 19, 56, 49, 16, 51, 52, 11, 43,  0, 18,  6, 20, 
     5,  5,  5,  5,  5,  5,  5,  5,  5,  5, 17, 50, 47, 45, 46, 53, 
     0, 36, 33, 34, 30, 24, 23, 38, 35, 22,  7, 42, 25,  7, 28, 31, 
    39,  7, 37, 27, 29, 32,  7, 40,  7,  7,  7,  0,  0,  0, 57,  7, 
     0, 36, 33, 34, 30, 24, 23, 38, 35, 22,  7, 42, 25,  7, 28, 31, 
    39,  7, 37, 27, 29, 32,  7, 40,  7,  7,  7, 54, 48, 55,  0,  0, 
     0,  0,  0,  0,  0, 58,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  9,  0,  0,  0,  0,  0,  0,  0,  9,  0,  0,  0,  9,  0,  0, 
     0,  9,  0,  9,  0,  0,  0,  0,  0,  0,  9,  0,  0,  0,  0,  0, 
     0,  0, 12,  8,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0, 12,  8,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\4\1\5\2\1\1\6"+
    "\2\1\1\7\1\10\1\1\1\11\1\1\3\5\1\1"+
    "\7\5\1\12\1\13\1\14\1\15\1\16\2\1\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\27\5\0\1\31\1\0\1\32\1\0\1\33"+
    "\1\0\1\33\3\5\1\0\10\5\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\0\1\45"+
    "\2\0\2\32\1\0\2\46\1\5\1\0\1\5\1\0"+
    "\6\5\1\0\1\5\1\0\1\5\4\0\1\5\2\33"+
    "\1\0\1\5\1\47\1\5\1\50\1\5\1\51\1\0"+
    "\1\5\1\0\1\5\2\0\2\52\4\0\1\5\1\0"+
    "\2\5\2\53\1\0\1\5\2\54\4\0\2\55\1\56"+
    "\2\0\2\5\6\0\1\57\1\0\1\57\1\5\3\0"+
    "\1\33\2\0\1\5\7\0\2\60\5\0\1\33\6\0"+
    "\1\33\4\0\1\33\5\0\1\33\5\0\1\33\3\0"+
    "\1\33";

  private static int [] zzUnpackAction() {
    int [] result = new int[210];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\261\0\261\0\354\0\u0127"+
    "\0\u0162\0\u019d\0\u01d8\0\u0213\0\u024e\0\261\0\u0289\0\u02c4"+
    "\0\u02ff\0\u033a\0\u0375\0\u03b0\0\u03eb\0\u0426\0\u0461\0\u049c"+
    "\0\u04d7\0\u0512\0\u054d\0\u0588\0\u05c3\0\u05fe\0\u0639\0\u0674"+
    "\0\u06af\0\u06ea\0\u0725\0\u0760\0\261\0\261\0\261\0\261"+
    "\0\261\0\261\0\261\0\261\0\261\0\261\0\u01d8\0\u079b"+
    "\0\u0162\0\u07d6\0\u0811\0\u084c\0\261\0\u0887\0\u08c2\0\u08fd"+
    "\0\261\0\u0938\0\u0127\0\u0973\0\u09ae\0\u09e9\0\u0a24\0\u0a5f"+
    "\0\u0a9a\0\u0ad5\0\u0b10\0\u0b4b\0\u0b86\0\u0bc1\0\u0bfc\0\261"+
    "\0\261\0\261\0\261\0\261\0\261\0\261\0\u079b\0\261"+
    "\0\u0c37\0\261\0\u0c72\0\u0cad\0\u0ce8\0\261\0\u0d23\0\261"+
    "\0\u0127\0\u0d5e\0\u0d99\0\u0dd4\0\u0e0f\0\u0e4a\0\u0e85\0\u0ec0"+
    "\0\u0efb\0\u0f36\0\u0f71\0\u0fac\0\u0fe7\0\u1022\0\u105d\0\u1098"+
    "\0\u10d3\0\u110e\0\u1149\0\u1184\0\u11bf\0\u11fa\0\u1235\0\u1270"+
    "\0\u0127\0\u12ab\0\u0127\0\u12e6\0\u0127\0\u1321\0\u135c\0\u1397"+
    "\0\u13d2\0\u140d\0\u1448\0\261\0\u0127\0\u11bf\0\u1483\0\u14be"+
    "\0\u14f9\0\u1534\0\u156f\0\u15aa\0\u15e5\0\261\0\u0127\0\u1620"+
    "\0\u165b\0\261\0\u0127\0\u1696\0\u16d1\0\u170c\0\u1747\0\261"+
    "\0\u0127\0\u0127\0\u1782\0\u17bd\0\u17f8\0\u1833\0\u186e\0\u18a9"+
    "\0\u18e4\0\u191f\0\u195a\0\u1995\0\261\0\u19d0\0\u0127\0\u1a0b"+
    "\0\u1a46\0\u1a81\0\u1abc\0\u170c\0\u1af7\0\u1b32\0\u1b6d\0\u1ba8"+
    "\0\u1be3\0\u1c1e\0\u1c59\0\u1c94\0\u1ccf\0\u1d0a\0\261\0\u0127"+
    "\0\u1d45\0\u1d80\0\u1dbb\0\u1df6\0\u1e31\0\u1ba8\0\u1e6c\0\u1ea7"+
    "\0\u1ee2\0\u1f1d\0\u1f58\0\u1f93\0\u186e\0\u1fce\0\u2009\0\u2044"+
    "\0\u207f\0\u1e6c\0\u20ba\0\u20f5\0\u2130\0\u216b\0\u21a6\0\u1af7"+
    "\0\u21e1\0\u221c\0\u2257\0\u2292\0\u22cd\0\u20f5\0\u2308\0\u2343"+
    "\0\u237e\0\u221c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[210];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\3\5\1\6\1\7\1\4\1\10\1\11\1\4"+
    "\1\12\1\13\1\14\3\4\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\10\1\26\1\27"+
    "\1\10\1\30\1\31\2\10\1\32\1\33\4\10\1\34"+
    "\1\35\1\4\1\10\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\0\2\55\2\0\1\56\65\55\1\0"+
    "\2\55\3\0\6\55\1\57\56\55\101\0\1\7\1\60"+
    "\71\0\1\10\1\0\1\10\1\61\15\0\4\10\1\0"+
    "\16\10\1\0\1\10\31\0\1\10\61\0\13\62\1\0"+
    "\57\62\24\0\1\56\63\0\1\63\55\0\13\64\1\0"+
    "\57\64\22\0\1\65\63\0\1\66\7\0\1\67\62\0"+
    "\1\70\106\0\1\71\4\0\1\72\43\0\1\10\1\0"+
    "\1\10\1\61\15\0\1\10\1\73\2\10\1\0\1\10"+
    "\1\74\14\10\1\0\1\10\25\0\1\10\1\0\1\10"+
    "\1\61\15\0\4\10\1\0\11\10\1\75\4\10\1\0"+
    "\1\10\25\0\1\10\1\0\1\10\1\61\15\0\3\10"+
    "\1\76\1\0\16\10\1\0\1\10\55\0\1\77\42\0"+
    "\1\10\1\0\1\10\1\61\15\0\4\10\1\0\2\10"+
    "\1\100\13\10\1\0\1\10\25\0\1\10\1\0\1\10"+
    "\1\61\15\0\4\10\1\0\12\10\1\101\3\10\1\0"+
    "\1\10\25\0\1\10\1\0\1\10\1\61\15\0\4\10"+
    "\1\0\4\10\1\102\11\10\1\0\1\10\25\0\1\10"+
    "\1\0\1\10\1\61\15\0\4\10\1\0\4\10\1\103"+
    "\5\10\1\104\3\10\1\0\1\10\25\0\1\10\1\0"+
    "\1\10\1\61\15\0\4\10\1\0\10\10\1\105\5\10"+
    "\1\0\1\10\25\0\1\10\1\0\1\10\1\61\15\0"+
    "\4\10\1\0\12\10\1\106\3\10\1\0\1\10\25\0"+
    "\1\10\1\0\1\10\1\61\15\0\4\10\1\0\10\10"+
    "\1\107\5\10\1\0\1\10\73\0\1\110\74\0\1\111"+
    "\72\0\1\112\72\0\1\113\72\0\1\114\75\0\1\115"+
    "\73\0\1\116\16\0\1\117\65\0\12\62\1\120\60\62"+
    "\16\0\1\121\54\0\20\64\1\122\52\64\13\123\1\124"+
    "\57\123\3\67\1\125\1\126\66\67\13\0\1\127\114\0"+
    "\1\130\42\0\1\10\1\0\1\10\1\61\15\0\4\10"+
    "\1\0\2\10\1\131\13\10\1\0\1\10\25\0\1\10"+
    "\1\0\1\10\1\61\15\0\3\10\1\132\1\0\16\10"+
    "\1\0\1\10\25\0\1\10\1\0\1\10\1\61\15\0"+
    "\4\10\1\133\1\134\15\10\1\0\1\10\65\0\1\135"+
    "\32\0\1\10\1\0\1\10\1\61\15\0\4\10\1\0"+
    "\12\10\1\136\3\10\1\0\1\10\25\0\1\10\1\0"+
    "\1\10\1\61\15\0\4\10\1\0\5\10\1\137\10\10"+
    "\1\0\1\10\25\0\1\10\1\0\1\10\1\61\15\0"+
    "\4\10\1\0\5\10\1\140\10\10\1\0\1\10\25\0"+
    "\1\10\1\0\1\10\1\61\15\0\4\10\1\0\4\10"+
    "\1\141\11\10\1\0\1\10\25\0\1\10\1\0\1\10"+
    "\1\61\15\0\2\10\1\142\1\10\1\0\16\10\1\0"+
    "\1\10\25\0\1\10\1\0\1\10\1\61\15\0\4\10"+
    "\1\0\11\10\1\143\4\10\1\0\1\10\25\0\1\10"+
    "\1\0\1\10\1\61\14\0\1\144\1\145\3\10\1\0"+
    "\16\10\1\0\1\10\25\0\1\10\1\0\1\10\1\61"+
    "\14\0\1\146\1\147\3\10\1\0\16\10\1\0\1\10"+
    "\20\0\13\150\1\0\57\150\13\123\1\151\57\123\13\0"+
    "\1\124\7\0\1\126\53\0\1\126\66\0\13\152\1\127"+
    "\10\152\1\0\46\152\5\0\1\10\1\0\1\10\1\61"+
    "\15\0\4\10\1\153\1\154\15\10\1\0\1\10\50\0"+
    "\1\155\47\0\1\10\1\0\1\10\1\61\15\0\2\10"+
    "\1\156\1\10\1\0\16\10\1\0\1\10\45\0\2\157"+
    "\51\0\1\10\1\0\1\10\1\61\14\0\1\157\1\160"+
    "\3\10\1\0\16\10\1\0\1\10\25\0\1\10\1\0"+
    "\1\10\1\61\15\0\2\10\1\161\1\10\1\0\16\10"+
    "\1\0\1\10\25\0\1\10\1\0\1\10\1\61\15\0"+
    "\4\10\1\0\6\10\1\162\7\10\1\0\1\10\25\0"+
    "\1\10\1\0\1\10\1\61\15\0\3\10\1\163\1\0"+
    "\16\10\1\0\1\10\25\0\1\10\1\0\1\10\1\61"+
    "\15\0\4\10\1\0\11\10\1\164\4\10\1\0\1\10"+
    "\25\0\1\10\1\0\1\10\1\61\15\0\4\10\1\0"+
    "\12\10\1\165\3\10\1\0\1\10\54\0\1\166\43\0"+
    "\1\10\1\0\1\10\1\61\15\0\4\10\1\0\1\10"+
    "\1\167\14\10\1\0\1\10\51\0\1\170\46\0\1\10"+
    "\1\0\1\10\1\61\15\0\3\10\1\171\1\0\16\10"+
    "\1\0\1\10\20\0\14\150\1\172\56\150\13\123\1\151"+
    "\7\123\1\126\47\123\13\152\1\173\57\152\30\0\1\174"+
    "\47\0\1\10\1\0\1\10\1\61\15\0\2\10\1\175"+
    "\1\10\1\0\16\10\1\0\1\10\21\0\4\176\16\0"+
    "\1\177\1\200\5\0\2\201\40\0\4\176\1\10\1\0"+
    "\1\10\1\61\12\0\1\177\1\200\1\0\4\10\1\201"+
    "\1\202\15\10\1\0\1\10\54\0\1\203\43\0\1\10"+
    "\1\0\1\10\1\61\15\0\4\10\1\0\1\10\1\204"+
    "\14\10\1\0\1\10\25\0\1\10\1\0\1\10\1\61"+
    "\15\0\3\10\1\205\1\0\16\10\1\0\1\10\25\0"+
    "\1\10\1\0\1\10\1\61\15\0\4\10\1\0\16\10"+
    "\1\206\1\207\55\0\1\210\42\0\1\10\1\0\1\10"+
    "\1\61\15\0\4\10\1\0\2\10\1\211\13\10\1\0"+
    "\1\10\50\0\1\212\47\0\1\10\1\0\1\10\1\61"+
    "\15\0\2\10\1\213\1\10\1\0\16\10\1\0\1\10"+
    "\20\0\14\150\1\172\1\214\55\150\13\152\1\173\10\152"+
    "\1\126\46\152\13\0\1\215\7\0\1\216\62\0\1\217"+
    "\104\0\2\71\51\0\1\10\1\0\1\10\1\61\14\0"+
    "\1\71\1\73\3\10\1\0\16\10\1\0\1\10\66\0"+
    "\1\220\31\0\1\10\1\0\1\10\1\61\15\0\4\10"+
    "\1\0\13\10\1\221\2\10\1\0\1\10\25\0\1\10"+
    "\1\0\1\10\1\61\15\0\2\10\1\222\1\10\1\0"+
    "\16\10\1\0\1\10\51\0\1\223\12\0\1\224\33\0"+
    "\1\10\1\0\1\10\1\61\15\0\3\10\1\225\1\0"+
    "\11\10\1\226\4\10\1\0\1\10\20\0\14\150\1\172"+
    "\2\150\1\120\53\150\13\227\1\230\57\227\3\216\2\176"+
    "\16\216\1\231\1\232\5\216\2\233\37\216\13\0\1\234"+
    "\113\0\1\235\77\0\1\236\36\0\1\10\1\0\1\10"+
    "\1\61\15\0\4\10\1\0\1\10\1\237\14\10\1\0"+
    "\1\10\25\0\1\10\1\0\1\10\1\61\15\0\4\10"+
    "\1\0\6\10\1\240\7\10\1\0\1\10\20\0\13\227"+
    "\1\241\57\227\13\0\1\230\7\0\1\176\47\0\3\216"+
    "\2\176\6\216\1\242\7\216\1\231\1\232\5\216\2\233"+
    "\42\216\2\176\6\216\1\243\7\216\1\231\1\232\5\216"+
    "\2\233\42\216\2\176\16\216\1\231\1\232\2\244\3\216"+
    "\2\233\37\216\13\245\1\234\10\245\1\0\46\245\31\0"+
    "\1\246\46\0\1\10\1\0\1\10\1\61\15\0\3\10"+
    "\1\247\1\0\16\10\1\0\1\10\20\0\13\227\1\241"+
    "\7\227\1\176\47\227\3\250\2\251\6\250\1\216\7\250"+
    "\1\252\1\253\5\250\2\254\37\250\3\216\2\176\6\216"+
    "\1\255\7\216\1\231\1\232\5\216\2\233\37\216\13\245"+
    "\1\256\57\245\30\0\1\257\47\0\1\10\1\0\1\10"+
    "\1\61\15\0\2\10\1\260\1\10\1\0\16\10\1\0"+
    "\1\10\20\0\3\250\2\251\6\250\1\261\7\250\1\252"+
    "\1\253\5\250\2\254\37\250\1\227\4\251\6\227\1\241"+
    "\7\227\1\262\1\263\5\227\2\264\37\227\3\250\2\251"+
    "\16\250\1\252\1\253\5\250\2\254\42\250\2\251\6\250"+
    "\1\265\7\250\1\252\1\253\5\250\2\254\42\250\2\251"+
    "\6\250\1\261\7\250\1\252\1\253\2\266\3\250\2\254"+
    "\37\250\3\267\2\270\6\267\1\255\7\267\1\271\1\232"+
    "\5\267\2\272\37\267\13\245\1\256\10\245\1\176\46\245"+
    "\3\250\2\251\6\250\1\261\7\250\1\231\1\253\5\250"+
    "\2\254\37\250\13\227\1\273\7\227\1\250\62\227\1\274"+
    "\72\227\1\241\11\227\2\275\44\227\3\250\2\251\6\250"+
    "\1\276\7\250\1\231\1\253\5\250\2\254\37\250\3\267"+
    "\2\270\6\267\1\255\7\267\1\271\6\267\2\272\37\267"+
    "\1\245\4\270\6\245\1\256\7\245\1\277\6\245\2\300"+
    "\37\245\3\267\2\270\6\267\1\301\7\267\1\271\6\267"+
    "\2\272\42\267\2\270\6\267\1\255\7\267\1\271\1\267"+
    "\2\302\3\267\2\272\37\267\13\227\1\241\7\227\1\251"+
    "\62\227\1\303\7\227\1\176\47\227\3\304\2\305\6\304"+
    "\1\276\7\304\1\271\1\253\5\304\2\306\37\304\13\245"+
    "\1\307\7\245\1\267\62\245\1\256\11\245\2\310\44\245"+
    "\3\304\2\305\6\304\1\255\7\304\1\311\1\253\5\304"+
    "\2\306\37\304\13\312\1\303\7\312\1\270\1\227\46\312"+
    "\3\304\2\305\6\304\1\276\7\304\1\311\6\304\2\306"+
    "\37\304\1\312\4\305\6\312\1\313\7\312\1\314\6\312"+
    "\2\315\37\312\3\304\2\305\6\304\1\276\7\304\1\311"+
    "\1\304\2\316\3\304\2\306\37\304\13\312\1\317\10\312"+
    "\1\251\46\312\3\304\2\305\6\304\1\320\7\304\1\311"+
    "\6\304\2\306\37\304\13\312\1\313\72\312\1\313\7\312"+
    "\1\270\1\251\61\312\1\321\7\312\1\304\62\312\1\313"+
    "\11\312\2\322\44\312\13\245\1\317\7\245\1\270\1\176"+
    "\46\245\3\304\2\305\6\304\1\276\7\304\1\311\1\253"+
    "\5\304\2\306\37\304\13\312\1\313\7\312\1\305\1\251"+
    "\46\312";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9145];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\3\11\7\1\1\11\26\1\12\11\1\1\5\0"+
    "\1\11\1\0\1\1\1\0\1\11\1\0\4\1\1\0"+
    "\10\1\7\11\1\1\1\11\1\0\1\11\2\0\1\1"+
    "\1\11\1\0\1\11\2\1\1\0\1\1\1\0\6\1"+
    "\1\0\1\1\1\0\1\1\4\0\3\1\1\0\6\1"+
    "\1\0\1\1\1\0\1\1\2\0\1\11\1\1\4\0"+
    "\1\1\1\0\2\1\1\11\1\1\1\0\1\1\1\11"+
    "\1\1\4\0\1\11\2\1\2\0\2\1\6\0\1\11"+
    "\1\0\2\1\3\0\1\1\2\0\1\1\7\0\1\11"+
    "\1\1\5\0\1\1\6\0\1\1\4\0\1\1\5\0"+
    "\1\1\5\0\1\1\3\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[210];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public ArrayList<ErrorC> listaErrores = new ArrayList(); // Lista para almacenar errores.
    public ArrayList<lexema> listaLexemas = new ArrayList(); // Lista para almacenar el flujo de palabras (tokens).

    public void adderror(int linea, int columna, String valor)
    {        
        listaErrores.add(new ErrorC(ErrorC.TipoError.LEXICO,valor, linea, columna));
    }

    public void addLexema(String tipo, String valor, int linea, int columna)
    {        
        listaLexemas.add(new lexema(tipo, valor, linea, columna));	            
    } 
    public void Imprimir(String cadena)
    {
        System.out.println(cadena);
    }   
 



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public scanner(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { 	return new Symbol(sym.EOF);    
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Caracter ilegal: " + yytext()+" Linea : "+yyline +" Columna: "+yychar); 
            adderror(yyline, yychar, yytext());
            }
          case 49: break;
          case 2: 
            { //Imprimir("Salto de linea");
            }
          case 50: break;
          case 3: 
            { yychar=0;
            }
          case 51: break;
          case 4: 
            { addLexema("Identificador", yytext(), yyline, yychar);  	        
            return new Symbol(sym.entero, yychar, yyline,Integer.parseInt(yytext()));
            }
          case 52: break;
          case 5: 
            { addLexema("Identificador", yytext(), yyline, yychar);  	        
            return new Symbol(sym.id, yychar, yyline, yytext().toLowerCase());
            }
          case 53: break;
          case 6: 
            { addLexema("simbolo", yytext(), yyline, yychar);  	        
            return new Symbol(sym.multi, yychar, yyline, yytext());
            }
          case 54: break;
          case 7: 
            { addLexema("simbolo", yytext(), yyline, yychar);  	        
            return new Symbol(sym.dospuntos, yychar, yyline, yytext());
            }
          case 55: break;
          case 8: 
            { addLexema("simbolo", yytext(), yyline, yychar);  	        
            return new Symbol(sym.menos, yychar, yyline, yytext());
            }
          case 56: break;
          case 9: 
            { addLexema("simbolo", yytext(), yyline, yychar);  	        
            return new Symbol(sym.div, yychar, yyline, yytext());
            }
          case 57: break;
          case 10: 
            { addLexema("simbolo", yytext(), yyline, yychar);  	        
            return new Symbol(sym.suma, yychar, yyline, yytext());
            }
          case 58: break;
          case 11: 
            { addLexema("simbolo", yytext(), yyline, yychar);  	        
            return new Symbol(sym.not, yychar, yyline, yytext());
            }
          case 59: break;
          case 12: 
            { addLexema("simbolo", yytext(), yyline, yychar);  	        
            return new Symbol(sym.igual, yychar, yyline, yytext());
            }
          case 60: break;
          case 13: 
            { addLexema("simbolo", yytext(), yyline, yychar);  	        
            return new Symbol(sym.mayor, yychar, yyline, yytext());
            }
          case 61: break;
          case 14: 
            { addLexema("simbolo", yytext(), yyline, yychar);  	        
            return new Symbol(sym.menor, yychar, yyline, yytext());
            }
          case 62: break;
          case 15: 
            { addLexema("simbolo", yytext(), yyline, yychar);  	        
            return new Symbol(sym.puntocoma, yychar, yyline, yytext());
            }
          case 63: break;
          case 16: 
            { addLexema("simbolo", yytext(), yyline, yychar);  	        
            return new Symbol(sym.pari, yychar, yyline, yytext());
            }
          case 64: break;
          case 17: 
            { addLexema("simbolo", yytext(), yyline, yychar);  	        
            return new Symbol(sym.pard, yychar, yyline, yytext());
            }
          case 65: break;
          case 18: 
            { addLexema("simbolo", yytext(), yyline, yychar);  	        
            return new Symbol(sym.interrogante, yychar, yyline, yytext());
            }
          case 66: break;
          case 19: 
            { addLexema("simbolo", yytext(), yyline, yychar);  	        
            return new Symbol(sym.llavei, yychar, yyline, yytext());
            }
          case 67: break;
          case 20: 
            { addLexema("simbolo", yytext(), yyline, yychar);  	        
            return new Symbol(sym.llaved, yychar, yyline, yytext());
            }
          case 68: break;
          case 21: 
            { addLexema("simbolo", yytext(), yyline, yychar);  	        
            return new Symbol(sym.modulo, yychar, yyline, yytext());
            }
          case 69: break;
          case 22: 
            { addLexema("simbolo", yytext(), yyline, yychar);  	        
            return new Symbol(sym.potencia, yychar, yyline, yytext());
            }
          case 70: break;
          case 23: 
            { /**/
            }
          case 71: break;
          case 24: 
            { yybegin(YYINITIAL);
            }
          case 72: break;
          case 25: 
            { addLexema("simbolo", yytext(), yyline, yychar);  	        
            return new Symbol(sym.decremento, yychar, yyline, yytext());
            }
          case 73: break;
          case 26: 
            { Imprimir(yytext());
            }
          case 74: break;
          case 27: 
            { addLexema("reservada", yytext(), yyline, yychar);
        return  new Symbol(sym.si, yychar, yyline, yytext());
            }
          case 75: break;
          case 28: 
            { addLexema("simbolo", yytext(), yyline, yychar);  	        
            return new Symbol(sym.aumento, yychar, yyline, yytext());
            }
          case 76: break;
          case 29: 
            { addLexema("simbolo", yytext(), yyline, yychar);  	        
            return new Symbol(sym.desigual, yychar, yyline, yytext());
            }
          case 77: break;
          case 30: 
            { addLexema("simbolo", yytext(), yyline, yychar);  	        
            return new Symbol(sym.igualigual, yychar, yyline, yytext());
            }
          case 78: break;
          case 31: 
            { addLexema("simbolo", yytext(), yyline, yychar);  	        
            return new Symbol(sym.mayorigual, yychar, yyline, yytext());
            }
          case 79: break;
          case 32: 
            { addLexema("simbolo", yytext(), yyline, yychar);  	        
            return new Symbol(sym.menorigual, yychar, yyline, yytext());
            }
          case 80: break;
          case 33: 
            { addLexema("simbolo", yytext(), yyline, yychar);  	        
            return new Symbol(sym.or, yychar, yyline, yytext());
            }
          case 81: break;
          case 34: 
            { addLexema("simbolo", yytext(), yyline, yychar);  	        
            return new Symbol(sym.and, yychar, yyline, yytext());
            }
          case 82: break;
          case 35: 
            { addLexema("Identificador", yytext(), yyline, yychar);  	        
            return new Symbol(sym.decimal, yychar, yyline,Double.parseDouble(yytext()));
            }
          case 83: break;
          case 36: 
            { addLexema("Identificador", yytext(), yyline, yychar);  	        
            return new Symbol(sym.cadena, yychar, yyline,yytext().substring(1, yytext().length()-1));
            }
          case 84: break;
          case 37: 
            { addLexema("Identificador", yytext(), yyline, yychar);  	        
            return new Symbol(sym.caracter, yychar, yyline,yytext().substring(1, yytext().length()-1).charAt(0));
            }
          case 85: break;
          case 38: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.tint, yychar, yyline, yytext());
            }
          case 86: break;
          case 39: 
            { addLexema("reservada", yytext(), yyline, yychar);
            return  new Symbol(sym.booleano, yychar, yyline, true);
            }
          case 87: break;
          case 40: 
            { addLexema("reservada", yytext(), yyline, yychar);
            return  new Symbol(sym.tbool, yychar, yyline, yytext());
            }
          case 88: break;
          case 41: 
            { addLexema("reservada", yytext(), yyline, yychar);
            return  new Symbol(sym.tchar, yychar, yyline, yytext());
            }
          case 89: break;
          case 42: 
            { addLexema("reservada", yytext(), yyline, yychar);
            return  new Symbol(sym.booleano, yychar, yyline, false);
            }
          case 90: break;
          case 43: 
            { addLexema("reservada", yytext(), yyline, yychar);
            return  new Symbol(sym.romper, yychar, yyline, yytext());
            }
          case 91: break;
          case 44: 
            { addLexema("reservada", yytext(), yyline, yychar);
            return  new Symbol(sym.mientras, yychar, yyline, yytext());
            }
          case 92: break;
          case 45: 
            { addLexema("reservada", yytext(), yyline, yychar);
            return  new Symbol(sym.tstring, yychar, yyline, yytext());
            }
          case 93: break;
          case 46: 
            { addLexema("reservada", yytext(), yyline, yychar);            
            return  new Symbol(sym.tdouble, yychar, yyline, yytext());
            }
          case 94: break;
          case 47: 
            { addLexema("reservada", yytext(), yyline, yychar);
            return  new Symbol(sym.print, yychar, yyline, yytext());
            }
          case 95: break;
          case 48: 
            { addLexema("reservada", yytext(), yyline, yychar);
            return  new Symbol(sym.printable, yychar, yyline, yytext());
            }
          case 96: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
