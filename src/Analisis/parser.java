
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analisis;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import AST.*;
import Utilidades.ErrorC;
import AST.Instruccion.*;
import AST.Exp.*;
import AST.Ent.*;
import AST.Exp.Aritmetica.*;
import AST.Exp.Relacional.*;
import AST.Exp.Logica.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\072\000\002\002\004\000\002\011\003\000\002\002" +
    "\005\000\002\003\004\000\002\003\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\004\000\002\004\004\000\002\020" +
    "\007\000\002\017\004\000\002\016\007\000\002\014\006" +
    "\000\002\013\007\000\002\015\006\000\002\005\005\000" +
    "\002\005\007\000\002\006\005\000\002\006\005\000\002" +
    "\006\004\000\002\006\005\000\002\006\005\000\002\006" +
    "\005\000\002\006\005\000\002\006\005\000\002\006\005" +
    "\000\002\006\005\000\002\006\005\000\002\006\005\000" +
    "\002\006\005\000\002\006\005\000\002\006\005\000\002" +
    "\006\003\000\002\006\004\000\002\006\005\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\007\004\000\002\010\004\000\002" +
    "\021\007\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\154\000\004\012\005\001\002\000\004\002\000\001" +
    "\002\000\052\004\024\005\035\006\032\007\011\010\040" +
    "\012\005\014\047\016\041\020\014\027\021\030\042\035" +
    "\015\040\050\044\037\050\022\052\012\053\031\054\045" +
    "\055\013\056\023\001\002\000\004\002\007\001\002\000" +
    "\004\002\001\001\002\000\054\004\ufff9\005\ufff9\006\ufff9" +
    "\007\ufff9\010\ufff9\012\ufff9\013\ufff9\014\ufff9\016\ufff9\020" +
    "\ufff9\027\ufff9\030\ufff9\035\ufff9\040\ufff9\044\ufff9\050\ufff9" +
    "\052\ufff9\053\ufff9\054\ufff9\055\ufff9\056\ufff9\001\002\000" +
    "\004\016\uffca\001\002\000\052\011\uffd3\015\uffd3\021\uffd3" +
    "\022\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3\031\uffd3\032" +
    "\uffd3\033\uffd3\034\uffd3\036\uffd3\037\uffd3\043\uffd3\044\uffd3" +
    "\045\uffd3\046\uffd3\047\uffd3\051\uffd3\001\002\000\052\011" +
    "\uffd5\015\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5" +
    "\026\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5\036\uffd5\037" +
    "\uffd5\043\uffd5\044\uffd5\045\uffd5\046\uffd5\047\uffd5\051\uffd5" +
    "\001\002\000\004\014\153\001\002\000\024\014\047\016" +
    "\054\035\015\044\037\052\012\053\031\054\045\055\013" +
    "\056\023\001\002\000\054\004\ufff7\005\ufff7\006\ufff7\007" +
    "\ufff7\010\ufff7\012\ufff7\013\ufff7\014\ufff7\016\ufff7\020\ufff7" +
    "\027\ufff7\030\ufff7\035\ufff7\040\ufff7\044\ufff7\050\ufff7\052" +
    "\ufff7\053\ufff7\054\ufff7\055\ufff7\056\ufff7\001\002\000\052" +
    "\011\uffdb\015\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb\025" +
    "\uffdb\026\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb\036\uffdb" +
    "\037\uffdb\043\uffdb\044\uffdb\045\uffdb\046\uffdb\047\uffdb\051" +
    "\uffdb\001\002\000\054\004\ufffc\005\ufffc\006\ufffc\007\ufffc" +
    "\010\ufffc\012\ufffc\013\ufffc\014\ufffc\016\ufffc\020\ufffc\027" +
    "\ufffc\030\ufffc\035\ufffc\040\ufffc\044\ufffc\050\ufffc\052\ufffc" +
    "\053\ufffc\054\ufffc\055\ufffc\056\ufffc\001\002\000\004\014" +
    "\146\001\002\000\004\014\143\001\002\000\052\011\uffd4" +
    "\015\uffd4\021\uffd4\022\uffd4\023\uffd4\024\uffd4\025\uffd4\026" +
    "\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4\036\uffd4\037\uffd4" +
    "\043\uffd4\044\uffd4\045\uffd4\046\uffd4\047\uffd4\051\uffd4\001" +
    "\002\000\004\016\uffcd\001\002\000\054\004\ufff5\005\ufff5" +
    "\006\ufff5\007\ufff5\010\ufff5\012\ufff5\013\ufff5\014\ufff5\016" +
    "\ufff5\020\ufff5\027\ufff5\030\ufff5\035\ufff5\040\ufff5\044\ufff5" +
    "\050\ufff5\052\ufff5\053\ufff5\054\ufff5\055\ufff5\056\ufff5\001" +
    "\002\000\054\004\ufffb\005\ufffb\006\ufffb\007\ufffb\010\ufffb" +
    "\012\ufffb\013\ufffb\014\ufffb\016\ufffb\020\ufffb\027\ufffb\030" +
    "\ufffb\035\ufffb\040\ufffb\044\ufffb\050\ufffb\052\ufffb\053\ufffb" +
    "\054\ufffb\055\ufffb\056\ufffb\001\002\000\054\004\024\005" +
    "\035\006\032\007\011\010\040\012\005\013\142\014\047" +
    "\016\041\020\014\027\021\030\042\035\015\040\050\044" +
    "\037\050\022\052\012\053\031\054\045\055\013\056\023" +
    "\001\002\000\044\021\076\022\070\023\100\024\064\025" +
    "\060\026\065\031\067\033\062\034\073\036\077\037\061" +
    "\043\075\044\063\045\072\046\066\047\071\051\074\001" +
    "\002\000\052\011\uffd2\015\uffd2\021\uffd2\022\uffd2\023\uffd2" +
    "\024\uffd2\025\uffd2\026\uffd2\031\uffd2\032\uffd2\033\uffd2\034" +
    "\uffd2\036\uffd2\037\uffd2\043\uffd2\044\uffd2\045\uffd2\046\uffd2" +
    "\047\uffd2\051\uffd2\001\002\000\004\016\uffcc\001\002\000" +
    "\004\016\134\001\002\000\046\011\133\021\uffd8\022\uffd8" +
    "\023\uffd8\024\uffd8\025\uffd8\026\uffd8\031\uffd8\033\uffd8\034" +
    "\uffd8\036\uffd8\037\uffd8\043\uffd8\044\uffd8\045\uffd8\046\uffd8" +
    "\047\uffd8\051\uffd8\001\002\000\004\016\uffcb\001\002\000" +
    "\054\004\ufffd\005\ufffd\006\ufffd\007\ufffd\010\ufffd\012\ufffd" +
    "\013\ufffd\014\ufffd\016\ufffd\020\ufffd\027\ufffd\030\ufffd\035" +
    "\ufffd\040\ufffd\044\ufffd\050\ufffd\052\ufffd\053\ufffd\054\ufffd" +
    "\055\ufffd\056\ufffd\001\002\000\024\014\047\016\054\035" +
    "\015\044\037\052\012\053\031\054\045\055\013\056\023" +
    "\001\002\000\004\016\uffc9\001\002\000\050\016\uffc8\017" +
    "\127\021\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1" +
    "\031\uffd1\033\uffd1\034\uffd1\036\uffd1\037\uffd1\043\uffd1\044" +
    "\uffd1\045\uffd1\046\uffd1\047\uffd1\051\uffd1\001\002\000\004" +
    "\011\126\001\002\000\054\004\ufff6\005\ufff6\006\ufff6\007" +
    "\ufff6\010\ufff6\012\ufff6\013\ufff6\014\ufff6\016\ufff6\020\ufff6" +
    "\027\ufff6\030\ufff6\035\ufff6\040\ufff6\044\ufff6\050\ufff6\052" +
    "\ufff6\053\ufff6\054\ufff6\055\ufff6\056\ufff6\001\002\000\054" +
    "\004\ufffa\005\ufffa\006\ufffa\007\ufffa\010\ufffa\012\ufffa\013" +
    "\ufffa\014\ufffa\016\ufffa\020\ufffa\027\ufffa\030\ufffa\035\ufffa" +
    "\040\ufffa\044\ufffa\050\ufffa\052\ufffa\053\ufffa\054\ufffa\055" +
    "\ufffa\056\ufffa\001\002\000\052\011\uffd6\015\uffd6\021\uffd6" +
    "\022\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6\031\uffd6\032" +
    "\uffd6\033\uffd6\034\uffd6\036\uffd6\037\uffd6\043\uffd6\044\uffd6" +
    "\045\uffd6\046\uffd6\047\uffd6\051\uffd6\001\002\000\046\011" +
    "\125\021\uffd7\022\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7" +
    "\031\uffd7\033\uffd7\034\uffd7\036\uffd7\037\uffd7\043\uffd7\044" +
    "\uffd7\045\uffd7\046\uffd7\047\uffd7\051\uffd7\001\002\000\024" +
    "\014\047\016\054\035\015\044\037\052\012\053\031\054" +
    "\045\055\013\056\023\001\002\000\004\014\052\001\002" +
    "\000\054\004\ufff8\005\ufff8\006\ufff8\007\ufff8\010\ufff8\012" +
    "\ufff8\013\ufff8\014\ufff8\016\ufff8\020\ufff8\027\ufff8\030\ufff8" +
    "\035\ufff8\040\ufff8\044\ufff8\050\ufff8\052\ufff8\053\ufff8\054" +
    "\ufff8\055\ufff8\056\ufff8\001\002\000\024\014\047\016\054" +
    "\035\015\044\037\052\012\053\031\054\045\055\013\056" +
    "\023\001\002\000\052\011\uffd8\015\uffd8\021\uffd8\022\uffd8" +
    "\023\uffd8\024\uffd8\025\uffd8\026\uffd8\031\uffd8\032\uffd8\033" +
    "\uffd8\034\uffd8\036\uffd8\037\uffd8\043\uffd8\044\uffd8\045\uffd8" +
    "\046\uffd8\047\uffd8\051\uffd8\001\002\000\052\011\uffd1\015" +
    "\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1" +
    "\031\uffd1\032\uffd1\033\uffd1\034\uffd1\036\uffd1\037\uffd1\043" +
    "\uffd1\044\uffd1\045\uffd1\046\uffd1\047\uffd1\051\uffd1\001\002" +
    "\000\052\011\uffd7\015\uffd7\021\uffd7\022\uffd7\023\uffd7\024" +
    "\uffd7\025\uffd7\026\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7" +
    "\036\uffd7\037\uffd7\043\uffd7\044\uffd7\045\uffd7\046\uffd7\047" +
    "\uffd7\051\uffd7\001\002\000\046\015\057\021\076\022\070" +
    "\023\100\024\064\025\060\026\065\031\067\033\062\034" +
    "\073\036\077\037\061\043\075\044\063\045\072\046\066" +
    "\047\071\051\074\001\002\000\004\012\005\001\002\000" +
    "\024\014\047\016\054\035\015\044\037\052\012\053\031" +
    "\054\045\055\013\056\023\001\002\000\024\014\047\016" +
    "\054\035\015\044\037\052\012\053\031\054\045\055\013" +
    "\056\023\001\002\000\052\011\uffd0\015\uffd0\021\uffd0\022" +
    "\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0\031\uffd0\032\uffd0" +
    "\033\uffd0\034\uffd0\036\uffd0\037\uffd0\043\uffd0\044\uffd0\045" +
    "\uffd0\046\uffd0\047\uffd0\051\uffd0\001\002\000\024\014\047" +
    "\016\054\035\015\044\037\052\012\053\031\054\045\055" +
    "\013\056\023\001\002\000\024\014\047\016\054\035\015" +
    "\044\037\052\012\053\031\054\045\055\013\056\023\001" +
    "\002\000\024\014\047\016\054\035\015\044\037\052\012" +
    "\053\031\054\045\055\013\056\023\001\002\000\024\014" +
    "\047\016\054\035\015\044\037\052\012\053\031\054\045" +
    "\055\013\056\023\001\002\000\024\014\047\016\054\035" +
    "\015\044\037\052\012\053\031\054\045\055\013\056\023" +
    "\001\002\000\024\014\047\016\054\035\015\044\037\052" +
    "\012\053\031\054\045\055\013\056\023\001\002\000\024" +
    "\014\047\016\054\035\015\044\037\052\012\053\031\054" +
    "\045\055\013\056\023\001\002\000\024\014\047\016\054" +
    "\035\015\044\037\052\012\053\031\054\045\055\013\056" +
    "\023\001\002\000\052\011\uffcf\015\uffcf\021\uffcf\022\uffcf" +
    "\023\uffcf\024\uffcf\025\uffcf\026\uffcf\031\uffcf\032\uffcf\033" +
    "\uffcf\034\uffcf\036\uffcf\037\uffcf\043\uffcf\044\uffcf\045\uffcf" +
    "\046\uffcf\047\uffcf\051\uffcf\001\002\000\024\014\047\016" +
    "\054\035\015\044\037\052\012\053\031\054\045\055\013" +
    "\056\023\001\002\000\024\014\047\016\054\035\015\044" +
    "\037\052\012\053\031\054\045\055\013\056\023\001\002" +
    "\000\024\014\047\016\054\035\015\044\037\052\012\053" +
    "\031\054\045\055\013\056\023\001\002\000\024\014\047" +
    "\016\054\035\015\044\037\052\012\053\031\054\045\055" +
    "\013\056\023\001\002\000\024\014\047\016\054\035\015" +
    "\044\037\052\012\053\031\054\045\055\013\056\023\001" +
    "\002\000\052\011\uffe5\015\uffe5\021\uffe5\022\uffe5\023\uffe5" +
    "\024\uffe5\025\uffe5\026\uffe5\031\uffe5\032\uffe5\033\062\034" +
    "\073\036\uffe5\037\uffe5\043\075\044\063\045\072\046\066" +
    "\047\071\051\074\001\002\000\052\011\uffea\015\uffea\021" +
    "\076\022\070\023\100\024\064\025\060\026\065\031\uffea" +
    "\032\uffea\033\062\034\073\036\uffea\037\uffea\043\075\044" +
    "\063\045\072\046\066\047\071\051\074\001\002\000\052" +
    "\011\uffe7\015\uffe7\021\uffe7\022\uffe7\023\100\024\064\025" +
    "\060\026\065\031\uffe7\032\uffe7\033\062\034\073\036\uffe7" +
    "\037\uffe7\043\075\044\063\045\072\046\066\047\071\051" +
    "\074\001\002\000\052\011\uffe1\015\uffe1\021\uffe1\022\uffe1" +
    "\023\uffe1\024\uffe1\025\uffe1\026\uffe1\031\uffe1\032\uffe1\033" +
    "\062\034\073\036\uffe1\037\uffe1\043\uffe1\044\uffe1\045\072" +
    "\046\066\047\071\051\074\001\002\000\052\011\uffdc\015" +
    "\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc" +
    "\031\uffdc\032\uffdc\033\062\034\073\036\uffdc\037\uffdc\043" +
    "\uffdc\044\uffdc\045\uffdc\046\uffdc\047\071\051\uffdc\001\002" +
    "\000\052\011\uffde\015\uffde\021\uffde\022\uffde\023\uffde\024" +
    "\uffde\025\uffde\026\uffde\031\uffde\032\uffde\033\062\034\073" +
    "\036\uffde\037\uffde\043\uffde\044\uffde\045\uffde\046\uffde\047" +
    "\071\051\uffde\001\002\000\052\011\uffdf\015\uffdf\021\uffdf" +
    "\022\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\031\uffdf\032" +
    "\uffdf\033\062\034\073\036\uffdf\037\uffdf\043\uffdf\044\uffdf" +
    "\045\uffdf\046\uffdf\047\uffdf\051\uffdf\001\002\000\052\011" +
    "\uffe6\015\uffe6\021\uffe6\022\uffe6\023\100\024\064\025\060" +
    "\026\065\031\uffe6\032\uffe6\033\062\034\073\036\uffe6\037" +
    "\uffe6\043\075\044\063\045\072\046\066\047\071\051\074" +
    "\001\002\000\046\021\076\022\070\023\100\024\064\025" +
    "\060\026\065\031\067\032\112\033\062\034\073\036\077" +
    "\037\061\043\075\044\063\045\072\046\066\047\071\051" +
    "\074\001\002\000\024\014\047\016\054\035\015\044\037" +
    "\052\012\053\031\054\045\055\013\056\023\001\002\000" +
    "\052\011\uffce\015\uffce\021\076\022\070\023\100\024\064" +
    "\025\060\026\065\031\067\032\uffce\033\062\034\073\036" +
    "\077\037\061\043\075\044\063\045\072\046\066\047\071" +
    "\051\074\001\002\000\052\011\uffdd\015\uffdd\021\uffdd\022" +
    "\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd\031\uffdd\032\uffdd" +
    "\033\062\034\073\036\uffdd\037\uffdd\043\uffdd\044\uffdd\045" +
    "\uffdd\046\uffdd\047\071\051\uffdd\001\002\000\052\011\uffe4" +
    "\015\uffe4\021\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4\026" +
    "\uffe4\031\uffe4\032\uffe4\033\062\034\073\036\uffe4\037\uffe4" +
    "\043\075\044\063\045\072\046\066\047\071\051\074\001" +
    "\002\000\052\011\uffe3\015\uffe3\021\uffe3\022\uffe3\023\uffe3" +
    "\024\uffe3\025\uffe3\026\uffe3\031\uffe3\032\uffe3\033\062\034" +
    "\073\036\uffe3\037\uffe3\043\075\044\063\045\072\046\066" +
    "\047\071\051\074\001\002\000\052\011\uffe0\015\uffe0\021" +
    "\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0\031\uffe0" +
    "\032\uffe0\033\062\034\073\036\uffe0\037\uffe0\043\uffe0\044" +
    "\uffe0\045\072\046\066\047\071\051\074\001\002\000\052" +
    "\011\uffe9\015\uffe9\021\076\022\070\023\100\024\064\025" +
    "\060\026\065\031\uffe9\032\uffe9\033\062\034\073\036\077" +
    "\037\uffe9\043\075\044\063\045\072\046\066\047\071\051" +
    "\074\001\002\000\052\011\uffe2\015\uffe2\021\uffe2\022\uffe2" +
    "\023\uffe2\024\uffe2\025\uffe2\026\uffe2\031\uffe2\032\uffe2\033" +
    "\062\034\073\036\uffe2\037\uffe2\043\075\044\063\045\072" +
    "\046\066\047\071\051\074\001\002\000\054\004\ufff2\005" +
    "\ufff2\006\ufff2\007\ufff2\010\ufff2\012\ufff2\013\ufff2\014\ufff2" +
    "\016\ufff2\020\ufff2\027\ufff2\030\ufff2\035\ufff2\040\ufff2\044" +
    "\ufff2\050\ufff2\052\ufff2\053\ufff2\054\ufff2\055\ufff2\056\ufff2" +
    "\001\002\000\046\015\124\021\076\022\070\023\100\024" +
    "\064\025\060\026\065\031\067\033\062\034\073\036\077" +
    "\037\061\043\075\044\063\045\072\046\066\047\071\051" +
    "\074\001\002\000\052\011\uffd9\015\uffd9\021\uffd9\022\uffd9" +
    "\023\uffd9\024\uffd9\025\uffd9\026\uffd9\031\uffd9\032\uffd9\033" +
    "\uffd9\034\uffd9\036\uffd9\037\uffd9\043\uffd9\044\uffd9\045\uffd9" +
    "\046\uffd9\047\uffd9\051\uffd9\001\002\000\054\004\ufff3\005" +
    "\ufff3\006\ufff3\007\ufff3\010\ufff3\012\ufff3\013\ufff3\014\ufff3" +
    "\016\ufff3\020\ufff3\027\ufff3\030\ufff3\035\ufff3\040\ufff3\044" +
    "\ufff3\050\ufff3\052\ufff3\053\ufff3\054\ufff3\055\ufff3\056\ufff3" +
    "\001\002\000\054\004\ufff1\005\ufff1\006\ufff1\007\ufff1\010" +
    "\ufff1\012\ufff1\013\ufff1\014\ufff1\016\ufff1\020\ufff1\027\ufff1" +
    "\030\ufff1\035\ufff1\040\ufff1\044\ufff1\050\ufff1\052\ufff1\053" +
    "\ufff1\054\ufff1\055\ufff1\056\ufff1\001\002\000\024\014\047" +
    "\016\054\035\015\044\037\052\012\053\031\054\045\055" +
    "\013\056\023\001\002\000\046\011\131\021\076\022\070" +
    "\023\100\024\064\025\060\026\065\031\067\033\062\034" +
    "\073\036\077\037\061\043\075\044\063\045\072\046\066" +
    "\047\071\051\074\001\002\000\054\004\uffed\005\uffed\006" +
    "\uffed\007\uffed\010\uffed\012\uffed\013\uffed\014\uffed\016\uffed" +
    "\020\uffed\027\uffed\030\uffed\035\uffed\040\uffed\044\uffed\050" +
    "\uffed\052\uffed\053\uffed\054\uffed\055\uffed\056\uffed\001\002" +
    "\000\052\011\uffda\015\uffda\021\uffda\022\uffda\023\uffda\024" +
    "\uffda\025\uffda\026\uffda\031\uffda\032\uffda\033\062\034\073" +
    "\036\uffda\037\uffda\043\uffda\044\uffda\045\072\046\066\047" +
    "\071\051\074\001\002\000\054\004\ufff4\005\ufff4\006\ufff4" +
    "\007\ufff4\010\ufff4\012\ufff4\013\ufff4\014\ufff4\016\ufff4\020" +
    "\ufff4\027\ufff4\030\ufff4\035\ufff4\040\ufff4\044\ufff4\050\ufff4" +
    "\052\ufff4\053\ufff4\054\ufff4\055\ufff4\056\ufff4\001\002\000" +
    "\006\011\135\017\136\001\002\000\054\004\uffec\005\uffec" +
    "\006\uffec\007\uffec\010\uffec\012\uffec\013\uffec\014\uffec\016" +
    "\uffec\020\uffec\027\uffec\030\uffec\035\uffec\040\uffec\044\uffec" +
    "\050\uffec\052\uffec\053\uffec\054\uffec\055\uffec\056\uffec\001" +
    "\002\000\024\014\047\016\054\035\015\044\037\052\012" +
    "\053\031\054\045\055\013\056\023\001\002\000\046\011" +
    "\140\021\076\022\070\023\100\024\064\025\060\026\065" +
    "\031\067\033\062\034\073\036\077\037\061\043\075\044" +
    "\063\045\072\046\066\047\071\051\074\001\002\000\054" +
    "\004\uffeb\005\uffeb\006\uffeb\007\uffeb\010\uffeb\012\uffeb\013" +
    "\uffeb\014\uffeb\016\uffeb\020\uffeb\027\uffeb\030\uffeb\035\uffeb" +
    "\040\uffeb\044\uffeb\050\uffeb\052\uffeb\053\uffeb\054\uffeb\055" +
    "\uffeb\056\uffeb\001\002\000\054\004\ufffe\005\ufffe\006\ufffe" +
    "\007\ufffe\010\ufffe\012\ufffe\013\ufffe\014\ufffe\016\ufffe\020" +
    "\ufffe\027\ufffe\030\ufffe\035\ufffe\040\ufffe\044\ufffe\050\ufffe" +
    "\052\ufffe\053\ufffe\054\ufffe\055\ufffe\056\ufffe\001\002\000" +
    "\056\002\uffff\004\uffff\005\uffff\006\uffff\007\uffff\010\uffff" +
    "\012\uffff\013\uffff\014\uffff\016\uffff\020\uffff\027\uffff\030" +
    "\uffff\035\uffff\040\uffff\044\uffff\050\uffff\052\uffff\053\uffff" +
    "\054\uffff\055\uffff\056\uffff\001\002\000\004\015\144\001" +
    "\002\000\004\011\145\001\002\000\054\004\uffef\005\uffef" +
    "\006\uffef\007\uffef\010\uffef\012\uffef\013\uffef\014\uffef\016" +
    "\uffef\020\uffef\027\uffef\030\uffef\035\uffef\040\uffef\044\uffef" +
    "\050\uffef\052\uffef\053\uffef\054\uffef\055\uffef\056\uffef\001" +
    "\002\000\024\014\047\016\054\035\015\044\037\052\012" +
    "\053\031\054\045\055\013\056\023\001\002\000\046\015" +
    "\150\021\076\022\070\023\100\024\064\025\060\026\065" +
    "\031\067\033\062\034\073\036\077\037\061\043\075\044" +
    "\063\045\072\046\066\047\071\051\074\001\002\000\004" +
    "\012\005\001\002\000\054\004\ufff0\005\ufff0\006\ufff0\007" +
    "\ufff0\010\ufff0\012\ufff0\013\ufff0\014\ufff0\016\ufff0\020\ufff0" +
    "\027\ufff0\030\ufff0\035\ufff0\040\ufff0\044\ufff0\050\ufff0\052" +
    "\ufff0\053\ufff0\054\ufff0\055\ufff0\056\ufff0\001\002\000\052" +
    "\011\uffe8\015\uffe8\021\uffe8\022\uffe8\023\uffe8\024\uffe8\025" +
    "\uffe8\026\uffe8\031\uffe8\032\uffe8\033\062\034\073\036\uffe8" +
    "\037\uffe8\043\uffe8\044\uffe8\045\uffe8\046\uffe8\047\uffe8\051" +
    "\uffe8\001\002\000\024\014\047\016\054\035\015\044\037" +
    "\052\012\053\031\054\045\055\013\056\023\001\002\000" +
    "\046\015\155\021\076\022\070\023\100\024\064\025\060" +
    "\026\065\031\067\033\062\034\073\036\077\037\061\043" +
    "\075\044\063\045\072\046\066\047\071\051\074\001\002" +
    "\000\004\011\156\001\002\000\054\004\uffee\005\uffee\006" +
    "\uffee\007\uffee\010\uffee\012\uffee\013\uffee\014\uffee\016\uffee" +
    "\020\uffee\027\uffee\030\uffee\035\uffee\040\uffee\044\uffee\050" +
    "\uffee\052\uffee\053\uffee\054\uffee\055\uffee\056\uffee\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\154\000\006\002\003\011\005\001\001\000\002\001" +
    "\001\000\040\002\025\003\026\004\035\005\017\006\027" +
    "\007\033\010\045\012\032\013\043\014\007\015\050\016" +
    "\015\017\042\020\024\021\016\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\006\151\007\052\010\054\021\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\002\025\004\140" +
    "\005\017\006\027\007\033\010\045\012\032\013\043\014" +
    "\007\015\050\016\015\017\042\020\024\021\016\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\006\131\007\052\010\054\021\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\006\122\007\052\010\054\021\016" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\006" +
    "\055\007\052\010\054\021\016\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\002\121\001\001\000\012\006\120\007\052\010\054" +
    "\021\016\001\001\000\012\006\117\007\052\010\054\021" +
    "\016\001\001\000\002\001\001\000\012\006\116\007\052" +
    "\010\054\021\016\001\001\000\012\006\115\007\052\010" +
    "\054\021\016\001\001\000\012\006\114\007\052\010\054" +
    "\021\016\001\001\000\012\006\113\007\052\010\054\021" +
    "\016\001\001\000\012\006\110\007\052\010\054\021\016" +
    "\001\001\000\012\006\107\007\052\010\054\021\016\001" +
    "\001\000\012\006\106\007\052\010\054\021\016\001\001" +
    "\000\012\006\105\007\052\010\054\021\016\001\001\000" +
    "\002\001\001\000\012\006\104\007\052\010\054\021\016" +
    "\001\001\000\012\006\103\007\052\010\054\021\016\001" +
    "\001\000\012\006\102\007\052\010\054\021\016\001\001" +
    "\000\012\006\101\007\052\010\054\021\016\001\001\000" +
    "\012\006\100\007\052\010\054\021\016\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\006\112\007" +
    "\052\010\054\021\016\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\006\127\007\052\010\054\021\016" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\006\136\007\052\010\054\021\016\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\006\146\007\052\010\054\021\016\001\001" +
    "\000\002\001\001\000\004\002\150\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\006\153\007\052\010\054" +
    "\021\016\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


	   	
	public ArrayList<ErrorC> listaErrores = new ArrayList();	
	public ArrayList<Instruccion> ast = new ArrayList<Instruccion>();

	public Instruccion raiz = null;

	/*@Override
	public void syntax_error(Symbol cur_token) 
	{        
		List<Integer> listaIdTokens = expected_token_ids();
		LinkedList<String> listaNombres = new LinkedList<String>();
		for (Integer expected : listaIdTokens) 
		{			
			listaNombres.add(symbl_name_from_id(expected));
		}		
		Utilidades.Singlenton.registrarError(String.valueOf(cur_token.value), 
			String.valueOf(cur_token.value) + ". Se esperaba :"+listaNombres.toString(), ErrorC.TipoError.LEXICO, cur_token.right+1, cur_token.left+1);
		/*listaErrores.add(
					listaErrores.add(new ErrorC(ErrorC.TipoError.SINTACTICO,
								String.valueOf(cur_token.value) + ". Se esperaba :"+listaNombres.toString(),
								cur_token.right+1,
								cur_token.left+1));
                
	}*/


    public void report_error(String message, Object info) 
    {
        int linea = 0;
        int columna = 0;
        java_cup.runtime.Symbol s = null;
        StringBuilder m = new StringBuilder("Error Sintactico");

        if (info instanceof java_cup.runtime.Symbol) 
        {
            s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) 
            {                
                columna = s.left+1;
                if (s.right>= 0)
                {
                    linea = s.right+ 1;
                }                    
            }
        }

        m.append(" Se esperaba: "+message);
        //System.err.println(m.toString());
        //System.out.println("Error");
        //System.out.println("Error linea:"+linea+", col:"+columna);
        LinkedList<String> toks = new LinkedList();

        if(!expected_token_ids().isEmpty())
        {
            Imprimir("No esta vacia "+ expected_token_ids().size());		  
            for(int w=0; w<expected_token_ids().size(); w++)
            { 
                if(expected_token_ids().get(w) !=sym.error)
                {
                    int tok = (int)expected_token_ids().get(w);                        
                    toks.add( symbol_name_from_id(tok) );
                }
            }
        }

        Imprimir(expected_token_ids().size());
      
        for(int w=0; w<expected_token_ids().size(); w++)
        { 
            if(expected_token_ids().get(w)!=sym.error)
            {
                int tok = (int)expected_token_ids().get(w);
                toks.add( symbol_name_from_id(tok) );
            }
        }
        String esperados = "";
        for(String id : toks)
        {
            if(!esperados.equals(""))
            {
                esperados += ", ";
            }
            esperados += id;
            
        }        
        Utilidades.Singlenton.registrarError(s.value.toString(), "Se esperaba .. " +esperados, ErrorC.TipoError.SINTACTICO, linea, columna);		                  
    }	

    public String symbol_name_from_id(int id){
        return sym.terminalNames[id];
    }

	/*public void addError(Symbol s)
	{
		listaErrores.add(new ErrorC("Sintactico",s.rights.right+1,ConvertirObjectToString(s.value)));
	}*/
	public void Imprimir(Object cad)
	{
		System.out.println(cad.toString());
	}	


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= BLOQUE 
            {
              Object RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloque inst = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Imprimir("Correcto"); raiz = inst; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // BLOQUE ::= llavei LINST llaved 
            {
              Bloque RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Nodo> l = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Bloque(l,lright,lleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LINST ::= LINST INST 
            {
              ArrayList<Nodo> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Nodo> lista = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo inst = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 lista.add(inst); RESULT = lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINST",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LINST ::= INST 
            {
              ArrayList<Nodo> RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo inst = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Nodo> l = new ArrayList<Nodo>(); l.add(inst); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINST",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INST ::= DECLARACION 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Declaracion inst = (Declaracion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = inst; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INST ::= BLOQUE 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloque inst = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = inst; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INST ::= PRINT 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Imprimir inst = (Imprimir)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = inst; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INST ::= PRINTABLE 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ImprimirT inst = (ImprimirT)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INST ::= ASIG 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Asignacion inst = (Asignacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INST ::= WHILE 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		While inst = (While)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INST ::= BREAK 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Break inst = (Break)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INST ::= IF 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		If inst = (If)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INST ::= AUMENTO puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion inst = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INST ::= DECREMENTO puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion inst = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // IF ::= si pari EXP pard BLOQUE 
            {
              If RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String si = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion condicion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new If(condicion, bloque, siright, sileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // BREAK ::= romper puntocoma 
            {
              Break RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String inst = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Break(instright, instleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BREAK",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // WHILE ::= mientras pari EXP pard BLOQUE 
            {
              While RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String inst = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion condicion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new While(condicion,bloque,instright, instleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // PRINTABLE ::= printable pari pard puntocoma 
            {
              ImprimirT RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		RESULT = new ImprimirT(pright,pleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTABLE",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // PRINT ::= print pari EXP pard puntocoma 
            {
              Imprimir RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion valor = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new Imprimir(valor, pright,pleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINT",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ASIG ::= id igual EXP puntocoma 
            {
              Asignacion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion valor = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Asignacion(id, valor, idright,idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIG",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACION ::= TIPO id puntocoma 
            {
              Declaracion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Declaracion(t, id , tright,tleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACION ::= TIPO id igual EXP puntocoma 
            {
              Declaracion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion valor = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Declaracion(t, id, valor, tright,tleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // EXP ::= EXP and EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new And(opi, opd, opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // EXP ::= EXP or EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Or(opi, opd, opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // EXP ::= not EXP 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Not(op, opright,opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // EXP ::= EXP igualigual EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Igual(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EXP ::= EXP desigual EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Desigual(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // EXP ::= EXP mayor EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Mayor(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EXP ::= EXP mayorigual EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new MayorIgual(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EXP ::= EXP menor EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Menor(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EXP ::= EXP menorigual EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new MenorIgual(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EXP ::= EXP suma EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Suma(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EXP ::= EXP menos EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Resta(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EXP ::= EXP potencia EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Potencia(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EXP ::= EXP multi EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Multiplicacion(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EXP ::= EXP div EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Division(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXP ::= EXP modulo EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Modulo(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXP ::= TER 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Ternario op = (Ternario)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = op;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXP ::= menos EXP 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Menos(op, opright,opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXP ::= pari EXP pard 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = op;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXP ::= AUMENTO 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = op;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXP ::= DECREMENTO 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = op;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXP ::= entero 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		int v = (int)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Tipo.TypePrimitive.INT), v, vright,vleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXP ::= decimal 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		double v = (double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Tipo.TypePrimitive.DOUBLE), v, vright,vleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXP ::= booleano 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		boolean v = (boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Tipo.TypePrimitive.BOOL), v, vright,vleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXP ::= cadena 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Tipo.TypePrimitive.STRING), v, vright,vleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXP ::= caracter 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		char v = (char)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Tipo.TypePrimitive.CHAR), v, vright,vleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXP ::= id 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Variable(v, vright,vleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // AUMENTO ::= EXP aumento 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Aumento(op, opright, opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AUMENTO",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DECREMENTO ::= EXP decremento 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Decremento(op, opright, opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECREMENTO",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // TER ::= EXP interrogante EXP dospuntos EXP 
            {
              Ternario RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion v = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion f = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Ternario(c,v,f,cright,cleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TER",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // TIPO ::= tint 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Tipo(Tipo.TypePrimitive.INT);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // TIPO ::= tchar 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =  new Tipo(Tipo.TypePrimitive.CHAR);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // TIPO ::= tdouble 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Tipo(Tipo.TypePrimitive.DOUBLE);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // TIPO ::= tbool 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Tipo(Tipo.TypePrimitive.BOOL);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // TIPO ::= tstring 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Tipo(Tipo.TypePrimitive.STRING);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // TIPO ::= id 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Tipo(Tipo.TypePrimitive.OBJETO,t);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
