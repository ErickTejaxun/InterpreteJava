
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analisis;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import AST.*;
import Utilidades.ErrorC;
import AST.Instruccion.*;
import AST.Exp.*;
import AST.Ent.*;
import AST.Exp.Aritmetica.*;
import AST.Exp.Relacional.*;
import AST.Exp.Logica.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\115\000\002\002\004\000\002\011\003\000\002\002" +
    "\005\000\002\002\004\000\002\003\004\000\002\003\003" +
    "\000\002\004\004\000\002\004\004\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\004\000\002\004\004\000\002\025\003" +
    "\000\002\025\003\000\002\021\007\000\002\021\011\000" +
    "\002\022\003\000\002\022\003\000\002\020\004\000\002" +
    "\017\004\000\002\016\007\000\002\024\013\000\002\024" +
    "\013\000\002\014\006\000\002\013\007\000\002\015\005" +
    "\000\002\005\004\000\002\005\006\000\002\006\005\000" +
    "\002\006\005\000\002\006\004\000\002\006\005\000\002" +
    "\006\005\000\002\006\005\000\002\006\005\000\002\006" +
    "\005\000\002\006\005\000\002\006\005\000\002\006\005" +
    "\000\002\006\005\000\002\006\005\000\002\006\005\000" +
    "\002\006\005\000\002\006\003\000\002\006\004\000\002" +
    "\006\005\000\002\006\003\000\002\006\010\000\002\006" +
    "\005\000\002\006\003\000\002\006\007\000\002\006\007" +
    "\000\002\006\007\000\002\006\007\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\007\004\000\002\007" +
    "\004\000\002\010\004\000\002\010\004\000\002\023\007" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\240\000\004\012\005\001\002\000\004\002\000\001" +
    "\002\000\066\004\023\005\054\006\061\007\020\010\037" +
    "\012\005\013\022\014\026\016\044\022\052\032\043\065" +
    "\025\066\035\067\012\070\011\073\033\074\046\076\047" +
    "\101\024\110\031\114\014\116\060\117\021\120\040\121" +
    "\056\122\051\001\002\000\004\002\007\001\002\000\004" +
    "\002\001\001\002\000\052\011\242\024\uffcd\025\uffcd\026" +
    "\uffcd\027\uffcd\030\uffcd\031\uffcd\045\uffcd\071\uffcd\073\uffcd" +
    "\074\uffcd\075\uffcd\077\uffcd\100\uffcd\107\uffcd\110\uffcd\111" +
    "\uffcd\112\uffcd\113\uffcd\115\uffcd\001\002\000\004\011\241" +
    "\001\002\000\004\011\240\001\002\000\004\016\235\001" +
    "\002\000\004\014\232\001\002\000\066\004\023\005\054" +
    "\006\061\007\020\010\037\012\005\013\230\014\026\016" +
    "\044\022\052\032\043\065\025\066\035\067\012\070\011" +
    "\073\033\074\046\076\047\101\024\110\031\114\014\116" +
    "\060\117\021\120\040\121\056\122\051\001\002\000\066" +
    "\004\ufff3\005\ufff3\006\ufff3\007\ufff3\010\ufff3\012\ufff3\013" +
    "\ufff3\014\ufff3\016\ufff3\022\ufff3\032\ufff3\065\ufff3\066\ufff3" +
    "\067\ufff3\070\ufff3\073\ufff3\074\ufff3\076\ufff3\101\ufff3\110" +
    "\ufff3\114\ufff3\116\ufff3\117\ufff3\120\ufff3\121\ufff3\122\ufff3" +
    "\001\002\000\066\004\ufff5\005\ufff5\006\ufff5\007\ufff5\010" +
    "\ufff5\012\ufff5\013\ufff5\014\ufff5\016\ufff5\022\ufff5\032\ufff5" +
    "\065\ufff5\066\ufff5\067\ufff5\070\ufff5\073\ufff5\074\ufff5\076" +
    "\ufff5\101\ufff5\110\ufff5\114\ufff5\116\ufff5\117\ufff5\120\ufff5" +
    "\121\ufff5\122\ufff5\001\002\000\004\016\uffb7\001\002\000" +
    "\060\011\uffc1\015\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1" +
    "\027\uffc1\030\uffc1\031\uffc1\045\uffc1\071\uffc1\072\uffc1\073" +
    "\uffc1\074\uffc1\075\uffc1\077\uffc1\100\uffc1\107\uffc1\110\uffc1" +
    "\111\uffc1\112\uffc1\113\uffc1\115\uffc1\001\002\000\072\002" +
    "\ufffe\004\ufffe\005\ufffe\006\ufffe\007\ufffe\010\ufffe\012\ufffe" +
    "\013\ufffe\014\ufffe\016\ufffe\022\ufffe\032\ufffe\065\ufffe\066" +
    "\ufffe\067\ufffe\070\ufffe\073\ufffe\074\ufffe\076\ufffe\101\ufffe" +
    "\103\ufffe\110\ufffe\114\ufffe\116\ufffe\117\ufffe\120\ufffe\121" +
    "\ufffe\122\ufffe\001\002\000\004\016\uffba\001\002\000\004" +
    "\014\220\001\002\000\004\014\214\001\002\000\032\014" +
    "\026\016\064\032\043\073\033\074\046\076\047\110\031" +
    "\116\060\117\021\120\040\121\056\122\051\001\002\000" +
    "\066\004\ufff2\005\ufff2\006\ufff2\007\ufff2\010\ufff2\012\ufff2" +
    "\013\ufff2\014\ufff2\016\ufff2\022\ufff2\032\ufff2\065\ufff2\066" +
    "\ufff2\067\ufff2\070\ufff2\073\ufff2\074\ufff2\076\ufff2\101\ufff2" +
    "\110\ufff2\114\ufff2\116\ufff2\117\ufff2\120\ufff2\121\ufff2\122" +
    "\ufff2\001\002\000\050\024\110\025\101\026\112\027\074" +
    "\030\067\031\077\045\106\071\100\073\072\074\103\075" +
    "\075\077\111\100\071\107\107\110\073\111\102\112\076" +
    "\113\104\115\105\001\002\000\032\014\026\016\064\032" +
    "\043\073\033\074\046\076\047\110\031\116\060\117\021" +
    "\120\040\121\056\122\051\001\002\000\066\004\ufff7\005" +
    "\ufff7\006\ufff7\007\ufff7\010\ufff7\012\ufff7\013\ufff7\014\ufff7" +
    "\016\ufff7\022\ufff7\032\ufff7\065\ufff7\066\ufff7\067\ufff7\070" +
    "\ufff7\073\ufff7\074\ufff7\076\ufff7\101\ufff7\110\ufff7\114\ufff7" +
    "\116\ufff7\117\ufff7\120\ufff7\121\ufff7\122\ufff7\001\002\000" +
    "\032\014\026\016\064\032\043\073\033\074\046\076\047" +
    "\110\031\116\060\117\021\120\040\121\056\122\051\001" +
    "\002\000\004\011\207\001\002\000\004\014\165\001\002" +
    "\000\052\011\164\024\uffca\025\uffca\026\uffca\027\uffca\030" +
    "\uffca\031\uffca\045\uffca\071\uffca\073\uffca\074\uffca\075\uffca" +
    "\077\uffca\100\uffca\107\uffca\110\uffca\111\uffca\112\uffca\113" +
    "\uffca\115\uffca\001\002\000\004\016\uffb6\001\002\000\060" +
    "\011\uffc5\015\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5\027" +
    "\uffc5\030\uffc5\031\uffc5\045\uffc5\071\uffc5\072\uffc5\073\uffc5" +
    "\074\uffc5\075\uffc5\077\uffc5\100\uffc5\107\uffc5\110\uffc5\111" +
    "\uffc5\112\uffc5\113\uffc5\115\uffc5\001\002\000\066\004\ufff4" +
    "\005\ufff4\006\ufff4\007\ufff4\010\ufff4\012\ufff4\013\ufff4\014" +
    "\ufff4\016\ufff4\022\ufff4\032\ufff4\065\ufff4\066\ufff4\067\ufff4" +
    "\070\ufff4\073\ufff4\074\ufff4\076\ufff4\101\ufff4\110\ufff4\114" +
    "\ufff4\116\ufff4\117\ufff4\120\ufff4\121\ufff4\122\ufff4\001\002" +
    "\000\004\011\163\001\002\000\004\014\156\001\002\000" +
    "\054\016\uffb5\021\154\024\uffc0\025\uffc0\026\uffc0\027\uffc0" +
    "\030\uffc0\031\uffc0\045\uffc0\071\uffc0\073\uffc0\074\uffc0\075" +
    "\uffc0\077\uffc0\100\uffc0\107\uffc0\110\uffc0\111\uffc0\112\uffc0" +
    "\113\uffc0\115\uffc0\001\002\000\066\004\ufff6\005\ufff6\006" +
    "\ufff6\007\ufff6\010\ufff6\012\ufff6\013\ufff6\014\ufff6\016\ufff6" +
    "\022\ufff6\032\ufff6\065\ufff6\066\ufff6\067\ufff6\070\ufff6\073" +
    "\ufff6\074\ufff6\076\ufff6\101\ufff6\110\ufff6\114\ufff6\116\ufff6" +
    "\117\ufff6\120\ufff6\121\ufff6\122\ufff6\001\002\000\032\014" +
    "\026\016\064\032\043\073\033\074\046\076\047\110\031" +
    "\116\060\117\021\120\040\121\056\122\051\001\002\000" +
    "\032\014\026\016\064\032\043\073\033\074\046\076\047" +
    "\110\031\116\060\117\021\120\040\121\056\122\051\001" +
    "\002\000\066\004\ufff9\005\ufff9\006\ufff9\007\ufff9\010\ufff9" +
    "\012\ufff9\013\ufff9\014\ufff9\016\ufff9\022\ufff9\032\ufff9\065" +
    "\ufff9\066\ufff9\067\ufff9\070\ufff9\073\ufff9\074\ufff9\076\ufff9" +
    "\101\ufff9\110\ufff9\114\ufff9\116\ufff9\117\ufff9\120\ufff9\121" +
    "\ufff9\122\ufff9\001\002\000\060\011\uffc3\015\uffc3\023\uffc3" +
    "\024\uffc3\025\uffc3\026\uffc3\027\uffc3\030\uffc3\031\uffc3\045" +
    "\uffc3\071\uffc3\072\uffc3\073\uffc3\074\uffc3\075\uffc3\077\uffc3" +
    "\100\uffc3\107\uffc3\110\uffc3\111\uffc3\112\uffc3\113\uffc3\115" +
    "\uffc3\001\002\000\004\014\062\001\002\000\060\011\uffd0" +
    "\015\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0\030" +
    "\uffd0\031\uffd0\045\uffd0\071\uffd0\072\uffd0\073\uffd0\074\uffd0" +
    "\075\uffd0\077\uffd0\100\uffd0\107\uffd0\110\uffd0\111\uffd0\112" +
    "\uffd0\113\uffd0\115\uffd0\001\002\000\004\016\uffb8\001\002" +
    "\000\066\004\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc\012" +
    "\ufffc\013\ufffc\014\ufffc\016\ufffc\022\ufffc\032\ufffc\065\ufffc" +
    "\066\ufffc\067\ufffc\070\ufffc\073\ufffc\074\ufffc\076\ufffc\101" +
    "\ufffc\110\ufffc\114\ufffc\116\ufffc\117\ufffc\120\ufffc\121\ufffc" +
    "\122\ufffc\001\002\000\060\011\uffc4\015\uffc4\023\uffc4\024" +
    "\uffc4\025\uffc4\026\uffc4\027\uffc4\030\uffc4\031\uffc4\045\uffc4" +
    "\071\uffc4\072\uffc4\073\uffc4\074\uffc4\075\uffc4\077\uffc4\100" +
    "\uffc4\107\uffc4\110\uffc4\111\uffc4\112\uffc4\113\uffc4\115\uffc4" +
    "\001\002\000\066\004\ufff8\005\ufff8\006\ufff8\007\ufff8\010" +
    "\ufff8\012\ufff8\013\ufff8\014\ufff8\016\ufff8\022\ufff8\032\ufff8" +
    "\065\ufff8\066\ufff8\067\ufff8\070\ufff8\073\ufff8\074\ufff8\076" +
    "\ufff8\101\ufff8\110\ufff8\114\ufff8\116\ufff8\117\ufff8\120\ufff8" +
    "\121\ufff8\122\ufff8\001\002\000\060\011\uffc2\015\uffc2\023" +
    "\uffc2\024\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2" +
    "\045\uffc2\071\uffc2\072\uffc2\073\uffc2\074\uffc2\075\uffc2\077" +
    "\uffc2\100\uffc2\107\uffc2\110\uffc2\111\uffc2\112\uffc2\113\uffc2" +
    "\115\uffc2\001\002\000\004\016\uffb9\001\002\000\032\014" +
    "\026\016\064\032\043\073\033\074\046\076\047\110\031" +
    "\116\060\117\021\120\040\121\056\122\051\001\002\000" +
    "\060\011\uffcd\015\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd" +
    "\027\uffcd\030\uffcd\031\uffcd\045\uffcd\071\uffcd\072\uffcd\073" +
    "\uffcd\074\uffcd\075\uffcd\077\uffcd\100\uffcd\107\uffcd\110\uffcd" +
    "\111\uffcd\112\uffcd\113\uffcd\115\uffcd\001\002\000\060\011" +
    "\uffc0\015\uffc0\023\uffc0\024\uffc0\025\uffc0\026\uffc0\027\uffc0" +
    "\030\uffc0\031\uffc0\045\uffc0\071\uffc0\072\uffc0\073\uffc0\074" +
    "\uffc0\075\uffc0\077\uffc0\100\uffc0\107\uffc0\110\uffc0\111\uffc0" +
    "\112\uffc0\113\uffc0\115\uffc0\001\002\000\060\011\uffca\015" +
    "\uffca\023\uffca\024\uffca\025\uffca\026\uffca\027\uffca\030\uffca" +
    "\031\uffca\045\uffca\071\uffca\072\uffca\073\uffca\074\uffca\075" +
    "\uffca\077\uffca\100\uffca\107\uffca\110\uffca\111\uffca\112\uffca" +
    "\113\uffca\115\uffca\001\002\000\052\015\070\024\110\025" +
    "\101\026\112\027\074\030\067\031\077\045\106\071\100" +
    "\073\072\074\103\075\075\077\111\100\071\107\107\110" +
    "\073\111\102\112\076\113\104\115\105\001\002\000\032" +
    "\014\026\016\064\032\043\073\033\074\046\076\047\110" +
    "\031\116\060\117\021\120\040\121\056\122\051\001\002" +
    "\000\004\011\150\001\002\000\032\014\026\016\064\032" +
    "\043\073\033\074\046\076\047\110\031\116\060\117\021" +
    "\120\040\121\056\122\051\001\002\000\060\011\uffbf\015" +
    "\uffbf\023\uffbf\024\uffbf\025\uffbf\026\uffbf\027\uffbf\030\uffbf" +
    "\031\uffbf\045\uffbf\071\uffbf\072\uffbf\073\uffbf\074\uffbf\075" +
    "\uffbf\077\uffbf\100\uffbf\107\uffbf\110\uffbf\111\uffbf\112\uffbf" +
    "\113\uffbf\115\uffbf\001\002\000\032\014\026\016\064\032" +
    "\043\073\033\074\046\076\047\110\031\116\060\117\021" +
    "\120\040\121\056\122\051\001\002\000\032\014\026\016" +
    "\064\032\043\073\033\074\046\076\047\110\031\116\060" +
    "\117\021\120\040\121\056\122\051\001\002\000\012\016" +
    "\134\104\133\105\131\106\132\001\002\000\032\014\026" +
    "\016\064\032\043\073\033\074\046\076\047\110\031\116" +
    "\060\117\021\120\040\121\056\122\051\001\002\000\032" +
    "\014\026\016\064\032\043\073\033\074\046\076\047\110" +
    "\031\116\060\117\021\120\040\121\056\122\051\001\002" +
    "\000\032\014\026\016\064\032\043\073\033\074\046\076" +
    "\047\110\031\116\060\117\021\120\040\121\056\122\051" +
    "\001\002\000\032\014\026\016\064\032\043\073\033\074" +
    "\046\076\047\110\031\116\060\117\021\120\040\121\056" +
    "\122\051\001\002\000\032\014\026\016\064\032\043\073" +
    "\033\074\046\076\047\110\031\116\060\117\021\120\040" +
    "\121\056\122\051\001\002\000\060\011\uffbd\015\uffbd\023" +
    "\uffbd\024\uffbd\025\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd" +
    "\045\uffbd\071\uffbd\072\uffbd\073\uffbd\074\uffbd\075\uffbd\077" +
    "\uffbd\100\uffbd\107\uffbd\110\uffbd\111\uffbd\112\uffbd\113\uffbd" +
    "\115\uffbd\001\002\000\032\014\026\016\064\032\043\073" +
    "\033\074\046\076\047\110\031\116\060\117\021\120\040" +
    "\121\056\122\051\001\002\000\032\014\026\016\064\032" +
    "\043\073\033\074\046\076\047\110\031\116\060\117\021" +
    "\120\040\121\056\122\051\001\002\000\004\016\117\001" +
    "\002\000\032\014\026\016\064\032\043\073\033\074\046" +
    "\076\047\110\031\116\060\117\021\120\040\121\056\122" +
    "\051\001\002\000\032\014\026\016\064\032\043\073\033" +
    "\074\046\076\047\110\031\116\060\117\021\120\040\121" +
    "\056\122\051\001\002\000\032\014\026\016\064\032\043" +
    "\073\033\074\046\076\047\110\031\116\060\117\021\120" +
    "\040\121\056\122\051\001\002\000\032\014\026\016\064" +
    "\032\043\073\033\074\046\076\047\110\031\116\060\117" +
    "\021\120\040\121\056\122\051\001\002\000\060\011\uffda" +
    "\015\uffda\023\uffda\024\uffda\025\uffda\026\uffda\027\uffda\030" +
    "\uffda\031\uffda\045\uffda\071\uffda\072\uffda\073\072\074\103" +
    "\075\uffda\077\uffda\100\uffda\107\107\110\073\111\102\112" +
    "\076\113\uffda\115\105\001\002\000\060\011\uffdf\015\uffdf" +
    "\023\uffdf\024\110\025\101\026\112\027\074\030\067\031" +
    "\077\045\106\071\uffdf\072\uffdf\073\072\074\103\075\uffdf" +
    "\077\uffdf\100\uffdf\107\107\110\073\111\102\112\076\113" +
    "\104\115\105\001\002\000\060\011\uffdc\015\uffdc\023\uffdc" +
    "\024\uffdc\025\uffdc\026\112\027\074\030\067\031\077\045" +
    "\106\071\uffdc\072\uffdc\073\072\074\103\075\uffdc\077\uffdc" +
    "\100\uffdc\107\107\110\073\111\102\112\076\113\uffdc\115" +
    "\105\001\002\000\060\011\uffd6\015\uffd6\023\uffd6\024\uffd6" +
    "\025\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6\045\uffd6\071" +
    "\uffd6\072\uffd6\073\072\074\103\075\uffd6\077\uffd6\100\uffd6" +
    "\107\uffd6\110\uffd6\111\102\112\076\113\uffd6\115\105\001" +
    "\002\000\060\011\uffcb\015\uffcb\023\uffcb\024\uffcb\025\uffcb" +
    "\026\uffcb\027\uffcb\030\uffcb\031\uffcb\045\uffcb\071\uffcb\072" +
    "\uffcb\073\uffcb\074\uffcb\075\uffcb\077\uffcb\100\uffcb\107\uffcb" +
    "\110\uffcb\111\uffcb\112\uffcb\113\uffcb\115\uffcb\001\002\000" +
    "\060\011\uffd1\015\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1" +
    "\027\uffd1\030\uffd1\031\uffd1\045\uffd1\071\uffd1\072\uffd1\073" +
    "\072\074\103\075\uffd1\077\uffd1\100\uffd1\107\uffd1\110\uffd1" +
    "\111\uffd1\112\uffd1\113\uffd1\115\uffd1\001\002\000\060\011" +
    "\uffd4\015\uffd4\023\uffd4\024\110\025\101\026\112\027\074" +
    "\030\067\031\077\045\106\071\uffd4\072\uffd4\073\072\074" +
    "\103\075\uffd4\077\uffd4\100\uffd4\107\107\110\073\111\102" +
    "\112\076\113\uffd4\115\105\001\002\000\060\011\uffd3\015" +
    "\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3" +
    "\031\uffd3\045\uffd3\071\uffd3\072\uffd3\073\072\074\103\075" +
    "\uffd3\077\uffd3\100\uffd3\107\uffd3\110\uffd3\111\uffd3\112\uffd3" +
    "\113\uffd3\115\uffd3\001\002\000\060\011\uffdb\015\uffdb\023" +
    "\uffdb\024\uffdb\025\uffdb\026\112\027\074\030\067\031\077" +
    "\045\106\071\uffdb\072\uffdb\073\072\074\103\075\uffdb\077" +
    "\uffdb\100\uffdb\107\107\110\073\111\102\112\076\113\uffdb" +
    "\115\105\001\002\000\052\024\110\025\101\026\112\027" +
    "\074\030\067\031\077\045\106\071\100\072\125\073\072" +
    "\074\103\075\075\077\111\100\071\107\107\110\073\111" +
    "\102\112\076\113\104\115\105\001\002\000\032\014\026" +
    "\016\064\032\043\073\033\074\046\076\047\110\031\116" +
    "\060\117\021\120\040\121\056\122\051\001\002\000\060" +
    "\011\uffbb\015\uffbb\023\uffbb\024\110\025\101\026\112\027" +
    "\074\030\067\031\077\045\106\071\100\072\uffbb\073\072" +
    "\074\103\075\075\077\111\100\071\107\107\110\073\111" +
    "\102\112\076\113\104\115\105\001\002\000\060\011\uffd9" +
    "\015\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9\030" +
    "\uffd9\031\uffd9\045\uffd9\071\uffd9\072\uffd9\073\072\074\103" +
    "\075\uffd9\077\uffd9\100\uffd9\107\107\110\073\111\102\112" +
    "\076\113\uffd9\115\105\001\002\000\060\011\uffd2\015\uffd2" +
    "\023\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2\031" +
    "\uffd2\045\uffd2\071\uffd2\072\uffd2\073\072\074\103\075\uffd2" +
    "\077\uffd2\100\uffd2\107\uffd2\110\uffd2\111\uffd2\112\uffd2\113" +
    "\uffd2\115\uffd2\001\002\000\004\014\143\001\002\000\004" +
    "\014\141\001\002\000\004\014\137\001\002\000\004\014" +
    "\135\001\002\000\004\015\136\001\002\000\060\011\uffc9" +
    "\015\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9\027\uffc9\030" +
    "\uffc9\031\uffc9\045\uffc9\071\uffc9\072\uffc9\073\uffc9\074\uffc9" +
    "\075\uffc9\077\uffc9\100\uffc9\107\uffc9\110\uffc9\111\uffc9\112" +
    "\uffc9\113\uffc9\115\uffc9\001\002\000\004\015\140\001\002" +
    "\000\060\011\uffc8\015\uffc8\023\uffc8\024\uffc8\025\uffc8\026" +
    "\uffc8\027\uffc8\030\uffc8\031\uffc8\045\uffc8\071\uffc8\072\uffc8" +
    "\073\uffc8\074\uffc8\075\uffc8\077\uffc8\100\uffc8\107\uffc8\110" +
    "\uffc8\111\uffc8\112\uffc8\113\uffc8\115\uffc8\001\002\000\004" +
    "\015\142\001\002\000\060\011\uffc6\015\uffc6\023\uffc6\024" +
    "\uffc6\025\uffc6\026\uffc6\027\uffc6\030\uffc6\031\uffc6\045\uffc6" +
    "\071\uffc6\072\uffc6\073\uffc6\074\uffc6\075\uffc6\077\uffc6\100" +
    "\uffc6\107\uffc6\110\uffc6\111\uffc6\112\uffc6\113\uffc6\115\uffc6" +
    "\001\002\000\004\015\144\001\002\000\060\011\uffc7\015" +
    "\uffc7\023\uffc7\024\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7" +
    "\031\uffc7\045\uffc7\071\uffc7\072\uffc7\073\uffc7\074\uffc7\075" +
    "\uffc7\077\uffc7\100\uffc7\107\uffc7\110\uffc7\111\uffc7\112\uffc7" +
    "\113\uffc7\115\uffc7\001\002\000\060\011\uffd8\015\uffd8\023" +
    "\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8" +
    "\045\uffd8\071\uffd8\072\uffd8\073\072\074\103\075\uffd8\077" +
    "\uffd8\100\uffd8\107\107\110\073\111\102\112\076\113\uffd8" +
    "\115\105\001\002\000\060\011\uffd5\015\uffd5\023\uffd5\024" +
    "\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\045\uffd5" +
    "\071\uffd5\072\uffd5\073\072\074\103\075\uffd5\077\uffd5\100" +
    "\uffd5\107\uffd5\110\uffd5\111\102\112\076\113\uffd5\115\105" +
    "\001\002\000\060\011\uffde\015\uffde\023\uffde\024\110\025" +
    "\101\026\112\027\074\030\067\031\077\045\106\071\uffde" +
    "\072\uffde\073\072\074\103\075\uffde\077\111\100\uffde\107" +
    "\107\110\073\111\102\112\076\113\104\115\105\001\002" +
    "\000\066\004\uffe3\005\uffe3\006\uffe3\007\uffe3\010\uffe3\012" +
    "\uffe3\013\uffe3\014\uffe3\016\uffe3\022\uffe3\032\uffe3\065\uffe3" +
    "\066\uffe3\067\uffe3\070\uffe3\073\uffe3\074\uffe3\076\uffe3\101" +
    "\uffe3\110\uffe3\114\uffe3\116\uffe3\117\uffe3\120\uffe3\121\uffe3" +
    "\122\uffe3\001\002\000\060\011\uffd7\015\uffd7\023\uffd7\024" +
    "\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\045\uffd7" +
    "\071\uffd7\072\uffd7\073\072\074\103\075\uffd7\077\uffd7\100" +
    "\uffd7\107\107\110\073\111\102\112\076\113\uffd7\115\105" +
    "\001\002\000\060\011\uffdd\015\uffdd\023\uffdd\024\uffdd\025" +
    "\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\045\uffdd\071\uffdd" +
    "\072\uffdd\073\072\074\103\075\uffdd\077\uffdd\100\uffdd\107" +
    "\uffdd\110\uffdd\111\uffdd\112\uffdd\113\uffdd\115\uffdd\001\002" +
    "\000\060\011\uffbc\015\uffbc\023\uffbc\024\uffbc\025\uffbc\026" +
    "\uffbc\027\uffbc\030\uffbc\031\uffbc\045\uffbc\071\uffbc\072\uffbc" +
    "\073\uffbc\074\uffbc\075\uffbc\077\uffbc\100\uffbc\107\uffbc\110" +
    "\uffbc\111\uffbc\112\uffbc\113\uffbc\115\uffbc\001\002\000\032" +
    "\014\026\016\064\032\043\073\033\074\046\076\047\110" +
    "\031\116\060\117\021\120\040\121\056\122\051\001\002" +
    "\000\052\011\uffe2\024\110\025\101\026\112\027\074\030" +
    "\067\031\077\045\106\071\100\073\072\074\103\075\075" +
    "\077\111\100\071\107\107\110\073\111\102\112\076\113" +
    "\104\115\105\001\002\000\032\014\026\016\064\032\043" +
    "\073\033\074\046\076\047\110\031\116\060\117\021\120" +
    "\040\121\056\122\051\001\002\000\052\023\160\024\110" +
    "\025\101\026\112\027\074\030\067\031\077\045\106\071" +
    "\100\073\072\074\103\075\075\077\111\100\071\107\107" +
    "\110\073\111\102\112\076\113\104\115\105\001\002\000" +
    "\032\014\026\016\064\032\043\073\033\074\046\076\047" +
    "\110\031\116\060\117\021\120\040\121\056\122\051\001" +
    "\002\000\052\015\162\024\110\025\101\026\112\027\074" +
    "\030\067\031\077\045\106\071\100\073\072\074\103\075" +
    "\075\077\111\100\071\107\107\110\073\111\102\112\076" +
    "\113\104\115\105\001\002\000\060\011\uffcc\015\uffcc\023" +
    "\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc" +
    "\045\uffcc\071\uffcc\072\uffcc\073\uffcc\074\uffcc\075\uffcc\077" +
    "\uffcc\100\uffcc\107\uffcc\110\uffcc\111\uffcc\112\uffcc\113\uffcc" +
    "\115\uffcc\001\002\000\066\004\ufffb\005\ufffb\006\ufffb\007" +
    "\ufffb\010\ufffb\012\ufffb\013\ufffb\014\ufffb\016\ufffb\022\ufffb" +
    "\032\ufffb\065\ufffb\066\ufffb\067\ufffb\070\ufffb\073\ufffb\074" +
    "\ufffb\076\ufffb\101\ufffb\110\ufffb\114\ufffb\116\ufffb\117\ufffb" +
    "\120\ufffb\121\ufffb\122\ufffb\001\002\000\066\004\ufff0\005" +
    "\ufff0\006\ufff0\007\ufff0\010\ufff0\012\ufff0\013\ufff0\014\ufff0" +
    "\016\ufff0\022\ufff0\032\ufff0\065\ufff0\066\ufff0\067\ufff0\070" +
    "\ufff0\073\ufff0\074\ufff0\076\ufff0\101\ufff0\110\ufff0\114\ufff0" +
    "\116\ufff0\117\ufff0\120\ufff0\121\ufff0\122\ufff0\001\002\000" +
    "\016\004\023\005\054\006\061\007\020\010\037\016\166" +
    "\001\002\000\006\016\uffb5\021\154\001\002\000\004\011" +
    "\201\001\002\000\004\011\171\001\002\000\032\014\026" +
    "\016\064\032\043\073\033\074\046\076\047\110\031\116" +
    "\060\117\021\120\040\121\056\122\051\001\002\000\052" +
    "\011\173\024\110\025\101\026\112\027\074\030\067\031" +
    "\077\045\106\071\100\073\072\074\103\075\075\077\111" +
    "\100\071\107\107\110\073\111\102\112\076\113\104\115" +
    "\105\001\002\000\032\014\026\016\064\032\043\073\033" +
    "\074\046\076\047\110\031\116\060\117\021\120\040\121" +
    "\056\122\051\001\002\000\052\015\uffef\024\uffcd\025\uffcd" +
    "\026\uffcd\027\uffcd\030\uffcd\031\uffcd\045\uffcd\071\uffcd\073" +
    "\uffcd\074\uffcd\075\uffcd\077\uffcd\100\uffcd\107\uffcd\110\uffcd" +
    "\111\uffcd\112\uffcd\113\uffcd\115\uffcd\001\002\000\004\015" +
    "\177\001\002\000\052\015\uffee\024\uffca\025\uffca\026\uffca" +
    "\027\uffca\030\uffca\031\uffca\045\uffca\071\uffca\073\uffca\074" +
    "\uffca\075\uffca\077\uffca\100\uffca\107\uffca\110\uffca\111\uffca" +
    "\112\uffca\113\uffca\115\uffca\001\002\000\004\012\005\001" +
    "\002\000\066\004\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5" +
    "\012\uffe5\013\uffe5\014\uffe5\016\uffe5\022\uffe5\032\uffe5\065" +
    "\uffe5\066\uffe5\067\uffe5\070\uffe5\073\uffe5\074\uffe5\076\uffe5" +
    "\101\uffe5\110\uffe5\114\uffe5\116\uffe5\117\uffe5\120\uffe5\121" +
    "\uffe5\122\uffe5\001\002\000\032\014\026\016\064\032\043" +
    "\073\033\074\046\076\047\110\031\116\060\117\021\120" +
    "\040\121\056\122\051\001\002\000\052\011\203\024\110" +
    "\025\101\026\112\027\074\030\067\031\077\045\106\071" +
    "\100\073\072\074\103\075\075\077\111\100\071\107\107" +
    "\110\073\111\102\112\076\113\104\115\105\001\002\000" +
    "\032\014\026\016\064\032\043\073\033\074\046\076\047" +
    "\110\031\116\060\117\021\120\040\121\056\122\051\001" +
    "\002\000\004\015\205\001\002\000\004\012\005\001\002" +
    "\000\066\004\uffe6\005\uffe6\006\uffe6\007\uffe6\010\uffe6\012" +
    "\uffe6\013\uffe6\014\uffe6\016\uffe6\022\uffe6\032\uffe6\065\uffe6" +
    "\066\uffe6\067\uffe6\070\uffe6\073\uffe6\074\uffe6\076\uffe6\101" +
    "\uffe6\110\uffe6\114\uffe6\116\uffe6\117\uffe6\120\uffe6\121\uffe6" +
    "\122\uffe6\001\002\000\066\004\ufffa\005\ufffa\006\ufffa\007" +
    "\ufffa\010\ufffa\012\ufffa\013\ufffa\014\ufffa\016\ufffa\022\ufffa" +
    "\032\ufffa\065\ufffa\066\ufffa\067\ufffa\070\ufffa\073\ufffa\074" +
    "\ufffa\076\ufffa\101\ufffa\110\ufffa\114\ufffa\116\ufffa\117\ufffa" +
    "\120\ufffa\121\ufffa\122\ufffa\001\002\000\060\011\uffbe\015" +
    "\uffbe\023\uffbe\024\uffbe\025\uffbe\026\uffbe\027\uffbe\030\uffbe" +
    "\031\uffbe\045\uffbe\071\uffbe\072\uffbe\073\uffbe\074\uffbe\075" +
    "\uffbe\077\uffbe\100\uffbe\107\uffbe\110\uffbe\111\uffbe\112\uffbe" +
    "\113\uffbe\115\uffbe\001\002\000\060\011\uffcf\015\uffcf\023" +
    "\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf" +
    "\045\uffcf\071\uffcf\072\uffcf\073\072\074\103\075\uffcf\077" +
    "\uffcf\100\uffcf\107\uffcf\110\uffcf\111\102\112\076\113\uffcf" +
    "\115\105\001\002\000\052\015\213\024\110\025\101\026" +
    "\112\027\074\030\067\031\077\045\106\071\100\073\072" +
    "\074\103\075\075\077\111\100\071\107\107\110\073\111" +
    "\102\112\076\113\104\115\105\001\002\000\060\011\uffce" +
    "\015\uffce\023\uffce\024\uffce\025\uffce\026\uffce\027\uffce\030" +
    "\uffce\031\uffce\045\uffce\071\uffce\072\uffce\073\uffce\074\uffce" +
    "\075\uffce\077\uffce\100\uffce\107\uffce\110\uffce\111\uffce\112" +
    "\uffce\113\uffce\115\uffce\001\002\000\032\014\026\016\064" +
    "\032\043\073\033\074\046\076\047\110\031\116\060\117" +
    "\021\120\040\121\056\122\051\001\002\000\052\015\216" +
    "\024\110\025\101\026\112\027\074\030\067\031\077\045" +
    "\106\071\100\073\072\074\103\075\075\077\111\100\071" +
    "\107\107\110\073\111\102\112\076\113\104\115\105\001" +
    "\002\000\004\012\005\001\002\000\066\004\uffe7\005\uffe7" +
    "\006\uffe7\007\uffe7\010\uffe7\012\uffe7\013\uffe7\014\uffe7\016" +
    "\uffe7\022\uffe7\032\uffe7\065\uffe7\066\uffe7\067\uffe7\070\uffe7" +
    "\073\uffe7\074\uffe7\076\uffe7\101\uffe7\110\uffe7\114\uffe7\116" +
    "\uffe7\117\uffe7\120\uffe7\121\uffe7\122\uffe7\001\002\000\032" +
    "\014\026\016\064\032\043\073\033\074\046\076\047\110" +
    "\031\116\060\117\021\120\040\121\056\122\051\001\002" +
    "\000\052\015\222\024\110\025\101\026\112\027\074\030" +
    "\067\031\077\045\106\071\100\073\072\074\103\075\075" +
    "\077\111\100\071\107\107\110\073\111\102\112\076\113" +
    "\104\115\105\001\002\000\004\012\005\001\002\000\070" +
    "\004\uffed\005\uffed\006\uffed\007\uffed\010\uffed\012\uffed\013" +
    "\uffed\014\uffed\016\uffed\022\uffed\032\uffed\065\uffed\066\uffed" +
    "\067\uffed\070\uffed\073\uffed\074\uffed\076\uffed\101\uffed\103" +
    "\224\110\uffed\114\uffed\116\uffed\117\uffed\120\uffed\121\uffed" +
    "\122\uffed\001\002\000\006\012\005\101\024\001\002\000" +
    "\066\004\uffec\005\uffec\006\uffec\007\uffec\010\uffec\012\uffec" +
    "\013\uffec\014\uffec\016\uffec\022\uffec\032\uffec\065\uffec\066" +
    "\uffec\067\uffec\070\uffec\073\uffec\074\uffec\076\uffec\101\uffec" +
    "\110\uffec\114\uffec\116\uffec\117\uffec\120\uffec\121\uffec\122" +
    "\uffec\001\002\000\066\004\uffea\005\uffea\006\uffea\007\uffea" +
    "\010\uffea\012\uffea\013\uffea\014\uffea\016\uffea\022\uffea\032" +
    "\uffea\065\uffea\066\uffea\067\uffea\070\uffea\073\uffea\074\uffea" +
    "\076\uffea\101\uffea\110\uffea\114\uffea\116\uffea\117\uffea\120" +
    "\uffea\121\uffea\122\uffea\001\002\000\066\004\uffeb\005\uffeb" +
    "\006\uffeb\007\uffeb\010\uffeb\012\uffeb\013\uffeb\014\uffeb\016" +
    "\uffeb\022\uffeb\032\uffeb\065\uffeb\066\uffeb\067\uffeb\070\uffeb" +
    "\073\uffeb\074\uffeb\076\uffeb\101\uffeb\110\uffeb\114\uffeb\116" +
    "\uffeb\117\uffeb\120\uffeb\121\uffeb\122\uffeb\001\002\000\072" +
    "\002\uffff\004\uffff\005\uffff\006\uffff\007\uffff\010\uffff\012" +
    "\uffff\013\uffff\014\uffff\016\uffff\022\uffff\032\uffff\065\uffff" +
    "\066\uffff\067\uffff\070\uffff\073\uffff\074\uffff\076\uffff\101" +
    "\uffff\103\uffff\110\uffff\114\uffff\116\uffff\117\uffff\120\uffff" +
    "\121\uffff\122\uffff\001\002\000\066\004\ufffd\005\ufffd\006" +
    "\ufffd\007\ufffd\010\ufffd\012\ufffd\013\ufffd\014\ufffd\016\ufffd" +
    "\022\ufffd\032\ufffd\065\ufffd\066\ufffd\067\ufffd\070\ufffd\073" +
    "\ufffd\074\ufffd\076\ufffd\101\ufffd\110\ufffd\114\ufffd\116\ufffd" +
    "\117\ufffd\120\ufffd\121\ufffd\122\ufffd\001\002\000\004\015" +
    "\233\001\002\000\004\011\234\001\002\000\066\004\uffe4" +
    "\005\uffe4\006\uffe4\007\uffe4\010\uffe4\012\uffe4\013\uffe4\014" +
    "\uffe4\016\uffe4\022\uffe4\032\uffe4\065\uffe4\066\uffe4\067\uffe4" +
    "\070\uffe4\073\uffe4\074\uffe4\076\uffe4\101\uffe4\110\uffe4\114" +
    "\uffe4\116\uffe4\117\uffe4\120\uffe4\121\uffe4\122\uffe4\001\002" +
    "\000\006\011\uffe1\021\236\001\002\000\032\014\026\016" +
    "\064\032\043\073\033\074\046\076\047\110\031\116\060" +
    "\117\021\120\040\121\056\122\051\001\002\000\052\011" +
    "\uffe0\024\110\025\101\026\112\027\074\030\067\031\077" +
    "\045\106\071\100\073\072\074\103\075\075\077\111\100" +
    "\071\107\107\110\073\111\102\112\076\113\104\115\105" +
    "\001\002\000\066\004\uffe8\005\uffe8\006\uffe8\007\uffe8\010" +
    "\uffe8\012\uffe8\013\uffe8\014\uffe8\016\uffe8\022\uffe8\032\uffe8" +
    "\065\uffe8\066\uffe8\067\uffe8\070\uffe8\073\uffe8\074\uffe8\076" +
    "\uffe8\101\uffe8\110\uffe8\114\uffe8\116\uffe8\117\uffe8\120\uffe8" +
    "\121\uffe8\122\uffe8\001\002\000\066\004\uffe9\005\uffe9\006" +
    "\uffe9\007\uffe9\010\uffe9\012\uffe9\013\uffe9\014\uffe9\016\uffe9" +
    "\022\uffe9\032\uffe9\065\uffe9\066\uffe9\067\uffe9\070\uffe9\073" +
    "\uffe9\074\uffe9\076\uffe9\101\uffe9\110\uffe9\114\uffe9\116\uffe9" +
    "\117\uffe9\120\uffe9\121\uffe9\122\uffe9\001\002\000\066\004" +
    "\ufff1\005\ufff1\006\ufff1\007\ufff1\010\ufff1\012\ufff1\013\ufff1" +
    "\014\ufff1\016\ufff1\022\ufff1\032\ufff1\065\ufff1\066\ufff1\067" +
    "\ufff1\070\ufff1\073\ufff1\074\ufff1\076\ufff1\101\ufff1\110\ufff1" +
    "\114\ufff1\116\ufff1\117\ufff1\120\ufff1\121\ufff1\122\ufff1\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\240\000\006\002\003\011\005\001\001\000\002\001" +
    "\001\000\044\002\047\003\014\004\054\005\041\006\027" +
    "\007\007\010\035\012\012\013\056\014\031\015\033\016" +
    "\044\017\040\020\015\021\026\023\052\024\016\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\002\047\004\230\005\041\006\027\007" +
    "\007\010\035\012\012\013\056\014\031\015\033\016\044" +
    "\017\040\020\015\021\026\023\052\024\016\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\006\211\007\062\010\064" +
    "\023\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\006\210\007\062\010\064\023\052\001\001\000\002" +
    "\001\001\000\012\006\207\007\062\010\064\023\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\006\152\007\062\010\064\023\052\001" +
    "\001\000\012\006\151\007\062\010\064\023\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\006\065\007\062\010\064\023\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\006\150\007\062\010\064\023\052" +
    "\001\001\000\002\001\001\000\012\006\146\007\062\010" +
    "\064\023\052\001\001\000\002\001\001\000\012\006\145" +
    "\007\062\010\064\023\052\001\001\000\012\006\144\007" +
    "\062\010\064\023\052\001\001\000\002\001\001\000\012" +
    "\006\127\007\062\010\064\023\052\001\001\000\012\006" +
    "\126\007\062\010\064\023\052\001\001\000\012\006\123" +
    "\007\062\010\064\023\052\001\001\000\012\006\122\007" +
    "\062\010\064\023\052\001\001\000\012\006\121\007\062" +
    "\010\064\023\052\001\001\000\002\001\001\000\012\006" +
    "\120\007\062\010\064\023\052\001\001\000\012\006\117" +
    "\007\062\010\064\023\052\001\001\000\002\001\001\000" +
    "\012\006\115\007\062\010\064\023\052\001\001\000\012" +
    "\006\114\007\062\010\064\023\052\001\001\000\012\006" +
    "\113\007\062\010\064\023\052\001\001\000\012\006\112" +
    "\007\062\010\064\023\052\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\006\125" +
    "\007\062\010\064\023\052\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\006\154\007\062\010\064" +
    "\023\052\001\001\000\002\001\001\000\012\006\156\007" +
    "\062\010\064\023\052\001\001\000\002\001\001\000\012" +
    "\006\160\007\062\010\064\023\052\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\005\166\012\012\015\167\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\006\171" +
    "\007\062\010\064\023\052\001\001\000\002\001\001\000" +
    "\014\006\027\007\173\010\175\023\052\025\174\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\002\177\001\001\000\002\001\001\000\012\006\201" +
    "\007\062\010\064\023\052\001\001\000\002\001\001\000" +
    "\014\006\027\007\173\010\175\023\052\025\203\001\001" +
    "\000\002\001\001\000\004\002\205\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\006\214\007" +
    "\062\010\064\023\052\001\001\000\002\001\001\000\004" +
    "\002\216\001\001\000\002\001\001\000\012\006\220\007" +
    "\062\010\064\023\052\001\001\000\002\001\001\000\004" +
    "\002\222\001\001\000\002\001\001\000\010\002\225\021" +
    "\226\022\224\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\006\236\007\062\010\064\023\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


	   	
	public ArrayList<ErrorC> listaErrores = new ArrayList();	
	public ArrayList<Instruccion> ast = new ArrayList<Instruccion>();

	public Instruccion raiz = null;

	/*@Override
	public void syntax_error(Symbol cur_token) 
	{        
		List<Integer> listaIdTokens = expected_token_ids();
		LinkedList<String> listaNombres = new LinkedList<String>();
		for (Integer expected : listaIdTokens) 
		{			
			listaNombres.add(symbl_name_from_id(expected));
		}		
		Utilidades.Singlenton.registrarError(String.valueOf(cur_token.value), 
			String.valueOf(cur_token.value) + ". Se esperaba :"+listaNombres.toString(), ErrorC.TipoError.LEXICO, cur_token.right+1, cur_token.left+1);
		/*listaErrores.add(
					listaErrores.add(new ErrorC(ErrorC.TipoError.SINTACTICO,
								String.valueOf(cur_token.value) + ". Se esperaba :"+listaNombres.toString(),
								cur_token.right+1,
								cur_token.left+1));
                
	}*/


    public void report_error(String message, Object info) 
    {
        int linea = 0;
        int columna = 0;
        java_cup.runtime.Symbol s = null;
        StringBuilder m = new StringBuilder("Error Sintactico");

        if (info instanceof java_cup.runtime.Symbol) 
        {
            s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) 
            {                
                columna = s.left+1;
                if (s.right>= 0)
                {
                    linea = s.right+ 1;
                }                    
            }
        }

        m.append(" Se esperaba: "+message);
        //System.err.println(m.toString());
        //System.out.println("Error");
        //System.out.println("Error linea:"+linea+", col:"+columna);
        LinkedList<String> toks = new LinkedList();

        if(!expected_token_ids().isEmpty())
        {
            Imprimir("No esta vacia "+ expected_token_ids().size());		  
            for(int w=0; w<expected_token_ids().size(); w++)
            { 
                if(expected_token_ids().get(w) !=sym.error)
                {
                    int tok = (int)expected_token_ids().get(w);                        
                    toks.add( symbol_name_from_id(tok) );
                }
            }
        }

        Imprimir(expected_token_ids().size());
      
        for(int w=0; w<expected_token_ids().size(); w++)
        { 
            if(expected_token_ids().get(w)!=sym.error)
            {
                int tok = (int)expected_token_ids().get(w);
                toks.add( symbol_name_from_id(tok) );
            }
        }
        String esperados = "";
        for(String id : toks)
        {
            if(!esperados.equals(""))
            {
                esperados += ", ";
            }
            esperados += id;
            
        }        
        Utilidades.Singlenton.registrarError(s.value.toString(), "Se esperaba .. " +esperados, ErrorC.TipoError.SINTACTICO, linea, columna);		                  
    }	

    public String symbol_name_from_id(int id){
        return sym.terminalNames[id];
    }

	/*public void addError(Symbol s)
	{
		listaErrores.add(new ErrorC("Sintactico",s.rights.right+1,ConvertirObjectToString(s.value)));
	}*/
	public void Imprimir(Object cad)
	{
		System.out.println(cad.toString());
	}	


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= BLOQUE 
            {
              Object RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloque inst = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Imprimir("Correcto"); raiz = inst; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // BLOQUE ::= llavei LINST llaved 
            {
              Bloque RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Nodo> l = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Bloque(l,lright,lleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // BLOQUE ::= llavei llaved 
            {
              Bloque RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Bloque(new ArrayList<Nodo>(),lright,lleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LINST ::= LINST INST 
            {
              ArrayList<Nodo> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Nodo> lista = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo inst = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 lista.add(inst); RESULT = lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINST",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // LINST ::= INST 
            {
              ArrayList<Nodo> RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo inst = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Nodo> l = new ArrayList<Nodo>(); l.add(inst); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINST",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INST ::= DECLARACION puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Declaracion inst = (Declaracion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = inst; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INST ::= ASIG puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Asignacion inst = (Asignacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INST ::= BLOQUE 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloque inst = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = inst; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INST ::= PRINT 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Imprimir inst = (Imprimir)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = inst; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INST ::= PRINTABLE 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ImprimirT inst = (ImprimirT)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INST ::= WHILE 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		While inst = (While)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INST ::= FOR 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		For inst = (For)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INST ::= BREAK 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Break inst = (Break)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INST ::= CONTINUE 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Continuar inst = (Continuar)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INST ::= IF 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		If inst = (If)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INST ::= AUMENTO puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion inst = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INST ::= DECREMENTO puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion inst = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ACTUALIZACION ::= AUMENTO 
            {
              Expresion RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion inst = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZACION",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ACTUALIZACION ::= DECREMENTO 
            {
              Expresion RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion inst = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZACION",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // IF ::= si pari EXP pard BLOQUE 
            {
              If RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String si = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion condicion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new If(condicion, bloque, siright, sileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // IF ::= si pari EXP pard BLOQUE sino ELSE 
            {
              If RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String si = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion condicion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int inst2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int inst2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		If inst2 = (If)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new If(condicion,bloque,inst2,siright, sileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ELSE ::= IF 
            {
              If RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		If inst = (If)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ELSE ::= BLOQUE 
            {
              If RESULT =null;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new If(new Literal(new Tipo(Tipo.TypePrimitive.BOOL), true, bloqueright,bloqueleft),bloque, bloqueright, bloqueleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CONTINUE ::= continuar puntocoma 
            {
              Continuar RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String inst = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Continuar(instright, instleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTINUE",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // BREAK ::= romper puntocoma 
            {
              Break RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String inst = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Break(instright, instleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BREAK",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // WHILE ::= mientras pari EXP pard BLOQUE 
            {
              While RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String inst = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion condicion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new While(condicion,bloque,instright, instleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // FOR ::= para pari DECLARACION puntocoma EXP puntocoma ACTUALIZACION pard BLOQUE 
            {
              For RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String para = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Declaracion dec = (Declaracion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion condicion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int actleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int actright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion act = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new For(dec,condicion,act,bloque, paraleft,pararight);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FOR ::= para pari ASIG puntocoma EXP puntocoma ACTUALIZACION pard BLOQUE 
            {
              For RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String para = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Asignacion dec = (Asignacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion condicion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int actleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int actright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion act = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new For(dec,condicion,act,bloque,paraleft,pararight);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // PRINTABLE ::= printable pari pard puntocoma 
            {
              ImprimirT RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		RESULT = new ImprimirT(pright,pleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTABLE",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // PRINT ::= print pari EXP pard puntocoma 
            {
              Imprimir RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion valor = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new Imprimir(valor, pright,pleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINT",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ASIG ::= id igual EXP 
            {
              Asignacion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion valor = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Asignacion(id, valor, idright,idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIG",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACION ::= TIPO id 
            {
              Declaracion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Declaracion(t, id , tright,tleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARACION ::= TIPO id igual EXP 
            {
              Declaracion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion valor = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Declaracion(t, id, valor, tright,tleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EXP ::= EXP and EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new And(opi, opd, opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EXP ::= EXP or EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Or(opi, opd, opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EXP ::= not EXP 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Not(op, opright,opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXP ::= EXP igualigual EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Igual(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXP ::= EXP desigual EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Desigual(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXP ::= EXP mayor EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Mayor(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXP ::= EXP mayorigual EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new MayorIgual(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXP ::= EXP menor EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Menor(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXP ::= EXP menorigual EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new MenorIgual(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXP ::= EXP suma EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Suma(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXP ::= EXP menos EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Resta(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXP ::= EXP xor EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Xor(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXP ::= EXP multi EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Multiplicacion(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXP ::= EXP div EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Division(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXP ::= EXP modulo EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Modulo(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXP ::= TER 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Ternario op = (Ternario)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = op;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXP ::= menos EXP 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Menos(op, opright,opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXP ::= pari EXP pard 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = op;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXP ::= AUMENTO 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = op;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXP ::= potencia pari EXP coma EXP pard 
            {
              Expresion RESULT =null;
		int potleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int potright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String pot = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Potencia(opi,opd,potright,potleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXP ::= EXP instanceof_ id 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new InstanceOf(op,tipo, opright, opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXP ::= DECREMENTO 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = op;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXP ::= EXP punto id pari pard 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new Llamada(op,t, opright,opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXP ::= EXP punto tostring pari pard 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		RESULT = new ToString(op,opright,opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXP ::= EXP punto tolower pari pard 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		RESULT = new ToLower(op,opright,opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXP ::= EXP punto touper pari pard 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		RESULT = new ToUper(op,opright,opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXP ::= entero 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		int v = (int)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Tipo.TypePrimitive.INT), v, vright,vleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXP ::= decimal 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		double v = (double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Tipo.TypePrimitive.DOUBLE), v, vright,vleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXP ::= booleano 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		boolean v = (boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Tipo.TypePrimitive.BOOL), v, vright,vleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXP ::= cadena 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Tipo.TypePrimitive.STRING), v, vright,vleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXP ::= caracter 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		char v = (char)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Tipo.TypePrimitive.CHAR), v, vright,vleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXP ::= id 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Variable(v, vright,vleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // AUMENTO ::= EXP aumento 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Aumento(op, opright, opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AUMENTO",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // AUMENTO ::= aumento EXP 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Preaumento(op, opright, opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AUMENTO",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DECREMENTO ::= EXP decremento 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Decremento(op, opright, opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECREMENTO",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DECREMENTO ::= decremento EXP 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Predecremento(op, opright, opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECREMENTO",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // TER ::= EXP interrogante EXP dospuntos EXP 
            {
              Ternario RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion v = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion f = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Ternario(c,v,f,cright,cleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TER",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // TIPO ::= tint 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Tipo(Tipo.TypePrimitive.INT);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // TIPO ::= tchar 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =  new Tipo(Tipo.TypePrimitive.CHAR);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // TIPO ::= tdouble 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Tipo(Tipo.TypePrimitive.DOUBLE);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // TIPO ::= tbool 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Tipo(Tipo.TypePrimitive.BOOL);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // TIPO ::= tstring 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Tipo(Tipo.TypePrimitive.STRING);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // TIPO ::= id 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Tipo(Tipo.TypePrimitive.OBJETO,t);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
