
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analisis;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import AST.*;
import Utilidades.ErrorC;
import AST.Instruccion.*;
import AST.Instruccion.Ciclos.*;
import AST.Expresion.*;
import AST.Entorno.*;
import AST.Expresion.Aritmetica.*;
import AST.Expresion.Relacional.*;
import AST.Expresion.Logica.*;
import AST.Expresion.Arreglo.*;
import AST.Expresion.Casteo.*;
import AST.Expresion.Casteo.Explicito.*;
import AST.Expresion.Funcion.*;
import AST.Clase.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\246\000\002\002\004\000\002\012\003\000\002\074" +
    "\004\000\002\074\003\000\002\071\010\000\002\071\012" +
    "\000\002\072\003\000\002\072\002\000\002\073\004\000" +
    "\002\073\003\000\002\002\005\000\002\002\004\000\002" +
    "\003\004\000\002\003\003\000\002\004\004\000\002\004" +
    "\004\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\004\000\002\004\004\000\002\004\004\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\004" +
    "\000\002\011\006\000\002\011\006\000\002\011\006\000" +
    "\002\011\006\000\002\027\003\000\002\027\003\000\002" +
    "\046\011\000\002\046\012\000\002\045\004\000\002\045" +
    "\003\000\002\043\006\000\002\044\005\000\002\023\007" +
    "\000\002\023\011\000\002\024\003\000\002\024\003\000" +
    "\002\022\004\000\002\021\004\000\002\017\007\000\002" +
    "\020\011\000\002\042\012\000\002\026\013\000\002\026" +
    "\013\000\002\015\006\000\002\014\007\000\002\014\007" +
    "\000\002\016\005\000\002\033\006\000\002\005\004\000" +
    "\002\040\005\000\002\040\003\000\002\041\003\000\002" +
    "\041\005\000\002\041\004\000\002\041\006\000\002\041" +
    "\006\000\002\037\003\000\002\037\003\000\002\031\005" +
    "\000\002\031\004\000\002\006\005\000\002\006\005\000" +
    "\002\006\004\000\002\006\005\000\002\006\005\000\002" +
    "\006\005\000\002\006\005\000\002\006\005\000\002\006" +
    "\005\000\002\006\005\000\002\006\005\000\002\006\005" +
    "\000\002\006\005\000\002\006\005\000\002\006\005\000" +
    "\002\006\003\000\002\006\004\000\002\006\003\000\002" +
    "\006\010\000\002\006\005\000\002\006\003\000\002\006" +
    "\007\000\002\006\007\000\002\006\005\000\002\006\007" +
    "\000\002\006\006\000\002\006\006\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\005\000\002\006" +
    "\005\000\002\006\005\000\002\006\004\000\002\006\003" +
    "\000\002\006\003\000\002\062\010\000\002\062\006\000" +
    "\002\061\005\000\002\064\003\000\002\064\002\000\002" +
    "\065\005\000\002\065\003\000\002\030\003\000\002\030" +
    "\003\000\002\056\004\000\002\056\004\000\002\057\010" +
    "\000\002\057\007\000\002\057\007\000\002\057\006\000" +
    "\002\052\003\000\002\052\003\000\002\054\005\000\002" +
    "\054\003\000\002\054\002\000\002\053\004\000\002\053" +
    "\005\000\002\053\005\000\002\053\006\000\002\047\004" +
    "\000\002\047\003\000\002\050\003\000\002\050\003\000" +
    "\002\067\004\000\002\067\003\000\002\066\004\000\002" +
    "\066\003\000\002\063\003\000\002\063\003\000\002\063" +
    "\003\000\002\051\003\000\002\051\003\000\002\051\003" +
    "\000\002\032\006\000\002\032\005\000\002\036\005\000" +
    "\002\035\005\000\002\035\003\000\002\034\003\000\002" +
    "\034\003\000\002\007\004\000\002\007\004\000\002\010" +
    "\004\000\002\010\004\000\002\025\007\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0152\000\016\036\011\045\014\052\004\053\005\054" +
    "\010\057\013\001\002\000\036\004\uff6d\005\uff6d\006\uff6d" +
    "\007\uff6d\010\uff6d\016\uff6d\034\uff6d\036\uff6d\041\uff6d\045" +
    "\uff6d\052\uff6d\053\uff6d\054\uff6d\057\uff6d\001\002\000\036" +
    "\004\uff6e\005\uff6e\006\uff6e\007\uff6e\010\uff6e\016\uff6e\034" +
    "\uff6e\036\uff6e\041\uff6e\045\uff6e\052\uff6e\053\uff6e\054\uff6e" +
    "\057\uff6e\001\002\000\036\004\uff79\005\uff79\006\uff79\007" +
    "\uff79\010\uff79\016\uff79\034\uff79\036\uff79\041\uff79\045\uff79" +
    "\052\uff79\053\uff79\054\uff79\057\uff79\001\002\000\004\002" +
    "\u0154\001\002\000\036\004\uff6f\005\uff6f\006\uff6f\007\uff6f" +
    "\010\uff6f\016\uff6f\034\uff6f\036\uff6f\041\uff6f\045\uff6f\052" +
    "\uff6f\053\uff6f\054\uff6f\057\uff6f\001\002\000\036\004\uff77" +
    "\005\uff77\006\uff77\007\uff77\010\uff77\016\uff77\034\uff77\036" +
    "\uff77\041\uff77\045\uff77\052\uff77\053\uff77\054\uff77\057\uff77" +
    "\001\002\000\020\002\ufffe\036\ufffe\045\ufffe\052\ufffe\053" +
    "\ufffe\054\ufffe\057\ufffe\001\002\000\036\004\uff71\005\uff71" +
    "\006\uff71\007\uff71\010\uff71\016\uff71\034\uff71\036\uff71\041" +
    "\uff71\045\uff71\052\uff71\053\uff71\054\uff71\057\uff71\001\002" +
    "\000\036\004\uff72\005\uff72\006\uff72\007\uff72\010\uff72\016" +
    "\uff72\034\uff72\036\uff72\041\uff72\045\uff72\052\uff72\053\uff72" +
    "\054\uff72\057\uff72\001\002\000\020\036\011\041\023\045" +
    "\014\052\004\053\005\054\010\057\013\001\002\000\036" +
    "\004\uff70\005\uff70\006\uff70\007\uff70\010\uff70\016\uff70\034" +
    "\uff70\036\uff70\041\uff70\045\uff70\052\uff70\053\uff70\054\uff70" +
    "\057\uff70\001\002\000\036\004\uff78\005\uff78\006\uff78\007" +
    "\uff78\010\uff78\016\uff78\034\uff78\036\uff78\041\uff78\045\uff78" +
    "\052\uff78\053\uff78\054\uff78\057\uff78\001\002\000\020\002" +
    "\000\036\011\045\014\052\004\053\005\054\010\057\013" +
    "\001\002\000\020\002\uffff\036\uffff\045\uffff\052\uffff\053" +
    "\uffff\054\uffff\057\uffff\001\002\000\036\004\uff7a\005\uff7a" +
    "\006\uff7a\007\uff7a\010\uff7a\016\uff7a\034\uff7a\036\uff7a\041" +
    "\uff7a\045\uff7a\052\uff7a\053\uff7a\054\uff7a\057\uff7a\001\002" +
    "\000\004\016\024\001\002\000\006\012\025\044\026\001" +
    "\002\000\036\004\035\005\040\006\037\007\032\010\042" +
    "\013\ufffa\016\044\034\033\036\011\045\014\052\004\053" +
    "\005\054\010\057\013\001\002\000\004\016\027\001\002" +
    "\000\004\012\030\001\002\000\036\004\035\005\040\006" +
    "\037\007\032\010\042\013\ufffa\016\044\034\033\036\011" +
    "\045\014\052\004\053\005\054\010\057\013\001\002\000" +
    "\004\016\uffbd\001\002\000\010\015\uff5d\016\uff5d\017\uff5d" +
    "\001\002\000\004\016\uff82\001\002\000\036\004\035\005" +
    "\040\006\037\007\032\010\042\013\ufffb\016\044\034\033" +
    "\036\011\045\014\052\004\053\005\054\010\057\013\001" +
    "\002\000\010\015\uff60\016\uff60\017\uff60\001\002\000\004" +
    "\016\uff83\001\002\000\010\015\uff5f\016\uff5f\017\uff5f\001" +
    "\002\000\010\015\uff5e\016\uff5e\017\uff5e\001\002\000\004" +
    "\013\u0150\001\002\000\010\015\uff5c\016\uff5c\017\uff5c\001" +
    "\002\000\006\011\107\012\111\001\002\000\006\014\104" +
    "\016\uffbc\001\002\000\004\016\100\001\002\000\034\004" +
    "\035\005\040\006\037\007\032\010\042\016\050\034\033" +
    "\036\011\045\014\052\004\053\005\054\010\057\013\001" +
    "\002\000\036\004\ufff8\005\ufff8\006\ufff8\007\ufff8\010\ufff8" +
    "\013\ufff8\016\ufff8\034\ufff8\036\ufff8\045\ufff8\052\ufff8\053" +
    "\ufff8\054\ufff8\057\ufff8\001\002\000\006\014\075\016\uffbc" +
    "\001\002\000\004\016\052\001\002\000\004\014\053\001" +
    "\002\000\024\004\035\005\040\006\037\007\032\010\042" +
    "\015\uff7f\016\054\024\uff7f\045\060\001\002\000\004\016" +
    "\uffbc\001\002\000\006\015\uff80\024\uff80\001\002\000\006" +
    "\015\073\024\072\001\002\000\004\016\070\001\002\000" +
    "\016\004\035\005\040\006\037\007\032\010\042\016\054" +
    "\001\002\000\004\016\062\001\002\000\010\015\uff7d\017" +
    "\064\024\uff7d\001\002\000\010\015\uff7b\017\066\024\uff7b" +
    "\001\002\000\004\020\065\001\002\000\014\011\uffba\015" +
    "\uffba\017\uffba\021\uffba\024\uffba\001\002\000\004\020\067" +
    "\001\002\000\014\011\uffbb\015\uffbb\017\uffbb\021\uffbb\024" +
    "\uffbb\001\002\000\010\015\uff7e\017\064\024\uff7e\001\002" +
    "\000\010\015\uff7c\017\066\024\uff7c\001\002\000\020\004" +
    "\035\005\040\006\037\007\032\010\042\016\054\045\060" +
    "\001\002\000\006\011\uff87\012\uff87\001\002\000\006\015" +
    "\uff81\024\uff81\001\002\000\024\004\035\005\040\006\037" +
    "\007\032\010\042\015\uff7f\016\054\024\uff7f\045\060\001" +
    "\002\000\006\015\077\024\072\001\002\000\006\011\uff85" +
    "\012\uff85\001\002\000\004\014\101\001\002\000\024\004" +
    "\035\005\040\006\037\007\032\010\042\015\uff7f\016\054" +
    "\024\uff7f\045\060\001\002\000\006\015\103\024\072\001" +
    "\002\000\006\011\uff86\012\uff86\001\002\000\024\004\035" +
    "\005\040\006\037\007\032\010\042\015\uff7f\016\054\024" +
    "\uff7f\045\060\001\002\000\006\015\106\024\072\001\002" +
    "\000\006\011\uff84\012\uff84\001\002\000\036\004\uff88\005" +
    "\uff88\006\uff88\007\uff88\010\uff88\013\uff88\016\uff88\034\uff88" +
    "\036\uff88\045\uff88\052\uff88\053\uff88\054\uff88\057\uff88\001" +
    "\002\000\036\004\uff89\005\uff89\006\uff89\007\uff89\010\uff89" +
    "\013\uff89\016\uff89\034\uff89\036\uff89\045\uff89\052\uff89\053" +
    "\uff89\054\uff89\057\uff89\001\002\000\110\004\035\005\040" +
    "\006\037\007\032\010\042\012\111\013\126\014\132\016" +
    "\152\022\167\023\155\033\153\043\157\051\144\055\172" +
    "\061\122\063\123\064\171\065\143\066\145\071\130\072" +
    "\141\073\114\074\112\077\137\100\162\102\163\105\127" +
    "\114\134\120\116\122\176\123\125\124\146\125\174\126" +
    "\165\001\002\000\004\011\u014f\001\002\000\054\011\u014e" +
    "\017\uffa8\025\uffa8\026\uffa8\027\uffa8\030\uffa8\031\uffa8\032" +
    "\uffa8\050\uffa8\075\uffa8\077\uffa8\100\uffa8\101\uffa8\103\uffa8" +
    "\104\uffa8\113\uffa8\114\uffa8\115\uffa8\116\uffa8\117\uffa8\121" +
    "\uffa8\001\002\000\004\011\u014d\001\002\000\004\016\u010e" +
    "\001\002\000\004\014\u014a\001\002\000\110\004\035\005" +
    "\040\006\037\007\032\010\042\012\111\013\u0149\014\132" +
    "\016\152\022\167\023\155\033\153\043\157\051\144\055" +
    "\172\061\122\063\123\064\171\065\143\066\145\071\130" +
    "\072\141\073\114\074\112\077\137\100\162\102\163\105" +
    "\127\114\134\120\116\122\176\123\125\124\146\125\174" +
    "\126\165\001\002\000\066\011\uff94\013\uff94\015\uff94\017" +
    "\uff94\020\uff94\024\uff94\025\uff94\026\uff94\027\uff94\030\uff94" +
    "\031\uff94\032\uff94\050\uff94\075\uff94\076\uff94\077\uff94\100" +
    "\uff94\101\uff94\103\uff94\104\uff94\113\uff94\114\uff94\115\uff94" +
    "\116\uff94\117\uff94\121\uff94\001\002\000\114\004\uffea\005" +
    "\uffea\006\uffea\007\uffea\010\uffea\012\uffea\013\uffea\014\uffea" +
    "\016\uffea\022\uffea\023\uffea\033\uffea\037\uffea\042\uffea\043" +
    "\uffea\051\uffea\055\uffea\061\uffea\063\uffea\064\uffea\065\uffea" +
    "\066\uffea\071\uffea\072\uffea\073\uffea\074\uffea\077\uffea\100" +
    "\uffea\102\uffea\105\uffea\114\uffea\120\uffea\122\uffea\123\uffea" +
    "\124\uffea\125\uffea\126\uffea\001\002\000\004\014\u0137\001" +
    "\002\000\004\014\u0134\001\002\000\114\004\uffec\005\uffec" +
    "\006\uffec\007\uffec\010\uffec\012\uffec\013\uffec\014\uffec\016" +
    "\uffec\022\uffec\023\uffec\033\uffec\037\uffec\042\uffec\043\uffec" +
    "\051\uffec\055\uffec\061\uffec\063\uffec\064\uffec\065\uffec\066" +
    "\uffec\071\uffec\072\uffec\073\uffec\074\uffec\077\uffec\100\uffec" +
    "\102\uffec\105\uffec\114\uffec\120\uffec\122\uffec\123\uffec\124" +
    "\uffec\125\uffec\126\uffec\001\002\000\066\011\uff9a\013\uff9a" +
    "\015\uff9a\017\uff9a\020\uff9a\024\uff9a\025\uff9a\026\uff9a\027" +
    "\uff9a\030\uff9a\031\uff9a\032\uff9a\050\uff9a\075\uff9a\076\uff9a" +
    "\077\uff9a\100\uff9a\101\uff9a\103\uff9a\104\uff9a\113\uff9a\114" +
    "\uff9a\115\uff9a\116\uff9a\117\uff9a\121\uff9a\001\002\000\134" +
    "\004\ufff6\005\ufff6\006\ufff6\007\ufff6\010\ufff6\012\ufff6\013" +
    "\ufff6\014\ufff6\016\ufff6\022\ufff6\023\ufff6\033\ufff6\034\ufff6" +
    "\036\ufff6\037\ufff6\042\ufff6\043\ufff6\045\ufff6\051\ufff6\052" +
    "\ufff6\053\ufff6\054\ufff6\055\ufff6\057\ufff6\061\ufff6\063\ufff6" +
    "\064\ufff6\065\ufff6\066\ufff6\071\ufff6\072\ufff6\073\ufff6\074" +
    "\ufff6\077\ufff6\100\ufff6\102\ufff6\105\ufff6\107\ufff6\114\ufff6" +
    "\120\ufff6\122\ufff6\123\ufff6\124\ufff6\125\ufff6\126\ufff6\001" +
    "\002\000\004\014\u012c\001\002\000\004\014\u0128\001\002" +
    "\000\114\004\uffe9\005\uffe9\006\uffe9\007\uffe9\010\uffe9\012" +
    "\uffe9\013\uffe9\014\uffe9\016\uffe9\022\uffe9\023\uffe9\033\uffe9" +
    "\037\uffe9\042\uffe9\043\uffe9\051\uffe9\055\uffe9\061\uffe9\063" +
    "\uffe9\064\uffe9\065\uffe9\066\uffe9\071\uffe9\072\uffe9\073\uffe9" +
    "\074\uffe9\077\uffe9\100\uffe9\102\uffe9\105\uffe9\114\uffe9\120" +
    "\uffe9\122\uffe9\123\uffe9\124\uffe9\125\uffe9\126\uffe9\001\002" +
    "\000\056\004\035\005\040\006\037\007\032\010\042\014" +
    "\132\016\u0122\033\153\051\144\063\123\064\171\065\143" +
    "\066\145\077\137\100\162\102\163\114\134\122\176\123" +
    "\125\124\146\125\174\126\165\001\002\000\052\017\215" +
    "\025\236\026\226\027\240\030\221\031\214\032\223\050" +
    "\233\075\225\077\217\100\230\101\222\103\237\104\216" +
    "\113\235\114\220\115\227\116\224\117\231\121\234\001" +
    "\002\000\044\014\132\016\204\033\153\051\144\063\123" +
    "\064\171\065\143\066\145\077\137\100\162\102\163\114" +
    "\134\122\176\123\125\124\146\125\174\126\165\001\002" +
    "\000\114\004\uffe3\005\uffe3\006\uffe3\007\uffe3\010\uffe3\012" +
    "\uffe3\013\uffe3\014\uffe3\016\uffe3\022\uffe3\023\uffe3\033\uffe3" +
    "\037\uffe3\042\uffe3\043\uffe3\051\uffe3\055\uffe3\061\uffe3\063" +
    "\uffe3\064\uffe3\065\uffe3\066\uffe3\071\uffe3\072\uffe3\073\uffe3" +
    "\074\uffe3\077\uffe3\100\uffe3\102\uffe3\105\uffe3\114\uffe3\120" +
    "\uffe3\122\uffe3\123\uffe3\124\uffe3\125\uffe3\126\uffe3\001\002" +
    "\000\114\004\uffef\005\uffef\006\uffef\007\uffef\010\uffef\012" +
    "\uffef\013\uffef\014\uffef\016\uffef\022\uffef\023\uffef\033\uffef" +
    "\037\uffef\042\uffef\043\uffef\051\uffef\055\uffef\061\uffef\063" +
    "\uffef\064\uffef\065\uffef\066\uffef\071\uffef\072\uffef\073\uffef" +
    "\074\uffef\077\uffef\100\uffef\102\uffef\105\uffef\114\uffef\120" +
    "\uffef\122\uffef\123\uffef\124\uffef\125\uffef\126\uffef\001\002" +
    "\000\044\014\132\016\204\033\153\051\144\063\123\064" +
    "\171\065\143\066\145\077\137\100\162\102\163\114\134" +
    "\122\176\123\125\124\146\125\174\126\165\001\002\000" +
    "\004\011\u011d\001\002\000\004\014\362\001\002\000\054" +
    "\011\361\017\uffa5\025\uffa5\026\uffa5\027\uffa5\030\uffa5\031" +
    "\uffa5\032\uffa5\050\uffa5\075\uffa5\077\uffa5\100\uffa5\101\uffa5" +
    "\103\uffa5\104\uffa5\113\uffa5\114\uffa5\115\uffa5\116\uffa5\117" +
    "\uffa5\121\uffa5\001\002\000\004\014\356\001\002\000\016" +
    "\004\035\005\040\006\037\007\032\010\042\016\353\001" +
    "\002\000\004\014\347\001\002\000\066\011\uff9e\013\uff9e" +
    "\015\uff9e\017\uff9e\020\uff9e\024\uff9e\025\uff9e\026\uff9e\027" +
    "\uff9e\030\uff9e\031\uff9e\032\uff9e\050\uff9e\075\uff9e\076\uff9e" +
    "\077\uff9e\100\uff9e\101\uff9e\103\uff9e\104\uff9e\113\uff9e\114" +
    "\uff9e\115\uff9e\116\uff9e\117\uff9e\121\uff9e\001\002\000\114" +
    "\004\uffeb\005\uffeb\006\uffeb\007\uffeb\010\uffeb\012\uffeb\013" +
    "\uffeb\014\uffeb\016\uffeb\022\uffeb\023\uffeb\033\uffeb\037\uffeb" +
    "\042\uffeb\043\uffeb\051\uffeb\055\uffeb\061\uffeb\063\uffeb\064" +
    "\uffeb\065\uffeb\066\uffeb\071\uffeb\072\uffeb\073\uffeb\074\uffeb" +
    "\077\uffeb\100\uffeb\102\uffeb\105\uffeb\114\uffeb\120\uffeb\122" +
    "\uffeb\123\uffeb\124\uffeb\125\uffeb\126\uffeb\001\002\000\114" +
    "\004\uffe4\005\uffe4\006\uffe4\007\uffe4\010\uffe4\012\uffe4\013" +
    "\uffe4\014\uffe4\016\uffe4\022\uffe4\023\uffe4\033\uffe4\037\uffe4" +
    "\042\uffe4\043\uffe4\051\uffe4\055\uffe4\061\uffe4\063\uffe4\064" +
    "\uffe4\065\uffe4\066\uffe4\071\uffe4\072\uffe4\073\uffe4\074\uffe4" +
    "\077\uffe4\100\uffe4\102\uffe4\105\uffe4\114\uffe4\120\uffe4\122" +
    "\uffe4\123\uffe4\124\uffe4\125\uffe4\126\uffe4\001\002\000\004" +
    "\011\346\001\002\000\060\014\206\016\uffbc\017\215\021" +
    "\341\025\uff99\026\uff99\027\uff99\030\uff99\031\uff99\032\uff99" +
    "\050\uff99\075\uff99\077\uff99\100\uff99\101\uff99\103\uff99\104" +
    "\uff99\113\uff99\114\uff99\115\uff99\116\uff99\117\uff99\121\uff99" +
    "\001\002\000\004\014\334\001\002\000\114\004\uffe5\005" +
    "\uffe5\006\uffe5\007\uffe5\010\uffe5\012\uffe5\013\uffe5\014\uffe5" +
    "\016\uffe5\022\uffe5\023\uffe5\033\uffe5\037\uffe5\042\uffe5\043" +
    "\uffe5\051\uffe5\055\uffe5\061\uffe5\063\uffe5\064\uffe5\065\uffe5" +
    "\066\uffe5\071\uffe5\072\uffe5\073\uffe5\074\uffe5\077\uffe5\100" +
    "\uffe5\102\uffe5\105\uffe5\114\uffe5\120\uffe5\122\uffe5\123\uffe5" +
    "\124\uffe5\125\uffe5\126\uffe5\001\002\000\004\014\330\001" +
    "\002\000\114\004\uffed\005\uffed\006\uffed\007\uffed\010\uffed" +
    "\012\uffed\013\uffed\014\uffed\016\uffed\022\uffed\023\uffed\033" +
    "\uffed\037\uffed\042\uffed\043\uffed\051\uffed\055\uffed\061\uffed" +
    "\063\uffed\064\uffed\065\uffed\066\uffed\071\uffed\072\uffed\073" +
    "\uffed\074\uffed\077\uffed\100\uffed\102\uffed\105\uffed\114\uffed" +
    "\120\uffed\122\uffed\123\uffed\124\uffed\125\uffed\126\uffed\001" +
    "\002\000\004\012\111\001\002\000\004\011\321\001\002" +
    "\000\114\004\uffee\005\uffee\006\uffee\007\uffee\010\uffee\012" +
    "\uffee\013\uffee\014\uffee\016\uffee\022\uffee\023\uffee\033\uffee" +
    "\037\uffee\042\uffee\043\uffee\051\uffee\055\uffee\061\uffee\063" +
    "\uffee\064\uffee\065\uffee\066\uffee\071\uffee\072\uffee\073\uffee" +
    "\074\uffee\077\uffee\100\uffee\102\uffee\105\uffee\114\uffee\120" +
    "\uffee\122\uffee\123\uffee\124\uffee\125\uffee\126\uffee\001\002" +
    "\000\044\014\132\016\204\033\153\051\144\063\123\064" +
    "\171\065\143\066\145\077\137\100\162\102\163\114\134" +
    "\122\176\123\125\124\146\125\174\126\165\001\002\000" +
    "\044\014\132\016\204\033\153\051\144\063\123\064\171" +
    "\065\143\066\145\077\137\100\162\102\163\114\134\122" +
    "\176\123\125\124\146\125\174\126\165\001\002\000\114" +
    "\004\ufff1\005\ufff1\006\ufff1\007\ufff1\010\ufff1\012\ufff1\013" +
    "\ufff1\014\ufff1\016\ufff1\022\ufff1\023\ufff1\033\ufff1\037\ufff1" +
    "\042\ufff1\043\ufff1\051\ufff1\055\ufff1\061\ufff1\063\ufff1\064" +
    "\ufff1\065\ufff1\066\ufff1\071\ufff1\072\ufff1\073\ufff1\074\ufff1" +
    "\077\ufff1\100\ufff1\102\ufff1\105\ufff1\114\ufff1\120\ufff1\122" +
    "\ufff1\123\ufff1\124\ufff1\125\ufff1\126\ufff1\001\002\000\066" +
    "\011\uff9c\013\uff9c\015\uff9c\017\uff9c\020\uff9c\024\uff9c\025" +
    "\uff9c\026\uff9c\027\uff9c\030\uff9c\031\uff9c\032\uff9c\050\uff9c" +
    "\075\uff9c\076\uff9c\077\uff9c\100\uff9c\101\uff9c\103\uff9c\104" +
    "\uff9c\113\uff9c\114\uff9c\115\uff9c\116\uff9c\117\uff9c\121\uff9c" +
    "\001\002\000\054\011\316\017\uff93\025\uff93\026\uff93\027" +
    "\uff93\030\uff93\031\uff93\032\uff93\050\uff93\075\uff93\077\uff93" +
    "\100\uff93\101\uff93\103\uff93\104\uff93\113\uff93\114\uff93\115" +
    "\uff93\116\uff93\117\uff93\121\uff93\001\002\000\004\014\312" +
    "\001\002\000\066\011\uffaa\013\uffaa\015\uffaa\017\uffaa\020" +
    "\uffaa\024\uffaa\025\uffaa\026\uffaa\027\uffaa\030\uffaa\031\uffaa" +
    "\032\uffaa\050\uffaa\075\uffaa\076\uffaa\077\uffaa\100\uffaa\101" +
    "\uffaa\103\uffaa\104\uffaa\113\uffaa\114\uffaa\115\uffaa\116\uffaa" +
    "\117\uffaa\121\uffaa\001\002\000\004\014\307\001\002\000" +
    "\046\014\132\016\204\033\153\035\203\051\144\063\123" +
    "\064\171\065\143\066\145\077\137\100\162\102\163\114" +
    "\134\122\176\123\125\124\146\125\174\126\165\001\002" +
    "\000\114\004\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4\012" +
    "\ufff4\013\ufff4\014\ufff4\016\ufff4\022\ufff4\023\ufff4\033\ufff4" +
    "\037\ufff4\042\ufff4\043\ufff4\051\ufff4\055\ufff4\061\ufff4\063" +
    "\ufff4\064\ufff4\065\ufff4\066\ufff4\071\ufff4\072\ufff4\073\ufff4" +
    "\074\ufff4\077\ufff4\100\ufff4\102\ufff4\105\ufff4\114\ufff4\120" +
    "\ufff4\122\ufff4\123\ufff4\124\ufff4\125\ufff4\126\ufff4\001\002" +
    "\000\066\011\uff9d\013\uff9d\015\uff9d\017\uff9d\020\uff9d\024" +
    "\uff9d\025\uff9d\026\uff9d\027\uff9d\030\uff9d\031\uff9d\032\uff9d" +
    "\050\uff9d\075\uff9d\076\uff9d\077\uff9d\100\uff9d\101\uff9d\103" +
    "\uff9d\104\uff9d\113\uff9d\114\uff9d\115\uff9d\116\uff9d\117\uff9d" +
    "\121\uff9d\001\002\000\114\004\ufff0\005\ufff0\006\ufff0\007" +
    "\ufff0\010\ufff0\012\ufff0\013\ufff0\014\ufff0\016\ufff0\022\ufff0" +
    "\023\ufff0\033\ufff0\037\ufff0\042\ufff0\043\ufff0\051\ufff0\055" +
    "\ufff0\061\ufff0\063\ufff0\064\ufff0\065\ufff0\066\ufff0\071\ufff0" +
    "\072\ufff0\073\ufff0\074\ufff0\077\ufff0\100\ufff0\102\ufff0\105" +
    "\ufff0\114\ufff0\120\ufff0\122\ufff0\123\ufff0\124\ufff0\125\ufff0" +
    "\126\ufff0\001\002\000\066\011\uff9b\013\uff9b\015\uff9b\017" +
    "\uff9b\020\uff9b\024\uff9b\025\uff9b\026\uff9b\027\uff9b\030\uff9b" +
    "\031\uff9b\032\uff9b\050\uff9b\075\uff9b\076\uff9b\077\uff9b\100" +
    "\uff9b\101\uff9b\103\uff9b\104\uff9b\113\uff9b\114\uff9b\115\uff9b" +
    "\116\uff9b\117\uff9b\121\uff9b\001\002\000\066\011\uff93\013" +
    "\uff93\015\uff93\017\uff93\020\uff93\024\uff93\025\uff93\026\uff93" +
    "\027\uff93\030\uff93\031\uff93\032\uff93\050\uff93\075\uff93\076" +
    "\uff93\077\uff93\100\uff93\101\uff93\103\uff93\104\uff93\113\uff93" +
    "\114\uff93\115\uff93\116\uff93\117\uff93\121\uff93\001\002\000" +
    "\004\011\306\001\002\000\054\011\uff8b\017\215\025\236" +
    "\026\226\027\240\030\221\031\214\032\223\050\233\075" +
    "\225\077\217\100\230\101\222\103\237\104\216\113\235" +
    "\114\220\115\227\116\224\117\231\121\234\001\002\000" +
    "\066\011\uffa8\013\uffa8\015\uffa8\017\uffa8\020\uffa8\024\uffa8" +
    "\025\uffa8\026\uffa8\027\uffa8\030\uffa8\031\uffa8\032\uffa8\050" +
    "\uffa8\075\uffa8\076\uffa8\077\uffa8\100\uffa8\101\uffa8\103\uffa8" +
    "\104\uffa8\113\uffa8\114\uffa8\115\uffa8\116\uffa8\117\uffa8\121" +
    "\uffa8\001\002\000\004\011\uff8a\001\002\000\070\011\uff99" +
    "\013\uff99\014\206\015\uff99\017\uff99\020\uff99\024\uff99\025" +
    "\uff99\026\uff99\027\uff99\030\uff99\031\uff99\032\uff99\050\uff99" +
    "\075\uff99\076\uff99\077\uff99\100\uff99\101\uff99\103\uff99\104" +
    "\uff99\113\uff99\114\uff99\115\uff99\116\uff99\117\uff99\121\uff99" +
    "\001\002\000\066\011\uffa5\013\uffa5\015\uffa5\017\uffa5\020" +
    "\uffa5\024\uffa5\025\uffa5\026\uffa5\027\uffa5\030\uffa5\031\uffa5" +
    "\032\uffa5\050\uffa5\075\uffa5\076\uffa5\077\uffa5\100\uffa5\101" +
    "\uffa5\103\uffa5\104\uffa5\113\uffa5\114\uffa5\115\uffa5\116\uffa5" +
    "\117\uffa5\121\uffa5\001\002\000\046\014\132\015\uff8e\016" +
    "\204\033\153\051\144\063\123\064\171\065\143\066\145" +
    "\077\137\100\162\102\163\114\134\122\176\123\125\124" +
    "\146\125\174\126\165\001\002\000\004\015\305\001\002" +
    "\000\056\015\uff8c\017\215\024\uff8c\025\236\026\226\027" +
    "\240\030\221\031\214\032\223\050\233\075\225\077\217" +
    "\100\230\101\222\103\237\104\216\113\235\114\220\115" +
    "\227\116\224\117\231\121\234\001\002\000\006\015\uff8f" +
    "\024\212\001\002\000\044\014\132\016\204\033\153\051" +
    "\144\063\123\064\171\065\143\066\145\077\137\100\162" +
    "\102\163\114\134\122\176\123\125\124\146\125\174\126" +
    "\165\001\002\000\056\015\uff8d\017\215\024\uff8d\025\236" +
    "\026\226\027\240\030\221\031\214\032\223\050\233\075" +
    "\225\077\217\100\230\101\222\103\237\104\216\113\235" +
    "\114\220\115\227\116\224\117\231\121\234\001\002\000" +
    "\044\014\132\016\204\033\153\051\144\063\123\064\171" +
    "\065\143\066\145\077\137\100\162\102\163\114\134\122" +
    "\176\123\125\124\146\125\174\126\165\001\002\000\044" +
    "\014\132\016\204\033\153\051\144\063\123\064\171\065" +
    "\143\066\145\077\137\100\162\102\163\114\134\122\176" +
    "\123\125\124\146\125\174\126\165\001\002\000\044\014" +
    "\132\016\204\033\153\051\144\063\123\064\171\065\143" +
    "\066\145\077\137\100\162\102\163\114\134\122\176\123" +
    "\125\124\146\125\174\126\165\001\002\000\066\011\uff65" +
    "\013\uff65\015\uff65\017\uff65\020\uff65\024\uff65\025\uff65\026" +
    "\uff65\027\uff65\030\uff65\031\uff65\032\uff65\050\uff65\075\uff65" +
    "\076\uff65\077\uff65\100\uff65\101\uff65\103\uff65\104\uff65\113" +
    "\uff65\114\uff65\115\uff65\116\uff65\117\uff65\121\uff65\001\002" +
    "\000\044\014\132\016\204\033\153\051\144\063\123\064" +
    "\171\065\143\066\145\077\137\100\162\102\163\114\134" +
    "\122\176\123\125\124\146\125\174\126\165\001\002\000" +
    "\044\014\132\016\204\033\153\051\144\063\123\064\171" +
    "\065\143\066\145\077\137\100\162\102\163\114\134\122" +
    "\176\123\125\124\146\125\174\126\165\001\002\000\012" +
    "\016\265\110\264\111\262\112\263\001\002\000\044\014" +
    "\132\016\204\033\153\051\144\063\123\064\171\065\143" +
    "\066\145\077\137\100\162\102\163\114\134\122\176\123" +
    "\125\124\146\125\174\126\165\001\002\000\044\014\132" +
    "\016\204\033\153\051\144\063\123\064\171\065\143\066" +
    "\145\077\137\100\162\102\163\114\134\122\176\123\125" +
    "\124\146\125\174\126\165\001\002\000\044\014\132\016" +
    "\204\033\153\051\144\063\123\064\171\065\143\066\145" +
    "\077\137\100\162\102\163\114\134\122\176\123\125\124" +
    "\146\125\174\126\165\001\002\000\044\014\132\016\204" +
    "\033\153\051\144\063\123\064\171\065\143\066\145\077" +
    "\137\100\162\102\163\114\134\122\176\123\125\124\146" +
    "\125\174\126\165\001\002\000\044\014\132\016\204\033" +
    "\153\051\144\063\123\064\171\065\143\066\145\077\137" +
    "\100\162\102\163\114\134\122\176\123\125\124\146\125" +
    "\174\126\165\001\002\000\066\011\uff63\013\uff63\015\uff63" +
    "\017\uff63\020\uff63\024\uff63\025\uff63\026\uff63\027\uff63\030" +
    "\uff63\031\uff63\032\uff63\050\uff63\075\uff63\076\uff63\077\uff63" +
    "\100\uff63\101\uff63\103\uff63\104\uff63\113\uff63\114\uff63\115" +
    "\uff63\116\uff63\117\uff63\121\uff63\001\002\000\044\014\132" +
    "\016\204\033\153\051\144\063\123\064\171\065\143\066" +
    "\145\077\137\100\162\102\163\114\134\122\176\123\125" +
    "\124\146\125\174\126\165\001\002\000\066\011\uff95\013" +
    "\uff95\015\uff95\017\247\020\uff95\024\uff95\025\uff95\026\uff95" +
    "\027\uff95\030\uff95\031\uff95\032\uff95\050\uff95\075\uff95\076" +
    "\uff95\077\uff95\100\uff95\101\uff95\103\uff95\104\uff95\113\uff95" +
    "\114\uff95\115\uff95\116\uff95\117\uff95\121\uff95\001\002\000" +
    "\004\016\246\001\002\000\044\014\132\016\204\033\153" +
    "\051\144\063\123\064\171\065\143\066\145\077\137\100" +
    "\162\102\163\114\134\122\176\123\125\124\146\125\174" +
    "\126\165\001\002\000\044\014\132\016\204\033\153\051" +
    "\144\063\123\064\171\065\143\066\145\077\137\100\162" +
    "\102\163\114\134\122\176\123\125\124\146\125\174\126" +
    "\165\001\002\000\044\014\132\016\204\033\153\051\144" +
    "\063\123\064\171\065\143\066\145\077\137\100\162\102" +
    "\163\114\134\122\176\123\125\124\146\125\174\126\165" +
    "\001\002\000\044\014\132\016\204\033\153\051\144\063" +
    "\123\064\171\065\143\066\145\077\137\100\162\102\163" +
    "\114\134\122\176\123\125\124\146\125\174\126\165\001" +
    "\002\000\044\014\132\016\204\033\153\051\144\063\123" +
    "\064\171\065\143\066\145\077\137\100\162\102\163\114" +
    "\134\122\176\123\125\124\146\125\174\126\165\001\002" +
    "\000\066\011\uffb4\013\uffb4\015\uffb4\017\215\020\uffb4\024" +
    "\uffb4\025\uffb4\026\uffb4\027\uffb4\030\uffb4\031\uffb4\032\uffb4" +
    "\050\uffb4\075\uffb4\076\uffb4\077\217\100\230\101\222\103" +
    "\uffb4\104\uffb4\113\235\114\220\115\227\116\224\117\uffb4" +
    "\121\234\001\002\000\066\011\uffb9\013\uffb9\015\uffb9\017" +
    "\215\020\uffb9\024\uffb9\025\236\026\226\027\240\030\221" +
    "\031\214\032\223\050\233\075\uffb9\076\uffb9\077\217\100" +
    "\230\101\222\103\uffb9\104\uffb9\113\235\114\220\115\227" +
    "\116\224\117\231\121\234\001\002\000\066\011\uffb6\013" +
    "\uffb6\015\uffb6\017\215\020\uffb6\024\uffb6\025\uffb6\026\uffb6" +
    "\027\240\030\221\031\214\032\223\050\233\075\uffb6\076" +
    "\uffb6\077\217\100\230\101\222\103\uffb6\104\uffb6\113\235" +
    "\114\220\115\227\116\224\117\uffb6\121\234\001\002\000" +
    "\066\011\uffb0\013\uffb0\015\uffb0\017\215\020\uffb0\024\uffb0" +
    "\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0\050" +
    "\uffb0\075\uffb0\076\uffb0\077\217\100\230\101\222\103\uffb0" +
    "\104\uffb0\113\uffb0\114\uffb0\115\227\116\224\117\uffb0\121" +
    "\234\001\002\000\066\011\uffab\013\uffab\015\uffab\017\215" +
    "\020\uffab\024\uffab\025\uffab\026\uffab\027\uffab\030\uffab\031" +
    "\uffab\032\uffab\050\uffab\075\uffab\076\uffab\077\217\100\230" +
    "\101\222\103\uffab\104\uffab\113\uffab\114\uffab\115\uffab\116" +
    "\uffab\117\uffab\121\uffab\001\002\000\066\011\uffa6\013\uffa6" +
    "\015\uffa6\017\uffa6\020\uffa6\024\uffa6\025\uffa6\026\uffa6\027" +
    "\uffa6\030\uffa6\031\uffa6\032\uffa6\050\uffa6\075\uffa6\076\uffa6" +
    "\077\uffa6\100\uffa6\101\uffa6\103\uffa6\104\uffa6\113\uffa6\114" +
    "\uffa6\115\uffa6\116\uffa6\117\uffa6\121\uffa6\001\002\000\044" +
    "\014\132\016\204\033\153\051\144\063\123\064\171\065" +
    "\143\066\145\077\137\100\162\102\163\114\134\122\176" +
    "\123\125\124\146\125\174\126\165\001\002\000\054\017" +
    "\215\020\251\025\236\026\226\027\240\030\221\031\214" +
    "\032\223\050\233\075\225\077\217\100\230\101\222\103" +
    "\237\104\216\113\235\114\220\115\227\116\224\117\231" +
    "\121\234\001\002\000\070\011\uff6c\013\uff6c\015\uff6c\017" +
    "\uff6c\020\uff6c\021\uff6c\024\uff6c\025\uff6c\026\uff6c\027\uff6c" +
    "\030\uff6c\031\uff6c\032\uff6c\050\uff6c\075\uff6c\076\uff6c\077" +
    "\uff6c\100\uff6c\101\uff6c\103\uff6c\104\uff6c\113\uff6c\114\uff6c" +
    "\115\uff6c\116\uff6c\117\uff6c\121\uff6c\001\002\000\066\011" +
    "\uffae\013\uffae\015\uffae\017\215\020\uffae\024\uffae\025\236" +
    "\026\226\027\240\030\221\031\214\032\223\050\233\075" +
    "\uffae\076\uffae\077\217\100\230\101\222\103\uffae\104\uffae" +
    "\113\235\114\220\115\227\116\224\117\uffae\121\234\001" +
    "\002\000\066\011\uffad\013\uffad\015\uffad\017\215\020\uffad" +
    "\024\uffad\025\uffad\026\uffad\027\uffad\030\uffad\031\uffad\032" +
    "\uffad\050\uffad\075\uffad\076\uffad\077\217\100\230\101\222" +
    "\103\uffad\104\uffad\113\uffad\114\uffad\115\uffad\116\uffad\117" +
    "\uffad\121\uffad\001\002\000\066\011\uffb5\013\uffb5\015\uffb5" +
    "\017\215\020\uffb5\024\uffb5\025\uffb5\026\uffb5\027\240\030" +
    "\221\031\214\032\223\050\233\075\uffb5\076\uffb5\077\217" +
    "\100\230\101\222\103\uffb5\104\uffb5\113\235\114\220\115" +
    "\227\116\224\117\uffb5\121\234\001\002\000\054\017\215" +
    "\025\236\026\226\027\240\030\221\031\214\032\223\050" +
    "\233\075\225\076\256\077\217\100\230\101\222\103\237" +
    "\104\216\113\235\114\220\115\227\116\224\117\231\121" +
    "\234\001\002\000\044\014\132\016\204\033\153\051\144" +
    "\063\123\064\171\065\143\066\145\077\137\100\162\102" +
    "\163\114\134\122\176\123\125\124\146\125\174\126\165" +
    "\001\002\000\066\011\uff61\013\uff61\015\uff61\017\215\020" +
    "\uff61\024\uff61\025\236\026\226\027\240\030\221\031\214" +
    "\032\223\050\233\075\225\076\uff61\077\217\100\230\101" +
    "\222\103\237\104\216\113\235\114\220\115\227\116\224" +
    "\117\231\121\234\001\002\000\066\011\uffac\013\uffac\015" +
    "\uffac\017\215\020\uffac\024\uffac\025\uffac\026\uffac\027\uffac" +
    "\030\uffac\031\uffac\032\uffac\050\uffac\075\uffac\076\uffac\077" +
    "\217\100\230\101\222\103\uffac\104\uffac\113\uffac\114\uffac" +
    "\115\uffac\116\uffac\117\uffac\121\uffac\001\002\000\066\011" +
    "\uffb3\013\uffb3\015\uffb3\017\215\020\uffb3\024\uffb3\025\uffb3" +
    "\026\uffb3\027\uffb3\030\uffb3\031\uffb3\032\uffb3\050\uffb3\075" +
    "\uffb3\076\uffb3\077\217\100\230\101\222\103\uffb3\104\uffb3" +
    "\113\235\114\220\115\227\116\224\117\uffb3\121\234\001" +
    "\002\000\004\014\275\001\002\000\004\014\273\001\002" +
    "\000\004\014\271\001\002\000\070\011\uffa2\013\uffa2\014" +
    "\266\015\uffa2\017\uffa2\020\uffa2\024\uffa2\025\uffa2\026\uffa2" +
    "\027\uffa2\030\uffa2\031\uffa2\032\uffa2\050\uffa2\075\uffa2\076" +
    "\uffa2\077\uffa2\100\uffa2\101\uffa2\103\uffa2\104\uffa2\113\uffa2" +
    "\114\uffa2\115\uffa2\116\uffa2\117\uffa2\121\uffa2\001\002\000" +
    "\046\014\132\015\uff8e\016\204\033\153\051\144\063\123" +
    "\064\171\065\143\066\145\077\137\100\162\102\163\114" +
    "\134\122\176\123\125\124\146\125\174\126\165\001\002" +
    "\000\004\015\270\001\002\000\066\011\uff92\013\uff92\015" +
    "\uff92\017\uff92\020\uff92\024\uff92\025\uff92\026\uff92\027\uff92" +
    "\030\uff92\031\uff92\032\uff92\050\uff92\075\uff92\076\uff92\077" +
    "\uff92\100\uff92\101\uff92\103\uff92\104\uff92\113\uff92\114\uff92" +
    "\115\uff92\116\uff92\117\uff92\121\uff92\001\002\000\004\015" +
    "\272\001\002\000\066\011\uffa4\013\uffa4\015\uffa4\017\uffa4" +
    "\020\uffa4\024\uffa4\025\uffa4\026\uffa4\027\uffa4\030\uffa4\031" +
    "\uffa4\032\uffa4\050\uffa4\075\uffa4\076\uffa4\077\uffa4\100\uffa4" +
    "\101\uffa4\103\uffa4\104\uffa4\113\uffa4\114\uffa4\115\uffa4\116" +
    "\uffa4\117\uffa4\121\uffa4\001\002\000\004\015\274\001\002" +
    "\000\066\011\uffa1\013\uffa1\015\uffa1\017\uffa1\020\uffa1\024" +
    "\uffa1\025\uffa1\026\uffa1\027\uffa1\030\uffa1\031\uffa1\032\uffa1" +
    "\050\uffa1\075\uffa1\076\uffa1\077\uffa1\100\uffa1\101\uffa1\103" +
    "\uffa1\104\uffa1\113\uffa1\114\uffa1\115\uffa1\116\uffa1\117\uffa1" +
    "\121\uffa1\001\002\000\004\015\276\001\002\000\066\011" +
    "\uffa3\013\uffa3\015\uffa3\017\uffa3\020\uffa3\024\uffa3\025\uffa3" +
    "\026\uffa3\027\uffa3\030\uffa3\031\uffa3\032\uffa3\050\uffa3\075" +
    "\uffa3\076\uffa3\077\uffa3\100\uffa3\101\uffa3\103\uffa3\104\uffa3" +
    "\113\uffa3\114\uffa3\115\uffa3\116\uffa3\117\uffa3\121\uffa3\001" +
    "\002\000\066\011\uffb2\013\uffb2\015\uffb2\017\215\020\uffb2" +
    "\024\uffb2\025\uffb2\026\uffb2\027\uffb2\030\uffb2\031\uffb2\032" +
    "\uffb2\050\uffb2\075\uffb2\076\uffb2\077\217\100\230\101\222" +
    "\103\uffb2\104\uffb2\113\235\114\220\115\227\116\224\117" +
    "\uffb2\121\234\001\002\000\066\011\uffaf\013\uffaf\015\uffaf" +
    "\017\215\020\uffaf\024\uffaf\025\uffaf\026\uffaf\027\uffaf\030" +
    "\uffaf\031\uffaf\032\uffaf\050\uffaf\075\uffaf\076\uffaf\077\217" +
    "\100\230\101\222\103\uffaf\104\uffaf\113\uffaf\114\uffaf\115" +
    "\227\116\224\117\uffaf\121\234\001\002\000\066\011\uffb8" +
    "\013\uffb8\015\uffb8\017\215\020\uffb8\024\uffb8\025\236\026" +
    "\226\027\240\030\221\031\214\032\223\050\233\075\uffb8" +
    "\076\uffb8\077\217\100\230\101\222\103\237\104\uffb8\113" +
    "\235\114\220\115\227\116\224\117\231\121\234\001\002" +
    "\000\054\017\215\020\303\025\236\026\226\027\240\030" +
    "\221\031\214\032\223\050\233\075\225\077\217\100\230" +
    "\101\222\103\237\104\216\113\235\114\220\115\227\116" +
    "\224\117\231\121\234\001\002\000\070\011\uff6b\013\uff6b" +
    "\015\uff6b\017\uff6b\020\uff6b\021\uff6b\024\uff6b\025\uff6b\026" +
    "\uff6b\027\uff6b\030\uff6b\031\uff6b\032\uff6b\050\uff6b\075\uff6b" +
    "\076\uff6b\077\uff6b\100\uff6b\101\uff6b\103\uff6b\104\uff6b\113" +
    "\uff6b\114\uff6b\115\uff6b\116\uff6b\117\uff6b\121\uff6b\001\002" +
    "\000\066\011\uffb1\013\uffb1\015\uffb1\017\215\020\uffb1\024" +
    "\uffb1\025\uffb1\026\uffb1\027\uffb1\030\uffb1\031\uffb1\032\uffb1" +
    "\050\uffb1\075\uffb1\076\uffb1\077\217\100\230\101\222\103" +
    "\uffb1\104\uffb1\113\235\114\220\115\227\116\224\117\uffb1" +
    "\121\234\001\002\000\066\011\uff91\013\uff91\015\uff91\017" +
    "\uff91\020\uff91\024\uff91\025\uff91\026\uff91\027\uff91\030\uff91" +
    "\031\uff91\032\uff91\050\uff91\075\uff91\076\uff91\077\uff91\100" +
    "\uff91\101\uff91\103\uff91\104\uff91\113\uff91\114\uff91\115\uff91" +
    "\116\uff91\117\uff91\121\uff91\001\002\000\114\004\uff90\005" +
    "\uff90\006\uff90\007\uff90\010\uff90\012\uff90\013\uff90\014\uff90" +
    "\016\uff90\022\uff90\023\uff90\033\uff90\037\uff90\042\uff90\043" +
    "\uff90\051\uff90\055\uff90\061\uff90\063\uff90\064\uff90\065\uff90" +
    "\066\uff90\071\uff90\072\uff90\073\uff90\074\uff90\077\uff90\100" +
    "\uff90\102\uff90\105\uff90\114\uff90\120\uff90\122\uff90\123\uff90" +
    "\124\uff90\125\uff90\126\uff90\001\002\000\044\014\132\016" +
    "\204\033\153\051\144\063\123\064\171\065\143\066\145" +
    "\077\137\100\162\102\163\114\134\122\176\123\125\124" +
    "\146\125\174\126\165\001\002\000\054\015\311\017\215" +
    "\025\236\026\226\027\240\030\221\031\214\032\223\050" +
    "\233\075\225\077\217\100\230\101\222\103\237\104\216" +
    "\113\235\114\220\115\227\116\224\117\231\121\234\001" +
    "\002\000\066\011\uffe0\013\uffe0\015\uffe0\017\uffe0\020\uffe0" +
    "\024\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0\032" +
    "\uffe0\050\uffe0\075\uffe0\076\uffe0\077\uffe0\100\uffe0\101\uffe0" +
    "\103\uffe0\104\uffe0\113\uffe0\114\uffe0\115\uffe0\116\uffe0\117" +
    "\uffe0\121\uffe0\001\002\000\044\014\132\016\204\033\153" +
    "\051\144\063\123\064\171\065\143\066\145\077\137\100" +
    "\162\102\163\114\134\122\176\123\125\124\146\125\174" +
    "\126\165\001\002\000\054\015\314\017\215\025\236\026" +
    "\226\027\240\030\221\031\214\032\223\050\233\075\225" +
    "\077\217\100\230\101\222\103\237\104\216\113\235\114" +
    "\220\115\227\116\224\117\231\121\234\001\002\000\004" +
    "\011\315\001\002\000\114\004\uffc8\005\uffc8\006\uffc8\007" +
    "\uffc8\010\uffc8\012\uffc8\013\uffc8\014\uffc8\016\uffc8\022\uffc8" +
    "\023\uffc8\033\uffc8\037\uffc8\042\uffc8\043\uffc8\051\uffc8\055" +
    "\uffc8\061\uffc8\063\uffc8\064\uffc8\065\uffc8\066\uffc8\071\uffc8" +
    "\072\uffc8\073\uffc8\074\uffc8\077\uffc8\100\uffc8\102\uffc8\105" +
    "\uffc8\114\uffc8\120\uffc8\122\uffc8\123\uffc8\124\uffc8\125\uffc8" +
    "\126\uffc8\001\002\000\114\004\uffe2\005\uffe2\006\uffe2\007" +
    "\uffe2\010\uffe2\012\uffe2\013\uffe2\014\uffe2\016\uffe2\022\uffe2" +
    "\023\uffe2\033\uffe2\037\uffe2\042\uffe2\043\uffe2\051\uffe2\055" +
    "\uffe2\061\uffe2\063\uffe2\064\uffe2\065\uffe2\066\uffe2\071\uffe2" +
    "\072\uffe2\073\uffe2\074\uffe2\077\uffe2\100\uffe2\102\uffe2\105" +
    "\uffe2\114\uffe2\120\uffe2\122\uffe2\123\uffe2\124\uffe2\125\uffe2" +
    "\126\uffe2\001\002\000\062\011\uffb7\013\uffb7\015\uffb7\017" +
    "\215\020\uffb7\024\uffb7\025\uffb7\026\uffb7\027\uffb7\030\uffb7" +
    "\031\uffb7\032\uffb7\050\uffb7\075\uffb7\076\uffb7\101\222\103" +
    "\uffb7\104\uffb7\113\uffb7\114\uffb7\115\uffb7\116\uffb7\117\uffb7" +
    "\121\uffb7\001\002\000\062\011\uff62\013\uff62\015\uff62\017" +
    "\215\020\uff62\024\uff62\025\uff62\026\uff62\027\uff62\030\uff62" +
    "\031\uff62\032\uff62\050\uff62\075\uff62\076\uff62\101\222\103" +
    "\uff62\104\uff62\113\uff62\114\uff62\115\uff62\116\uff62\117\uff62" +
    "\121\uff62\001\002\000\114\004\uffe6\005\uffe6\006\uffe6\007" +
    "\uffe6\010\uffe6\012\uffe6\013\uffe6\014\uffe6\016\uffe6\022\uffe6" +
    "\023\uffe6\033\uffe6\037\uffe6\042\uffe6\043\uffe6\051\uffe6\055" +
    "\uffe6\061\uffe6\063\uffe6\064\uffe6\065\uffe6\066\uffe6\071\uffe6" +
    "\072\uffe6\073\uffe6\074\uffe6\077\uffe6\100\uffe6\102\uffe6\105" +
    "\uffe6\114\uffe6\120\uffe6\122\uffe6\123\uffe6\124\uffe6\125\uffe6" +
    "\126\uffe6\001\002\000\004\071\323\001\002\000\004\014" +
    "\324\001\002\000\044\014\132\016\204\033\153\051\144" +
    "\063\123\064\171\065\143\066\145\077\137\100\162\102" +
    "\163\114\134\122\176\123\125\124\146\125\174\126\165" +
    "\001\002\000\054\015\326\017\215\025\236\026\226\027" +
    "\240\030\221\031\214\032\223\050\233\075\225\077\217" +
    "\100\230\101\222\103\237\104\216\113\235\114\220\115" +
    "\227\116\224\117\231\121\234\001\002\000\004\011\327" +
    "\001\002\000\114\004\uffce\005\uffce\006\uffce\007\uffce\010" +
    "\uffce\012\uffce\013\uffce\014\uffce\016\uffce\022\uffce\023\uffce" +
    "\033\uffce\037\uffce\042\uffce\043\uffce\051\uffce\055\uffce\061" +
    "\uffce\063\uffce\064\uffce\065\uffce\066\uffce\071\uffce\072\uffce" +
    "\073\uffce\074\uffce\077\uffce\100\uffce\102\uffce\105\uffce\114" +
    "\uffce\120\uffce\122\uffce\123\uffce\124\uffce\125\uffce\126\uffce" +
    "\001\002\000\044\014\132\016\204\033\153\051\144\063" +
    "\123\064\171\065\143\066\145\077\137\100\162\102\163" +
    "\114\134\122\176\123\125\124\146\125\174\126\165\001" +
    "\002\000\054\015\332\017\215\025\236\026\226\027\240" +
    "\030\221\031\214\032\223\050\233\075\225\077\217\100" +
    "\230\101\222\103\237\104\216\113\235\114\220\115\227" +
    "\116\224\117\231\121\234\001\002\000\004\011\333\001" +
    "\002\000\114\004\uffc9\005\uffc9\006\uffc9\007\uffc9\010\uffc9" +
    "\012\uffc9\013\uffc9\014\uffc9\016\uffc9\022\uffc9\023\uffc9\033" +
    "\uffc9\037\uffc9\042\uffc9\043\uffc9\051\uffc9\055\uffc9\061\uffc9" +
    "\063\uffc9\064\uffc9\065\uffc9\066\uffc9\071\uffc9\072\uffc9\073" +
    "\uffc9\074\uffc9\077\uffc9\100\uffc9\102\uffc9\105\uffc9\114\uffc9" +
    "\120\uffc9\122\uffc9\123\uffc9\124\uffc9\125\uffc9\126\uffc9\001" +
    "\002\000\044\014\132\016\204\033\153\051\144\063\123" +
    "\064\171\065\143\066\145\077\137\100\162\102\163\114" +
    "\134\122\176\123\125\124\146\125\174\126\165\001\002" +
    "\000\054\017\215\024\336\025\236\026\226\027\240\030" +
    "\221\031\214\032\223\050\233\075\225\077\217\100\230" +
    "\101\222\103\237\104\216\113\235\114\220\115\227\116" +
    "\224\117\231\121\234\001\002\000\044\014\132\016\204" +
    "\033\153\051\144\063\123\064\171\065\143\066\145\077" +
    "\137\100\162\102\163\114\134\122\176\123\125\124\146" +
    "\125\174\126\165\001\002\000\054\015\340\017\215\025" +
    "\236\026\226\027\240\030\221\031\214\032\223\050\233" +
    "\075\225\077\217\100\230\101\222\103\237\104\216\113" +
    "\235\114\220\115\227\116\224\117\231\121\234\001\002" +
    "\000\066\011\uffa7\013\uffa7\015\uffa7\017\uffa7\020\uffa7\024" +
    "\uffa7\025\uffa7\026\uffa7\027\uffa7\030\uffa7\031\uffa7\032\uffa7" +
    "\050\uffa7\075\uffa7\076\uffa7\077\uffa7\100\uffa7\101\uffa7\103" +
    "\uffa7\104\uffa7\113\uffa7\114\uffa7\115\uffa7\116\uffa7\117\uffa7" +
    "\121\uffa7\001\002\000\044\014\132\016\204\033\153\051" +
    "\144\063\123\064\171\065\143\066\145\077\137\100\162" +
    "\102\163\114\134\122\176\123\125\124\146\125\174\126" +
    "\165\001\002\000\006\017\247\021\343\001\002\000\044" +
    "\014\132\016\204\033\153\051\144\063\123\064\171\065" +
    "\143\066\145\077\137\100\162\102\163\114\134\122\176" +
    "\123\125\124\146\125\174\126\165\001\002\000\054\011" +
    "\uffc6\017\215\025\236\026\226\027\240\030\221\031\214" +
    "\032\223\050\233\075\225\077\217\100\230\101\222\103" +
    "\237\104\216\113\235\114\220\115\227\116\224\117\231" +
    "\121\234\001\002\000\054\011\uffc7\017\215\025\236\026" +
    "\226\027\240\030\221\031\214\032\223\050\233\075\225" +
    "\077\217\100\230\101\222\103\237\104\216\113\235\114" +
    "\220\115\227\116\224\117\231\121\234\001\002\000\114" +
    "\004\ufff3\005\ufff3\006\ufff3\007\ufff3\010\ufff3\012\ufff3\013" +
    "\ufff3\014\ufff3\016\ufff3\022\ufff3\023\ufff3\033\ufff3\037\ufff3" +
    "\042\ufff3\043\ufff3\051\ufff3\055\ufff3\061\ufff3\063\ufff3\064" +
    "\ufff3\065\ufff3\066\ufff3\071\ufff3\072\ufff3\073\ufff3\074\ufff3" +
    "\077\ufff3\100\ufff3\102\ufff3\105\ufff3\114\ufff3\120\ufff3\122" +
    "\ufff3\123\ufff3\124\ufff3\125\ufff3\126\ufff3\001\002\000\044" +
    "\014\132\016\204\033\153\051\144\063\123\064\171\065" +
    "\143\066\145\077\137\100\162\102\163\114\134\122\176" +
    "\123\125\124\146\125\174\126\165\001\002\000\054\015" +
    "\351\017\215\025\236\026\226\027\240\030\221\031\214" +
    "\032\223\050\233\075\225\077\217\100\230\101\222\103" +
    "\237\104\216\113\235\114\220\115\227\116\224\117\231" +
    "\121\234\001\002\000\066\011\uffe1\013\uffe1\015\uffe1\017" +
    "\uffe1\020\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1" +
    "\031\uffe1\032\uffe1\050\uffe1\075\uffe1\076\uffe1\077\uffe1\100" +
    "\uffe1\101\uffe1\103\uffe1\104\uffe1\113\uffe1\114\uffe1\115\uffe1" +
    "\116\uffe1\117\uffe1\121\uffe1\001\002\000\004\017\215\001" +
    "\002\000\004\017\215\001\002\000\066\011\uff97\013\uff97" +
    "\015\uff97\017\247\020\uff97\024\uff97\025\uff97\026\uff97\027" +
    "\uff97\030\uff97\031\uff97\032\uff97\050\uff97\075\uff97\076\uff97" +
    "\077\uff97\100\uff97\101\uff97\103\uff97\104\uff97\113\uff97\114" +
    "\uff97\115\uff97\116\uff97\117\uff97\121\uff97\001\002\000\066" +
    "\011\uff98\013\uff98\015\uff98\017\247\020\uff98\024\uff98\025" +
    "\uff98\026\uff98\027\uff98\030\uff98\031\uff98\032\uff98\050\uff98" +
    "\075\uff98\076\uff98\077\uff98\100\uff98\101\uff98\103\uff98\104" +
    "\uff98\113\uff98\114\uff98\115\uff98\116\uff98\117\uff98\121\uff98" +
    "\001\002\000\044\014\132\016\204\033\153\051\144\063" +
    "\123\064\171\065\143\066\145\077\137\100\162\102\163" +
    "\114\134\122\176\123\125\124\146\125\174\126\165\001" +
    "\002\000\054\015\360\017\215\025\236\026\226\027\240" +
    "\030\221\031\214\032\223\050\233\075\225\077\217\100" +
    "\230\101\222\103\237\104\216\113\235\114\220\115\227" +
    "\116\224\117\231\121\234\001\002\000\066\011\uffde\013" +
    "\uffde\015\uffde\017\uffde\020\uffde\024\uffde\025\uffde\026\uffde" +
    "\027\uffde\030\uffde\031\uffde\032\uffde\050\uffde\075\uffde\076" +
    "\uffde\077\uffde\100\uffde\101\uffde\103\uffde\104\uffde\113\uffde" +
    "\114\uffde\115\uffde\116\uffde\117\uffde\121\uffde\001\002\000" +
    "\114\004\uffe7\005\uffe7\006\uffe7\007\uffe7\010\uffe7\012\uffe7" +
    "\013\uffe7\014\uffe7\016\uffe7\022\uffe7\023\uffe7\033\uffe7\037" +
    "\uffe7\042\uffe7\043\uffe7\051\uffe7\055\uffe7\061\uffe7\063\uffe7" +
    "\064\uffe7\065\uffe7\066\uffe7\071\uffe7\072\uffe7\073\uffe7\074" +
    "\uffe7\077\uffe7\100\uffe7\102\uffe7\105\uffe7\114\uffe7\120\uffe7" +
    "\122\uffe7\123\uffe7\124\uffe7\125\uffe7\126\uffe7\001\002\000" +
    "\016\004\035\005\040\006\037\007\032\010\042\016\363" +
    "\001\002\000\006\016\uffbc\021\341\001\002\000\004\011" +
    "\u0117\001\002\000\004\011\u010f\001\002\000\004\016\371" +
    "\001\002\000\006\011\uffc3\024\uffc3\001\002\000\006\011" +
    "\uffc5\024\u010c\001\002\000\014\011\uffc2\017\064\021\373" +
    "\024\uffc2\076\374\001\002\000\012\011\uffc0\017\066\021" +
    "\u0101\024\uffc0\001\002\000\044\014\132\016\204\033\153" +
    "\051\144\063\123\064\171\065\143\066\145\077\137\100" +
    "\162\102\163\114\134\122\176\123\125\124\146\125\174" +
    "\126\165\001\002\000\044\014\132\016\204\033\153\051" +
    "\144\063\123\064\171\065\143\066\145\077\137\100\162" +
    "\102\163\114\134\122\176\123\125\124\146\125\174\126" +
    "\165\001\002\000\054\015\376\017\215\025\236\026\226" +
    "\027\240\030\221\031\214\032\223\050\233\075\225\077" +
    "\217\100\230\101\222\103\237\104\216\113\235\114\220" +
    "\115\227\116\224\117\231\121\234\001\002\000\004\012" +
    "\111\001\002\000\114\004\uffcd\005\uffcd\006\uffcd\007\uffcd" +
    "\010\uffcd\012\uffcd\013\uffcd\014\uffcd\016\uffcd\022\uffcd\023" +
    "\uffcd\033\uffcd\037\uffcd\042\uffcd\043\uffcd\051\uffcd\055\uffcd" +
    "\061\uffcd\063\uffcd\064\uffcd\065\uffcd\066\uffcd\071\uffcd\072" +
    "\uffcd\073\uffcd\074\uffcd\077\uffcd\100\uffcd\102\uffcd\105\uffcd" +
    "\114\uffcd\120\uffcd\122\uffcd\123\uffcd\124\uffcd\125\uffcd\126" +
    "\uffcd\001\002\000\056\011\uffc1\017\215\024\uffc1\025\236" +
    "\026\226\027\240\030\221\031\214\032\223\050\233\075" +
    "\225\077\217\100\230\101\222\103\237\104\216\113\235" +
    "\114\220\115\227\116\224\117\231\121\234\001\002\000" +
    "\046\012\u0104\014\132\016\204\033\153\051\144\063\123" +
    "\064\171\065\143\066\145\077\137\100\162\102\163\114" +
    "\134\122\176\123\125\124\146\125\174\126\165\001\002" +
    "\000\006\011\uffbe\024\uffbe\001\002\000\056\011\uffbf\017" +
    "\215\024\uffbf\025\236\026\226\027\240\030\221\031\214" +
    "\032\223\050\233\075\225\077\217\100\230\101\222\103" +
    "\237\104\216\113\235\114\220\115\227\116\224\117\231" +
    "\121\234\001\002\000\046\012\u0104\014\132\016\204\033" +
    "\153\051\144\063\123\064\171\065\143\066\145\077\137" +
    "\100\162\102\163\114\134\122\176\123\125\124\146\125" +
    "\174\126\165\001\002\000\006\013\u0109\024\u010a\001\002" +
    "\000\006\013\uff66\024\uff66\001\002\000\006\013\uff68\024" +
    "\uff68\001\002\000\056\013\uff67\017\215\024\uff67\025\236" +
    "\026\226\027\240\030\221\031\214\032\223\050\233\075" +
    "\225\077\217\100\230\101\222\103\237\104\216\113\235" +
    "\114\220\115\227\116\224\117\231\121\234\001\002\000" +
    "\010\011\uff6a\013\uff6a\024\uff6a\001\002\000\046\012\u0104" +
    "\014\132\016\204\033\153\051\144\063\123\064\171\065" +
    "\143\066\145\077\137\100\162\102\163\114\134\122\176" +
    "\123\125\124\146\125\174\126\165\001\002\000\006\013" +
    "\uff69\024\uff69\001\002\000\004\016\u010e\001\002\000\006" +
    "\011\uffc4\024\uffc4\001\002\000\012\011\uffc2\017\064\021" +
    "\373\024\uffc2\001\002\000\044\014\132\016\204\033\153" +
    "\051\144\063\123\064\171\065\143\066\145\077\137\100" +
    "\162\102\163\114\134\122\176\123\125\124\146\125\174" +
    "\126\165\001\002\000\054\011\u0111\017\215\025\236\026" +
    "\226\027\240\030\221\031\214\032\223\050\233\075\225" +
    "\077\217\100\230\101\222\103\237\104\216\113\235\114" +
    "\220\115\227\116\224\117\231\121\234\001\002\000\044" +
    "\014\132\016\204\033\153\051\144\063\123\064\171\065" +
    "\143\066\145\077\137\100\162\102\163\114\134\122\176" +
    "\123\125\124\146\125\174\126\165\001\002\000\054\015" +
    "\uffdd\017\uffa8\025\uffa8\026\uffa8\027\uffa8\030\uffa8\031\uffa8" +
    "\032\uffa8\050\uffa8\075\uffa8\077\uffa8\100\uffa8\101\uffa8\103" +
    "\uffa8\104\uffa8\113\uffa8\114\uffa8\115\uffa8\116\uffa8\117\uffa8" +
    "\121\uffa8\001\002\000\004\015\u0115\001\002\000\054\015" +
    "\uffdc\017\uffa5\025\uffa5\026\uffa5\027\uffa5\030\uffa5\031\uffa5" +
    "\032\uffa5\050\uffa5\075\uffa5\077\uffa5\100\uffa5\101\uffa5\103" +
    "\uffa5\104\uffa5\113\uffa5\114\uffa5\115\uffa5\116\uffa5\117\uffa5" +
    "\121\uffa5\001\002\000\004\012\111\001\002\000\114\004" +
    "\uffcb\005\uffcb\006\uffcb\007\uffcb\010\uffcb\012\uffcb\013\uffcb" +
    "\014\uffcb\016\uffcb\022\uffcb\023\uffcb\033\uffcb\037\uffcb\042" +
    "\uffcb\043\uffcb\051\uffcb\055\uffcb\061\uffcb\063\uffcb\064\uffcb" +
    "\065\uffcb\066\uffcb\071\uffcb\072\uffcb\073\uffcb\074\uffcb\077" +
    "\uffcb\100\uffcb\102\uffcb\105\uffcb\114\uffcb\120\uffcb\122\uffcb" +
    "\123\uffcb\124\uffcb\125\uffcb\126\uffcb\001\002\000\044\014" +
    "\132\016\204\033\153\051\144\063\123\064\171\065\143" +
    "\066\145\077\137\100\162\102\163\114\134\122\176\123" +
    "\125\124\146\125\174\126\165\001\002\000\054\011\u0119" +
    "\017\215\025\236\026\226\027\240\030\221\031\214\032" +
    "\223\050\233\075\225\077\217\100\230\101\222\103\237" +
    "\104\216\113\235\114\220\115\227\116\224\117\231\121" +
    "\234\001\002\000\044\014\132\016\204\033\153\051\144" +
    "\063\123\064\171\065\143\066\145\077\137\100\162\102" +
    "\163\114\134\122\176\123\125\124\146\125\174\126\165" +
    "\001\002\000\004\015\u011b\001\002\000\004\012\111\001" +
    "\002\000\114\004\uffcc\005\uffcc\006\uffcc\007\uffcc\010\uffcc" +
    "\012\uffcc\013\uffcc\014\uffcc\016\uffcc\022\uffcc\023\uffcc\033" +
    "\uffcc\037\uffcc\042\uffcc\043\uffcc\051\uffcc\055\uffcc\061\uffcc" +
    "\063\uffcc\064\uffcc\065\uffcc\066\uffcc\071\uffcc\072\uffcc\073" +
    "\uffcc\074\uffcc\077\uffcc\100\uffcc\102\uffcc\105\uffcc\114\uffcc" +
    "\120\uffcc\122\uffcc\123\uffcc\124\uffcc\125\uffcc\126\uffcc\001" +
    "\002\000\114\004\ufff2\005\ufff2\006\ufff2\007\ufff2\010\ufff2" +
    "\012\ufff2\013\ufff2\014\ufff2\016\ufff2\022\ufff2\023\ufff2\033" +
    "\ufff2\037\ufff2\042\ufff2\043\ufff2\051\ufff2\055\ufff2\061\ufff2" +
    "\063\ufff2\064\ufff2\065\ufff2\066\ufff2\071\ufff2\072\ufff2\073" +
    "\ufff2\074\ufff2\077\ufff2\100\ufff2\102\ufff2\105\ufff2\114\ufff2" +
    "\120\ufff2\122\ufff2\123\ufff2\124\ufff2\125\ufff2\126\ufff2\001" +
    "\002\000\062\011\uff64\013\uff64\015\uff64\017\215\020\uff64" +
    "\024\uff64\025\uff64\026\uff64\027\uff64\030\uff64\031\uff64\032" +
    "\uff64\050\uff64\075\uff64\076\uff64\101\222\103\uff64\104\uff64" +
    "\113\uff64\114\uff64\115\uff64\116\uff64\117\uff64\121\uff64\001" +
    "\002\000\066\011\uffa9\013\uffa9\015\uffa9\017\215\020\uffa9" +
    "\024\uffa9\025\uffa9\026\uffa9\027\uffa9\030\uffa9\031\uffa9\032" +
    "\uffa9\050\uffa9\075\uffa9\076\uffa9\077\217\100\230\101\222" +
    "\103\uffa9\104\uffa9\113\uffa9\114\uffa9\115\227\116\224\117" +
    "\uffa9\121\234\001\002\000\004\015\u0126\001\002\000\054" +
    "\015\u0125\017\215\025\236\026\226\027\240\030\221\031" +
    "\214\032\223\050\233\075\225\077\217\100\230\101\222" +
    "\103\237\104\216\113\235\114\220\115\227\116\224\117" +
    "\231\121\234\001\002\000\056\014\206\015\u0123\017\uff99" +
    "\025\uff99\026\uff99\027\uff99\030\uff99\031\uff99\032\uff99\050" +
    "\uff99\075\uff99\077\uff99\100\uff99\101\uff99\103\uff99\104\uff99" +
    "\113\uff99\114\uff99\115\uff99\116\uff99\117\uff99\121\uff99\001" +
    "\002\000\044\014\132\016\204\033\153\051\144\063\123" +
    "\064\171\065\143\066\145\077\137\100\162\102\163\114" +
    "\134\122\176\123\125\124\146\125\174\126\165\001\002" +
    "\000\066\011\uff9f\013\uff9f\015\uff9f\017\215\020\uff9f\024" +
    "\uff9f\025\uff9f\026\uff9f\027\uff9f\030\uff9f\031\uff9f\032\uff9f" +
    "\050\uff9f\075\uff9f\076\uff9f\077\uff9f\100\uff9f\101\222\103" +
    "\uff9f\104\uff9f\113\uff9f\114\uff9f\115\uff9f\116\uff9f\117\uff9f" +
    "\121\uff9f\001\002\000\066\011\uff96\013\uff96\015\uff96\017" +
    "\uff96\020\uff96\024\uff96\025\uff96\026\uff96\027\uff96\030\uff96" +
    "\031\uff96\032\uff96\050\uff96\075\uff96\076\uff96\077\uff96\100" +
    "\uff96\101\uff96\103\uff96\104\uff96\113\uff96\114\uff96\115\uff96" +
    "\116\uff96\117\uff96\121\uff96\001\002\000\044\014\132\016" +
    "\204\033\153\051\144\063\123\064\171\065\143\066\145" +
    "\077\137\100\162\102\163\114\134\122\176\123\125\124" +
    "\146\125\174\126\165\001\002\000\066\011\uffa0\013\uffa0" +
    "\015\uffa0\017\215\020\uffa0\024\uffa0\025\uffa0\026\uffa0\027" +
    "\uffa0\030\uffa0\031\uffa0\032\uffa0\050\uffa0\075\uffa0\076\uffa0" +
    "\077\uffa0\100\uffa0\101\222\103\uffa0\104\uffa0\113\uffa0\114" +
    "\uffa0\115\uffa0\116\uffa0\117\uffa0\121\uffa0\001\002\000\044" +
    "\014\132\016\204\033\153\051\144\063\123\064\171\065" +
    "\143\066\145\077\137\100\162\102\163\114\134\122\176" +
    "\123\125\124\146\125\174\126\165\001\002\000\054\015" +
    "\u012a\017\215\025\236\026\226\027\240\030\221\031\214" +
    "\032\223\050\233\075\225\077\217\100\230\101\222\103" +
    "\237\104\216\113\235\114\220\115\227\116\224\117\231" +
    "\121\234\001\002\000\004\012\111\001\002\000\114\004" +
    "\uffcf\005\uffcf\006\uffcf\007\uffcf\010\uffcf\012\uffcf\013\uffcf" +
    "\014\uffcf\016\uffcf\022\uffcf\023\uffcf\033\uffcf\037\uffcf\042" +
    "\uffcf\043\uffcf\051\uffcf\055\uffcf\061\uffcf\063\uffcf\064\uffcf" +
    "\065\uffcf\066\uffcf\071\uffcf\072\uffcf\073\uffcf\074\uffcf\077" +
    "\uffcf\100\uffcf\102\uffcf\105\uffcf\114\uffcf\120\uffcf\122\uffcf" +
    "\123\uffcf\124\uffcf\125\uffcf\126\uffcf\001\002\000\044\014" +
    "\132\016\204\033\153\051\144\063\123\064\171\065\143" +
    "\066\145\077\137\100\162\102\163\114\134\122\176\123" +
    "\125\124\146\125\174\126\165\001\002\000\054\015\u012e" +
    "\017\215\025\236\026\226\027\240\030\221\031\214\032" +
    "\223\050\233\075\225\077\217\100\230\101\222\103\237" +
    "\104\216\113\235\114\220\115\227\116\224\117\231\121" +
    "\234\001\002\000\004\012\111\001\002\000\116\004\uffd5" +
    "\005\uffd5\006\uffd5\007\uffd5\010\uffd5\012\uffd5\013\uffd5\014" +
    "\uffd5\016\uffd5\022\uffd5\023\uffd5\033\uffd5\037\uffd5\042\uffd5" +
    "\043\uffd5\051\uffd5\055\uffd5\061\uffd5\063\uffd5\064\uffd5\065" +
    "\uffd5\066\uffd5\071\uffd5\072\uffd5\073\uffd5\074\uffd5\077\uffd5" +
    "\100\uffd5\102\uffd5\105\uffd5\107\u0130\114\uffd5\120\uffd5\122" +
    "\uffd5\123\uffd5\124\uffd5\125\uffd5\126\uffd5\001\002\000\006" +
    "\012\111\105\127\001\002\000\114\004\uffd4\005\uffd4\006" +
    "\uffd4\007\uffd4\010\uffd4\012\uffd4\013\uffd4\014\uffd4\016\uffd4" +
    "\022\uffd4\023\uffd4\033\uffd4\037\uffd4\042\uffd4\043\uffd4\051" +
    "\uffd4\055\uffd4\061\uffd4\063\uffd4\064\uffd4\065\uffd4\066\uffd4" +
    "\071\uffd4\072\uffd4\073\uffd4\074\uffd4\077\uffd4\100\uffd4\102" +
    "\uffd4\105\uffd4\114\uffd4\120\uffd4\122\uffd4\123\uffd4\124\uffd4" +
    "\125\uffd4\126\uffd4\001\002\000\114\004\uffd2\005\uffd2\006" +
    "\uffd2\007\uffd2\010\uffd2\012\uffd2\013\uffd2\014\uffd2\016\uffd2" +
    "\022\uffd2\023\uffd2\033\uffd2\037\uffd2\042\uffd2\043\uffd2\051" +
    "\uffd2\055\uffd2\061\uffd2\063\uffd2\064\uffd2\065\uffd2\066\uffd2" +
    "\071\uffd2\072\uffd2\073\uffd2\074\uffd2\077\uffd2\100\uffd2\102" +
    "\uffd2\105\uffd2\114\uffd2\120\uffd2\122\uffd2\123\uffd2\124\uffd2" +
    "\125\uffd2\126\uffd2\001\002\000\114\004\uffd3\005\uffd3\006" +
    "\uffd3\007\uffd3\010\uffd3\012\uffd3\013\uffd3\014\uffd3\016\uffd3" +
    "\022\uffd3\023\uffd3\033\uffd3\037\uffd3\042\uffd3\043\uffd3\051" +
    "\uffd3\055\uffd3\061\uffd3\063\uffd3\064\uffd3\065\uffd3\066\uffd3" +
    "\071\uffd3\072\uffd3\073\uffd3\074\uffd3\077\uffd3\100\uffd3\102" +
    "\uffd3\105\uffd3\114\uffd3\120\uffd3\122\uffd3\123\uffd3\124\uffd3" +
    "\125\uffd3\126\uffd3\001\002\000\044\014\132\016\204\033" +
    "\153\051\144\063\123\064\171\065\143\066\145\077\137" +
    "\100\162\102\163\114\134\122\176\123\125\124\146\125" +
    "\174\126\165\001\002\000\054\015\u0136\017\215\025\236" +
    "\026\226\027\240\030\221\031\214\032\223\050\233\075" +
    "\225\077\217\100\230\101\222\103\237\104\216\113\235" +
    "\114\220\115\227\116\224\117\231\121\234\001\002\000" +
    "\066\011\uffdf\013\uffdf\015\uffdf\017\uffdf\020\uffdf\024\uffdf" +
    "\025\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf\050" +
    "\uffdf\075\uffdf\076\uffdf\077\uffdf\100\uffdf\101\uffdf\103\uffdf" +
    "\104\uffdf\113\uffdf\114\uffdf\115\uffdf\116\uffdf\117\uffdf\121" +
    "\uffdf\001\002\000\044\014\132\016\204\033\153\051\144" +
    "\063\123\064\171\065\143\066\145\077\137\100\162\102" +
    "\163\114\134\122\176\123\125\124\146\125\174\126\165" +
    "\001\002\000\054\015\u0139\017\215\025\236\026\226\027" +
    "\240\030\221\031\214\032\223\050\233\075\225\077\217" +
    "\100\230\101\222\103\237\104\216\113\235\114\220\115" +
    "\227\116\224\117\231\121\234\001\002\000\004\012\u013a" +
    "\001\002\000\004\037\u013c\001\002\000\010\013\u0142\037" +
    "\u013c\042\u0144\001\002\000\044\014\132\016\204\033\153" +
    "\051\144\063\123\064\171\065\143\066\145\077\137\100" +
    "\162\102\163\114\134\122\176\123\125\124\146\125\174" +
    "\126\165\001\002\000\010\013\uffd8\037\uffd8\042\uffd8\001" +
    "\002\000\054\017\215\025\236\026\226\027\240\030\221" +
    "\031\214\032\223\050\233\075\225\076\u013f\077\217\100" +
    "\230\101\222\103\237\104\216\113\235\114\220\115\227" +
    "\116\224\117\231\121\234\001\002\000\106\004\035\005" +
    "\040\006\037\007\032\010\042\012\111\014\132\016\152" +
    "\022\167\023\155\033\153\043\157\051\144\055\172\061" +
    "\122\063\123\064\171\065\143\066\145\071\130\072\141" +
    "\073\114\074\112\077\137\100\162\102\163\105\127\114" +
    "\134\120\116\122\176\123\125\124\146\125\174\126\165" +
    "\001\002\000\114\004\035\005\040\006\037\007\032\010" +
    "\042\012\111\013\uffd7\014\132\016\152\022\167\023\155" +
    "\033\153\037\uffd7\042\uffd7\043\157\051\144\055\172\061" +
    "\122\063\123\064\171\065\143\066\145\071\130\072\141" +
    "\073\114\074\112\077\137\100\162\102\163\105\127\114" +
    "\134\120\116\122\176\123\125\124\146\125\174\126\165" +
    "\001\002\000\114\004\ufff5\005\ufff5\006\ufff5\007\ufff5\010" +
    "\ufff5\012\ufff5\013\ufff5\014\ufff5\016\ufff5\022\ufff5\023\ufff5" +
    "\033\ufff5\037\ufff5\042\ufff5\043\ufff5\051\ufff5\055\ufff5\061" +
    "\ufff5\063\ufff5\064\ufff5\065\ufff5\066\ufff5\071\ufff5\072\ufff5" +
    "\073\ufff5\074\ufff5\077\ufff5\100\ufff5\102\ufff5\105\ufff5\114" +
    "\ufff5\120\ufff5\122\ufff5\123\ufff5\124\ufff5\125\ufff5\126\ufff5" +
    "\001\002\000\114\004\uffdb\005\uffdb\006\uffdb\007\uffdb\010" +
    "\uffdb\012\uffdb\013\uffdb\014\uffdb\016\uffdb\022\uffdb\023\uffdb" +
    "\033\uffdb\037\uffdb\042\uffdb\043\uffdb\051\uffdb\055\uffdb\061" +
    "\uffdb\063\uffdb\064\uffdb\065\uffdb\066\uffdb\071\uffdb\072\uffdb" +
    "\073\uffdb\074\uffdb\077\uffdb\100\uffdb\102\uffdb\105\uffdb\114" +
    "\uffdb\120\uffdb\122\uffdb\123\uffdb\124\uffdb\125\uffdb\126\uffdb" +
    "\001\002\000\004\013\u0148\001\002\000\004\076\u0146\001" +
    "\002\000\010\013\uffd9\037\uffd9\042\uffd9\001\002\000\106" +
    "\004\035\005\040\006\037\007\032\010\042\012\111\014" +
    "\132\016\152\022\167\023\155\033\153\043\157\051\144" +
    "\055\172\061\122\063\123\064\171\065\143\066\145\071" +
    "\130\072\141\073\114\074\112\077\137\100\162\102\163" +
    "\105\127\114\134\120\116\122\176\123\125\124\146\125" +
    "\174\126\165\001\002\000\110\004\035\005\040\006\037" +
    "\007\032\010\042\012\111\013\uffd6\014\132\016\152\022" +
    "\167\023\155\033\153\043\157\051\144\055\172\061\122" +
    "\063\123\064\171\065\143\066\145\071\130\072\141\073" +
    "\114\074\112\077\137\100\162\102\163\105\127\114\134" +
    "\120\116\122\176\123\125\124\146\125\174\126\165\001" +
    "\002\000\114\004\uffda\005\uffda\006\uffda\007\uffda\010\uffda" +
    "\012\uffda\013\uffda\014\uffda\016\uffda\022\uffda\023\uffda\033" +
    "\uffda\037\uffda\042\uffda\043\uffda\051\uffda\055\uffda\061\uffda" +
    "\063\uffda\064\uffda\065\uffda\066\uffda\071\uffda\072\uffda\073" +
    "\uffda\074\uffda\077\uffda\100\uffda\102\uffda\105\uffda\114\uffda" +
    "\120\uffda\122\uffda\123\uffda\124\uffda\125\uffda\126\uffda\001" +
    "\002\000\134\004\ufff7\005\ufff7\006\ufff7\007\ufff7\010\ufff7" +
    "\012\ufff7\013\ufff7\014\ufff7\016\ufff7\022\ufff7\023\ufff7\033" +
    "\ufff7\034\ufff7\036\ufff7\037\ufff7\042\ufff7\043\ufff7\045\ufff7" +
    "\051\ufff7\052\ufff7\053\ufff7\054\ufff7\055\ufff7\057\ufff7\061" +
    "\ufff7\063\ufff7\064\ufff7\065\ufff7\066\ufff7\071\ufff7\072\ufff7" +
    "\073\ufff7\074\ufff7\077\ufff7\100\ufff7\102\ufff7\105\ufff7\107" +
    "\ufff7\114\ufff7\120\ufff7\122\ufff7\123\ufff7\124\ufff7\125\ufff7" +
    "\126\ufff7\001\002\000\004\015\u014b\001\002\000\004\011" +
    "\u014c\001\002\000\114\004\uffca\005\uffca\006\uffca\007\uffca" +
    "\010\uffca\012\uffca\013\uffca\014\uffca\016\uffca\022\uffca\023" +
    "\uffca\033\uffca\037\uffca\042\uffca\043\uffca\051\uffca\055\uffca" +
    "\061\uffca\063\uffca\064\uffca\065\uffca\066\uffca\071\uffca\072" +
    "\uffca\073\uffca\074\uffca\077\uffca\100\uffca\102\uffca\105\uffca" +
    "\114\uffca\120\uffca\122\uffca\123\uffca\124\uffca\125\uffca\126" +
    "\uffca\001\002\000\114\004\uffd0\005\uffd0\006\uffd0\007\uffd0" +
    "\010\uffd0\012\uffd0\013\uffd0\014\uffd0\016\uffd0\022\uffd0\023" +
    "\uffd0\033\uffd0\037\uffd0\042\uffd0\043\uffd0\051\uffd0\055\uffd0" +
    "\061\uffd0\063\uffd0\064\uffd0\065\uffd0\066\uffd0\071\uffd0\072" +
    "\uffd0\073\uffd0\074\uffd0\077\uffd0\100\uffd0\102\uffd0\105\uffd0" +
    "\114\uffd0\120\uffd0\122\uffd0\123\uffd0\124\uffd0\125\uffd0\126" +
    "\uffd0\001\002\000\114\004\uffe8\005\uffe8\006\uffe8\007\uffe8" +
    "\010\uffe8\012\uffe8\013\uffe8\014\uffe8\016\uffe8\022\uffe8\023" +
    "\uffe8\033\uffe8\037\uffe8\042\uffe8\043\uffe8\051\uffe8\055\uffe8" +
    "\061\uffe8\063\uffe8\064\uffe8\065\uffe8\066\uffe8\071\uffe8\072" +
    "\uffe8\073\uffe8\074\uffe8\077\uffe8\100\uffe8\102\uffe8\105\uffe8" +
    "\114\uffe8\120\uffe8\122\uffe8\123\uffe8\124\uffe8\125\uffe8\126" +
    "\uffe8\001\002\000\114\004\uffd1\005\uffd1\006\uffd1\007\uffd1" +
    "\010\uffd1\012\uffd1\013\uffd1\014\uffd1\016\uffd1\022\uffd1\023" +
    "\uffd1\033\uffd1\037\uffd1\042\uffd1\043\uffd1\051\uffd1\055\uffd1" +
    "\061\uffd1\063\uffd1\064\uffd1\065\uffd1\066\uffd1\071\uffd1\072" +
    "\uffd1\073\uffd1\074\uffd1\077\uffd1\100\uffd1\102\uffd1\105\uffd1" +
    "\114\uffd1\120\uffd1\122\uffd1\123\uffd1\124\uffd1\125\uffd1\126" +
    "\uffd1\001\002\000\020\002\ufffc\036\ufffc\045\ufffc\052\ufffc" +
    "\053\ufffc\054\ufffc\057\ufffc\001\002\000\036\004\ufff9\005" +
    "\ufff9\006\ufff9\007\ufff9\010\ufff9\013\ufff9\016\ufff9\034\ufff9" +
    "\036\ufff9\045\ufff9\052\ufff9\053\ufff9\054\ufff9\057\ufff9\001" +
    "\002\000\004\013\u0153\001\002\000\020\002\ufffd\036\ufffd" +
    "\045\ufffd\052\ufffd\053\ufffd\054\ufffd\057\ufffd\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0152\000\020\012\006\047\014\050\005\051\015\063" +
    "\016\071\011\074\017\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\050\021\051\015\063\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\047\014" +
    "\050\005\051\015\063\016\071\020\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\013\030\037\035\047\045\050\005\051\015\052" +
    "\044\056\046\057\042\063\016\072\u0151\073\033\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\013\030\037" +
    "\035\047\045\050\005\051\015\052\044\056\046\057\042" +
    "\063\016\072\040\073\033\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\013\030\037\035" +
    "\047\045\050\005\051\015\052\044\056\u0150\057\042\063" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\002\107\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\013\030\037\035\050\021\051\015\052" +
    "\050\063\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\013\030\037" +
    "\056\053\054\054\055\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\013" +
    "\030\037\060\001\001\000\002\001\001\000\004\031\062" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\031\070" +
    "\001\001\000\002\001\001\000\010\013\030\037\056\053" +
    "\073\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\013\030\037\056\053\054\054\075\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\013\030" +
    "\037\056\053\054\054\101\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\013\030\037\056\053\054\054\104" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\064\002\163\003\116\004\172" +
    "\005\150\006\132\007\112\010\141\011\117\013\030\014" +
    "\174\015\135\016\137\017\160\020\155\021\146\022\120" +
    "\023\130\025\167\026\123\033\157\037\114\042\153\046" +
    "\147\061\134\062\165\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\040\367\041\366\001" +
    "\001\000\002\001\001\000\062\002\163\004\u0140\005\150" +
    "\006\132\007\112\010\141\011\117\013\030\014\174\015" +
    "\135\016\137\017\160\020\155\021\146\022\120\023\130" +
    "\025\167\026\123\033\157\037\114\042\153\046\147\061" +
    "\134\062\165\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\006\u0120\007\201\010" +
    "\204\011\117\013\u011f\025\167\062\176\001\001\000\004" +
    "\032\231\001\001\000\016\006\u011e\007\201\010\204\011" +
    "\117\025\167\062\176\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\006\u011d\007\201\010\204\011\117\025" +
    "\167\062\176\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\351\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\032\341\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\002\321\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\006\317\007\201\010\204" +
    "\011\117\025\167\062\176\001\001\000\016\006\316\007" +
    "\201\010\204\011\117\025\167\062\176\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\006\200" +
    "\007\201\010\204\011\117\025\167\030\177\062\176\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\032\231\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\006\207\007" +
    "\201\010\204\011\117\025\167\062\176\064\206\065\210" +
    "\001\001\000\002\001\001\000\004\032\231\001\001\000" +
    "\002\001\001\000\016\006\212\007\201\010\204\011\117" +
    "\025\167\062\176\001\001\000\004\032\231\001\001\000" +
    "\016\006\303\007\201\010\204\011\117\025\167\062\176" +
    "\001\001\000\016\006\301\007\201\010\204\011\117\025" +
    "\167\062\176\001\001\000\016\006\300\007\201\010\204" +
    "\011\117\025\167\062\176\001\001\000\002\001\001\000" +
    "\016\006\277\007\201\010\204\011\117\025\167\062\176" +
    "\001\001\000\016\006\276\007\201\010\204\011\117\025" +
    "\167\062\176\001\001\000\002\001\001\000\016\006\260" +
    "\007\201\010\204\011\117\025\167\062\176\001\001\000" +
    "\016\006\257\007\201\010\204\011\117\025\167\062\176" +
    "\001\001\000\016\006\254\007\201\010\204\011\117\025" +
    "\167\062\176\001\001\000\016\006\253\007\201\010\204" +
    "\011\117\025\167\062\176\001\001\000\016\006\252\007" +
    "\201\010\204\011\117\025\167\062\176\001\001\000\002" +
    "\001\001\000\016\006\251\007\201\010\204\011\117\025" +
    "\167\062\176\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\006\244\007\201\010\204\011\117\025\167\062" +
    "\176\001\001\000\016\006\243\007\201\010\204\011\117" +
    "\025\167\062\176\001\001\000\016\006\242\007\201\010" +
    "\204\011\117\025\167\062\176\001\001\000\016\006\241" +
    "\007\201\010\204\011\117\025\167\062\176\001\001\000" +
    "\016\006\240\007\201\010\204\011\117\025\167\062\176" +
    "\001\001\000\004\032\231\001\001\000\004\032\231\001" +
    "\001\000\004\032\231\001\001\000\004\032\231\001\001" +
    "\000\004\032\231\001\001\000\002\001\001\000\016\006" +
    "\247\007\201\010\204\011\117\025\167\062\176\001\001" +
    "\000\004\032\231\001\001\000\002\001\001\000\004\032" +
    "\231\001\001\000\004\032\231\001\001\000\004\032\231" +
    "\001\001\000\004\032\231\001\001\000\016\006\256\007" +
    "\201\010\204\011\117\025\167\062\176\001\001\000\004" +
    "\032\231\001\001\000\004\032\231\001\001\000\004\032" +
    "\231\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\006\207\007\201\010" +
    "\204\011\117\025\167\062\176\064\266\065\210\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\032\231\001\001\000" +
    "\004\032\231\001\001\000\004\032\231\001\001\000\004" +
    "\032\231\001\001\000\002\001\001\000\004\032\231\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\006\307" +
    "\007\201\010\204\011\117\025\167\062\176\001\001\000" +
    "\004\032\231\001\001\000\002\001\001\000\016\006\312" +
    "\007\201\010\204\011\117\025\167\062\176\001\001\000" +
    "\004\032\231\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\032\231\001\001\000\004\032" +
    "\231\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\006\324\007\201\010\204\011\117\025" +
    "\167\062\176\001\001\000\004\032\231\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\006\330\007\201\010" +
    "\204\011\117\025\167\062\176\001\001\000\004\032\231" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\006" +
    "\334\007\201\010\204\011\117\025\167\062\176\001\001" +
    "\000\004\032\231\001\001\000\016\006\336\007\201\010" +
    "\204\011\117\025\167\062\176\001\001\000\004\032\231" +
    "\001\001\000\002\001\001\000\016\006\344\007\201\010" +
    "\204\011\117\025\167\062\176\001\001\000\002\001\001" +
    "\000\016\006\343\007\201\010\204\011\117\025\167\062" +
    "\176\001\001\000\004\032\231\001\001\000\004\032\231" +
    "\001\001\000\002\001\001\000\016\006\347\007\201\010" +
    "\204\011\117\025\167\062\176\001\001\000\004\032\231" +
    "\001\001\000\002\001\001\000\004\032\354\001\001\000" +
    "\004\032\353\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\006\356\007\201\010\204\011\117\025\167\062" +
    "\176\001\001\000\004\032\231\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\005\363\013\030\016\364\037" +
    "\365\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\040\367\041\366\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\031\371\001\001\000\002" +
    "\001\001\000\016\006\377\007\201\010\204\011\117\025" +
    "\167\062\176\001\001\000\016\006\374\007\201\010\204" +
    "\011\117\025\167\062\176\001\001\000\004\032\231\001" +
    "\001\000\004\002\376\001\001\000\002\001\001\000\004" +
    "\032\231\001\001\000\020\006\u0102\007\201\010\204\011" +
    "\117\025\167\036\u0101\062\176\001\001\000\002\001\001" +
    "\000\004\032\231\001\001\000\024\006\u0107\007\201\010" +
    "\204\011\117\025\167\034\u0106\035\u0104\036\u0105\062\176" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\032\231\001\001\000\002\001\001\000\022" +
    "\006\u0107\007\201\010\204\011\117\025\167\034\u010a\036" +
    "\u0105\062\176\001\001\000\002\001\001\000\004\041\u010c" +
    "\001\001\000\002\001\001\000\004\031\371\001\001\000" +
    "\016\006\u010f\007\201\010\204\011\117\025\167\062\176" +
    "\001\001\000\004\032\231\001\001\000\020\006\132\007" +
    "\u0111\010\u0113\011\117\025\167\027\u0112\062\176\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\002\u0115\001\001\000\002\001\001\000\016\006\u0117" +
    "\007\201\010\204\011\117\025\167\062\176\001\001\000" +
    "\004\032\231\001\001\000\020\006\132\007\u0111\010\u0113" +
    "\011\117\025\167\027\u0119\062\176\001\001\000\002\001" +
    "\001\000\004\002\u011b\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\032\231\001\001\000\004\032\231\001" +
    "\001\000\002\001\001\000\004\032\231\001\001\000\002" +
    "\001\001\000\016\006\u0123\007\201\010\204\011\117\025" +
    "\167\062\176\001\001\000\004\032\231\001\001\000\002" +
    "\001\001\000\016\006\u0126\007\201\010\204\011\117\025" +
    "\167\062\176\001\001\000\004\032\231\001\001\000\016" +
    "\006\u0128\007\201\010\204\011\117\025\167\062\176\001" +
    "\001\000\004\032\231\001\001\000\004\002\u012a\001\001" +
    "\000\002\001\001\000\016\006\u012c\007\201\010\204\011" +
    "\117\025\167\062\176\001\001\000\004\032\231\001\001" +
    "\000\004\002\u012e\001\001\000\002\001\001\000\010\002" +
    "\u0131\023\u0132\024\u0130\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\006\u0134\007\201\010" +
    "\204\011\117\025\167\062\176\001\001\000\004\032\231" +
    "\001\001\000\002\001\001\000\016\006\u0137\007\201\010" +
    "\204\011\117\025\167\062\176\001\001\000\004\032\231" +
    "\001\001\000\002\001\001\000\006\043\u013c\045\u013a\001" +
    "\001\000\006\043\u0144\044\u0142\001\001\000\016\006\u013d" +
    "\007\201\010\204\011\117\025\167\062\176\001\001\000" +
    "\002\001\001\000\004\032\231\001\001\000\064\002\163" +
    "\003\u013f\004\172\005\150\006\132\007\112\010\141\011" +
    "\117\013\030\014\174\015\135\016\137\017\160\020\155" +
    "\021\146\022\120\023\130\025\167\026\123\033\157\037" +
    "\114\042\153\046\147\061\134\062\165\001\001\000\062" +
    "\002\163\004\u0140\005\150\006\132\007\112\010\141\011" +
    "\117\013\030\014\174\015\135\016\137\017\160\020\155" +
    "\021\146\022\120\023\130\025\167\026\123\033\157\037" +
    "\114\042\153\046\147\061\134\062\165\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\064\002\163\003\u0146\004\172" +
    "\005\150\006\132\007\112\010\141\011\117\013\030\014" +
    "\174\015\135\016\137\017\160\020\155\021\146\022\120" +
    "\023\130\025\167\026\123\033\157\037\114\042\153\046" +
    "\147\061\134\062\165\001\001\000\062\002\163\004\u0140" +
    "\005\150\006\132\007\112\010\141\011\117\013\030\014" +
    "\174\015\135\016\137\017\160\020\155\021\146\022\120" +
    "\023\130\025\167\026\123\033\157\037\114\042\153\046" +
    "\147\061\134\062\165\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


	   	
	public ArrayList<ErrorC> listaErrores = new ArrayList();	
	public ArrayList<Instruccion> ast = new ArrayList<Instruccion>();

	public AST raiz = null;

	/*@Override
	public void syntax_error(Symbol cur_token) 
	{        
		List<Integer> listaIdTokens = expected_token_ids();
		LinkedList<String> listaNombres = new LinkedList<String>();
		for (Integer expected : listaIdTokens) 
		{			
			listaNombres.add(symbl_name_from_id(expected));
		}		
		Utilidades.Singlenton.registrarError(String.valueOf(cur_token.value), 
			String.valueOf(cur_token.value) + ". Se esperaba :"+listaNombres.toString(), ErrorC.TipoError.LEXICO, cur_token.right+1, cur_token.left+1);
		/*listaErrores.add(
					listaErrores.add(new ErrorC(ErrorC.TipoError.SINTACTICO,
								String.valueOf(cur_token.value) + ". Se esperaba :"+listaNombres.toString(),
								cur_token.right+1,
								cur_token.left+1));
                
	}*/


    public void report_error(String message, Object info) 
    {
        int linea = 0;
        int columna = 0;
        java_cup.runtime.Symbol s = null;
        StringBuilder m = new StringBuilder("Error Sintactico");

        if (info instanceof java_cup.runtime.Symbol) 
        {
            s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) 
            {                
                columna = s.left+1;
                if (s.right>= 0)
                {
                    linea = s.right+ 1;
                }                    
            }
        }

        m.append(" Se esperaba: "+message);
        //System.err.println(m.toString());
        //System.out.println("Error");
        //System.out.println("Error linea:"+linea+", col:"+columna);
        LinkedList<String> toks = new LinkedList();

        if(!expected_token_ids().isEmpty())
        {
            Imprimir("No esta vacia "+ expected_token_ids().size());		  
            for(int w=0; w<expected_token_ids().size(); w++)
            { 
                if(expected_token_ids().get(w) !=sym.error)
                {
                    int tok = (int)expected_token_ids().get(w);                        
                    toks.add( symbol_name_from_id(tok) );
                }
            }
        }

        Imprimir(expected_token_ids().size());
      
        for(int w=0; w<expected_token_ids().size(); w++)
        { 
            if(expected_token_ids().get(w)!=sym.error)
            {
                int tok = (int)expected_token_ids().get(w);
                toks.add( symbol_name_from_id(tok) );
            }
        }
        String esperados = "";
        for(String id : toks)
        {
            if(!esperados.equals(""))
            {
                esperados += ", ";
            }
            esperados += id;
            
        }        
        Utilidades.Singlenton.registrarError(s.value.toString(), "Se esperaba .. " +esperados, ErrorC.TipoError.SINTACTICO, linea, columna);		                  
    }	

    public String symbol_name_from_id(int id){
        return sym.terminalNames[id];
    }

	/*public void addError(Symbol s)
	{
		listaErrores.add(new ErrorC("Sintactico",s.rights.right+1,ConvertirObjectToString(s.value)));
	}*/
	public void Imprimir(Object cad)
	{
		System.out.println(cad.toString());
	}	


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= LCLASE 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> lista = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Imprimir("Correcto"); raiz = new AST(lista);; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // LCLASE ::= LCLASE CLASE 
            {
              ArrayList<Nodo> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Nodo> lista = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int claseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int claseright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Clase clase = (Clase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 lista.add(clase); RESULT = lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LCLASE",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LCLASE ::= CLASE 
            {
              ArrayList<Nodo> RESULT =null;
		int claseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int claseright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Clase clase = (Clase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Nodo> l = new ArrayList<Nodo>(); l.add(clase); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LCLASE",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CLASE ::= LMODFICADOR clase id llavei CUERPOCLASE llaved 
            {
              Clase RESULT =null;
		int modificadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int modificadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ArrayList<String> modificador = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int claseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int claseright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Clase clase = (Clase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                clase.setModificadores(modificador); 
                clase.setId(nombre);                
                RESULT = clase;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CLASE",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CLASE ::= LMODFICADOR clase id extiende id llavei CUERPOCLASE llaved 
            {
              Clase RESULT =null;
		int modificadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int modificadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		ArrayList<String> modificador = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int padreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int padreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String padre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int claseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int claseright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Clase clase = (Clase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                clase.setModificadores(modificador); 
                clase.setId(nombre);
                clase.setPadre(padre);
                RESULT = clase;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CLASE",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CUERPOCLASE ::= CUERPO 
            {
              Clase RESULT =null;
		int claseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int claseright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Clase clase = (Clase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = clase;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPOCLASE",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CUERPOCLASE ::= 
            {
              Clase RESULT =null;
		RESULT = new Clase();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPOCLASE",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CUERPO ::= CUERPO FUNCION 
            {
              Clase RESULT =null;
		int claseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int claseright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Clase clase = (Clase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Funcion f = (Funcion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 clase.addFuncion(f); RESULT = clase;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CUERPO ::= FUNCION 
            {
              Clase RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Funcion f = (Funcion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Clase c = new Clase(fright,fleft); c.addFuncion(f); RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // BLOQUE ::= llavei LINST llaved 
            {
              Bloque RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Nodo> l = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Bloque(l,lright,lleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // BLOQUE ::= llavei llaved 
            {
              Bloque RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Bloque(new ArrayList<Nodo>(),lright,lleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LINST ::= LINST INST 
            {
              ArrayList<Nodo> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Nodo> lista = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo inst = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 lista.add(inst); RESULT = lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINST",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // LINST ::= INST 
            {
              ArrayList<Nodo> RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo inst = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Nodo> l = new ArrayList<Nodo>(); l.add(inst); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINST",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INST ::= DECLARACION puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Declaracion inst = (Declaracion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = inst; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INST ::= ASIG puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Asignacion inst = (Asignacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INST ::= BLOQUE 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloque inst = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = inst; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INST ::= PRINT 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Imprimir inst = (Imprimir)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = inst; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INST ::= PRINTABLE 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ImprimirT inst = (ImprimirT)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INST ::= WHILE 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		While inst = (While)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INST ::= DOWHILE 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DoWhile inst = (DoWhile)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INST ::= FOR 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		For inst = (For)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // INST ::= BREAK 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Break inst = (Break)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // INST ::= CONTINUE 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Continuar inst = (Continuar)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // INST ::= IF 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		If inst = (If)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // INST ::= AUMENTO puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion inst = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // INST ::= DECREMENTO puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion inst = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // INST ::= ASIGV puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AsignacionVector inst = (AsignacionVector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // INST ::= FOREACH 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ForEach inst = (ForEach)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // INST ::= SWITCH 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Switch inst = (Switch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // INST ::= RETORNO 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Retorno inst = (Retorno)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // INST ::= LLAMADA puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Llamada inst = (Llamada)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EXPLICITCAST ::= str_ pari EXP pard 
            {
              Expresion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion expresion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new StringCast(expresion, tright, tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPLICITCAST",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EXPLICITCAST ::= todouble pari EXP pard 
            {
              Expresion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion expresion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DoubleCast(expresion, tright, tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPLICITCAST",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EXPLICITCAST ::= tochar pari EXP pard 
            {
              Expresion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion expresion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CharCast(expresion, tright, tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPLICITCAST",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EXPLICITCAST ::= toint pari EXP pard 
            {
              Expresion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion expresion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IntCast(expresion, tright, tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPLICITCAST",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ACTUALIZACION ::= AUMENTO 
            {
              Expresion RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion inst = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZACION",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ACTUALIZACION ::= DECREMENTO 
            {
              Expresion RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion inst = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZACION",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SWITCH ::= switch_ pari EXP pard llavei LCASO llaved 
            {
              Switch RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion condicion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Caso> lista = (ArrayList<Caso>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                RESULT = new Switch(condicion, lista, iright, ileft);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SWITCH",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SWITCH ::= switch_ pari EXP pard llavei LCASO DEFECTO llaved 
            {
              Switch RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expresion condicion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Caso> lista = (ArrayList<Caso>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int defectoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int defectoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Caso defecto = (Caso)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                lista.add(defecto);
                RESULT = new Switch(condicion, lista, iright, ileft);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SWITCH",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // LCASO ::= LCASO CASO 
            {
              ArrayList<Caso> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Caso> l = (ArrayList<Caso>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int casoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int casoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Caso caso = (Caso)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		l.add(caso); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LCASO",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // LCASO ::= CASO 
            {
              ArrayList<Caso> RESULT =null;
		int casoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int casoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Caso caso = (Caso)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<Caso> l = new ArrayList<Caso>(); l.add(caso); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LCASO",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CASO ::= caso EXP dospuntos LINST 
            {
              Caso RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion condicion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int linstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int linstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> linst = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Caso(condicion,new Bloque(linst,linstright,linstleft),iright,ileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASO",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DEFECTO ::= defecto dospuntos LINST 
            {
              Caso RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int linstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int linstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> linst = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Caso(null,new Bloque(linst,linstright,linstleft),iright,ileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFECTO",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // IF ::= si pari EXP pard BLOQUE 
            {
              If RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String si = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion condicion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new If(condicion, bloque, siright, sileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // IF ::= si pari EXP pard BLOQUE sino ELSE 
            {
              If RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String si = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion condicion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int inst2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int inst2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		If inst2 = (If)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new If(condicion,bloque,inst2,siright, sileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ELSE ::= IF 
            {
              If RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		If inst = (If)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ELSE ::= BLOQUE 
            {
              If RESULT =null;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new If(new Literal(new Tipo(Tipo.TypePrimitive.BOOL), true, bloqueright,bloqueleft),bloque, bloqueright, bloqueleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CONTINUE ::= continuar puntocoma 
            {
              Continuar RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String inst = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Continuar(instright, instleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTINUE",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // BREAK ::= romper puntocoma 
            {
              Break RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String inst = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Break(instright, instleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BREAK",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // WHILE ::= mientras pari EXP pard BLOQUE 
            {
              While RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String inst = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion condicion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new While(condicion,bloque,instright, instleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DOWHILE ::= hacer BLOQUE mientras pari EXP pard puntocoma 
            {
              DoWhile RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String inst = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion condicion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
            RESULT = new DoWhile(condicion, bloque, iright, ileft);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DOWHILE",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FOREACH ::= para pari TIPO id dospuntos EXP pard BLOQUE 
            {
              ForEach RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String para = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int origenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int origenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion origen = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ForEach(t,id,origen, bloque, pararight,paraleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOREACH",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // FOR ::= para pari DECLARACION puntocoma EXP puntocoma ACTUALIZACION pard BLOQUE 
            {
              For RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String para = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Declaracion dec = (Declaracion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion condicion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int actleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int actright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion act = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new For(dec,condicion,act,bloque, paraleft,pararight);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // FOR ::= para pari ASIG puntocoma EXP puntocoma ACTUALIZACION pard BLOQUE 
            {
              For RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String para = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Asignacion dec = (Asignacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion condicion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int actleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int actright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion act = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new For(dec,condicion,act,bloque,paraleft,pararight);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // PRINTABLE ::= printable pari pard puntocoma 
            {
              ImprimirT RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		RESULT = new ImprimirT(pright,pleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTABLE",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // PRINT ::= println pari EXP pard puntocoma 
            {
              Imprimir RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion valor = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new Imprimir(valor, pright,pleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINT",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // PRINT ::= print pari EXP pard puntocoma 
            {
              Imprimir RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion valor = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new Imprimir(valor,false,pright,pleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINT",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ASIG ::= id igual EXP 
            {
              Asignacion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion valor = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Asignacion(id, valor, idright,idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIG",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ASIGV ::= id LEXP igual EXP 
            {
              AsignacionVector RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int coordenasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int coordenasright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Expresion> coordenas = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion valor = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AsignacionVector(id, coordenas, valor,  idright,idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGV",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DECLARACION ::= TIPO LDEC 
            {
              Declaracion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Dec> lista = (ArrayList<Dec>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Declaracion(t, lista, tright, tleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // LDEC ::= LDEC coma DEC 
            {
              ArrayList<Dec> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Dec> lista = (ArrayList<Dec>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 lista.add(dec); RESULT = lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LDEC",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // LDEC ::= DEC 
            {
              ArrayList<Dec> RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Dec> lista = new ArrayList<Dec>(); lista.add(dec); RESULT = lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LDEC",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DEC ::= id 
            {
              Dec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Dec(id,idright, idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEC",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DEC ::= id igual EXP 
            {
              Dec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion valor = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Dec(id,valor, idright, idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEC",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DEC ::= id NDIM 
            {
              Dec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer dim = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Dec(id,dim, idright, idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEC",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DEC ::= id NDIM igual EXP 
            {
              Dec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer dim = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion valor = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Dec(id,dim, valor, idright, idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEC",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DEC ::= id NDIM igual ARR 
            {
              Dec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer dim = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoNario valor = (NodoNario)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Dec(id,dim, new ExpresionArreglo(valor, valorright, valorleft), idright, idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEC",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // TIPO ::= PRIMITIVO 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = t;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // TIPO ::= id 
            {
              Tipo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Tipo(id,idright, idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // NDIM ::= NDIM corchetei corcheted 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = n+1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NDIM",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NDIM ::= corchetei corcheted 
            {
              Integer RESULT =null;
		 RESULT = 1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NDIM",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXP ::= EXP and EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new And(opi, opd, opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EXP ::= EXP or EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Or(opi, opd, opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXP ::= not EXP 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Not(op, opright,opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXP ::= EXP igualigual EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Igual(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXP ::= EXP desigual EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Desigual(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXP ::= EXP mayor EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Mayor(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXP ::= EXP mayorigual EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new MayorIgual(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXP ::= EXP menor EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Menor(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXP ::= EXP menorigual EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new MenorIgual(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXP ::= EXP suma EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Suma(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXP ::= EXP menos EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Resta(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXP ::= EXP xor EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Xor(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXP ::= EXP multi EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Multiplicacion(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXP ::= EXP div EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Division(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXP ::= EXP modulo EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Modulo(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXP ::= TER 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Ternario op = (Ternario)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = op;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXP ::= menos EXP 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Menos(op, opright,opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXP ::= AUMENTO 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = op;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXP ::= potencia pari EXP coma EXP pard 
            {
              Expresion RESULT =null;
		int potleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int potright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String pot = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Potencia(opi,opd,potright,potleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXP ::= EXP instanceof_ id 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new InstanceOf(op,tipo, opright, opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXP ::= DECREMENTO 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = op;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXP ::= EXP punto tostring pari pard 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		RESULT = new ToString(op,opright,opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXP ::= EXP punto tolower pari pard 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		RESULT = new ToLower(op,opright,opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXP ::= EXP punto id 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int atribleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int atribright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String atrib = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Acceso(op,atrib, opright,opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EXP ::= EXP punto touper pari pard 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		RESULT = new ToUper(op,opright,opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // EXP ::= pari PRIMITIVO pard EXP 
            {
              Expresion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Casteo(op,tipo, tright, tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // EXP ::= pari id pard EXP 
            {
              Expresion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Casteo(op,tipo, tright, tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EXP ::= entero 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		int v = (int)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Tipo.TypePrimitive.INT), v, vright,vleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // EXP ::= decimal 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		double v = (double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Tipo.TypePrimitive.DOUBLE), v, vright,vleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // EXP ::= booleano 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		boolean v = (boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Tipo.TypePrimitive.BOOL), v, vright,vleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // EXP ::= cadena 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Tipo.TypePrimitive.STRING), v, vright,vleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // EXP ::= caracter 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		char v = (char)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Tipo.TypePrimitive.CHAR), v, vright,vleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // EXP ::= id 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Variable(v, vright,vleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // EXP ::= nuevo PRIMITIVO LEXP 
            {
              Expresion RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expresion> l = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExpresionArreglo(tipo,l,nright,nleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // EXP ::= nuevo id LEXP 
            {
              Expresion RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expresion> l = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExpresionArreglo(new Tipo(tipo), l,nright,nleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // EXP ::= pari EXP pard 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = op;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // EXP ::= EXP LEXP 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion id = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int coorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int coorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expresion> coor = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AccesoVector(id, coor , idright, idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // EXP ::= EXPLICITCAST 
            {
              Expresion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = exp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // EXP ::= LLAMADA 
            {
              Expresion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Llamada exp = (Llamada)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = exp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // LLAMADA ::= EXP punto id pari PARACTUALES pard 
            {
              Llamada RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Expresion> l = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Llamada(op,t,l, opright,opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADA",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // LLAMADA ::= id pari PARACTUALES pard 
            {
              Llamada RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Expresion> l = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Llamada(null,t,l, tright,tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADA",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // RETORNO ::= retorno EXPRETORNO puntocoma 
            {
              Retorno RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Retorno(exp, rright, rleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETORNO",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // PARACTUALES ::= ACTUALES 
            {
              ArrayList<Expresion> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expresion> l = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARACTUALES",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // PARACTUALES ::= 
            {
              ArrayList<Expresion> RESULT =null;
		RESULT = new ArrayList<Expresion>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARACTUALES",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // ACTUALES ::= ACTUALES coma EXP 
            {
              ArrayList<Expresion> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Expresion> l = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		l.add(exp);RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALES",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // ACTUALES ::= EXP 
            {
              ArrayList<Expresion> RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<Expresion> l = new ArrayList<Expresion>(); l.add(exp); RESULT = l ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALES",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // EXPRETORNO ::= EXP 
            {
              Expresion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = exp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRETORNO",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // EXPRETORNO ::= nulo 
            {
              Expresion RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Literal(new Tipo(Tipo.TypePrimitive.NULO), null, rright, rleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRETORNO",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // FUNCION ::= CABECERAMET BLOQUE 
            {
              Funcion RESULT =null;
		int funcionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int funcionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Funcion funcion = (Funcion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 funcion.setInstrucciones(bloque); RESULT = funcion;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // FUNCION ::= CABECERAMET puntocoma 
            {
              Funcion RESULT =null;
		int funcionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int funcionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Funcion funcion = (Funcion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = funcion;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // CABECERAMET ::= LMODFICADOR RESULTADO id pari LPARFORMAL pard 
            {
              Funcion RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ArrayList<String> m = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int resleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int resright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Tipo res = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<ParametroFormal> lf = (ArrayList<ParametroFormal>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 Funcion f = new Funcion(m,res,nombre, lf, mright,mleft ); RESULT = f;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CABECERAMET",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // CABECERAMET ::= RESULTADO id pari LPARFORMAL pard 
            {
              Funcion RESULT =null;
		int resleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int resright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Tipo res = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<ParametroFormal> lf = (ArrayList<ParametroFormal>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 Funcion f = new Funcion( new ArrayList<String>(),res,nombre, lf, resright,resleft ); RESULT = f;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CABECERAMET",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // CABECERAMET ::= LMODFICADOR id pari LPARFORMAL pard 
            {
              Funcion RESULT =null;
		int modificadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int modificadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<String> modificador = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int formalesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int formalesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<ParametroFormal> formales = (ArrayList<ParametroFormal>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Constructor(modificador,nombre,formales,nombreright,nombreleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CABECERAMET",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // CABECERAMET ::= id pari LPARFORMAL pard 
            {
              Funcion RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int formalesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int formalesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<ParametroFormal> formales = (ArrayList<ParametroFormal>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Constructor(new ArrayList<String>(),nombre,formales, nombreright,nombreleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CABECERAMET",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // RESULTADO ::= TIPO 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = t;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RESULTADO",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // RESULTADO ::= tvoid 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Tipo(t);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RESULTADO",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // LPARFORMAL ::= LPARFORMAL coma PARFORMAL 
            {
              ArrayList<ParametroFormal> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<ParametroFormal> lista = (ArrayList<ParametroFormal>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParametroFormal par = (ParametroFormal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		lista.add(par); RESULT = lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LPARFORMAL",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // LPARFORMAL ::= PARFORMAL 
            {
              ArrayList<ParametroFormal> RESULT =null;
		int parleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParametroFormal par = (ParametroFormal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<ParametroFormal> l = new ArrayList<ParametroFormal>(); l.add(par); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LPARFORMAL",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // LPARFORMAL ::= 
            {
              ArrayList<ParametroFormal> RESULT =null;
		 ArrayList<ParametroFormal> l = new ArrayList<ParametroFormal>();RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LPARFORMAL",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // PARFORMAL ::= TIPO id 
            {
              ParametroFormal RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ParametroFormal(tipo, nombre, true,0, tiporight, tipoleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARFORMAL",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // PARFORMAL ::= final_ TIPO id 
            {
              ParametroFormal RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ParametroFormal(tipo, nombre, true,0,fright, fleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARFORMAL",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // PARFORMAL ::= TIPO id NDIM 
            {
              ParametroFormal RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ParametroFormal(tipo, nombre, true,n, tiporight, tipoleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARFORMAL",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // PARFORMAL ::= final_ TIPO id NDIM 
            {
              ParametroFormal RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ParametroFormal(tipo, nombre, true, n, fright, fleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARFORMAL",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // LMODFICADOR ::= LMODFICADOR MODFUNCION 
            {
              ArrayList<String> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> l = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.add(m); RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LMODFICADOR",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // LMODFICADOR ::= MODFUNCION 
            {
              ArrayList<String> RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<String> l = new ArrayList<String>() ; if(m!=null){l.add(m);} RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LMODFICADOR",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // MODFUNCION ::= MODATRIB 
            {
              String RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = m;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MODFUNCION",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // MODFUNCION ::= abstracto 
            {
              String RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = m;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MODFUNCION",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // LDECATRIB ::= LDECATRIB DECATRIB 
            {
              ArrayList<Nodo> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Nodo> l = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DeclaracionAtributo dec = (DeclaracionAtributo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.add(dec); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LDECATRIB",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // LDECATRIB ::= DECATRIB 
            {
              ArrayList<Nodo> RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DeclaracionAtributo dec = (DeclaracionAtributo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<Nodo> l = new ArrayList<Nodo>(); l.add(dec); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LDECATRIB",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // LMODATRIB ::= LMODATRIB MODATRIB 
            {
              ArrayList<String> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> lista = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int modleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int modright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String mod = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		lista.add(mod); RESULT = lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LMODATRIB",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // LMODATRIB ::= MODATRIB 
            {
              ArrayList<String> RESULT =null;
		int modleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int modright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String mod = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<String> l = new ArrayList<String>(); l.add(mod); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LMODATRIB",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // MODATRIB ::= final_ 
            {
              String RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = m;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MODATRIB",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // MODATRIB ::= estatico 
            {
              String RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = m;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MODATRIB",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // MODATRIB ::= MODCONST 
            {
              String RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = m;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MODATRIB",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // MODCONST ::= publico 
            {
              String RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = m;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MODCONST",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // MODCONST ::= protegido 
            {
              String RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = m;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MODCONST",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // MODCONST ::= privado 
            {
              String RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = m;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MODCONST",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // LEXP ::= LEXP corchetei EXP corcheted 
            {
              ArrayList<Expresion> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<Expresion> l = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		l.add(exp); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LEXP",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // LEXP ::= corchetei EXP corcheted 
            {
              ArrayList<Expresion> RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 ArrayList<Expresion> l = new ArrayList<Expresion>(); l.add(exp); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LEXP",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // ARR ::= llavei LITEM llaved 
            {
              NodoNario RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoNario nodo = (NodoNario)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = nodo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARR",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // LITEM ::= LITEM coma ITEM 
            {
              NodoNario RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoNario nodo = (NodoNario)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int itemleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int itemright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoNario item = (NodoNario)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 nodo.addHijo(item); RESULT = nodo; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LITEM",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // LITEM ::= ITEM 
            {
              NodoNario RESULT =null;
		int itemleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int itemright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoNario item = (NodoNario)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 NodoNario nodo = new NodoNario(); nodo.addHijo(item); RESULT = nodo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LITEM",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // ITEM ::= EXP 
            {
              NodoNario RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NodoNario(exp);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ITEM",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // ITEM ::= ARR 
            {
              NodoNario RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoNario exp = (NodoNario)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = exp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ITEM",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // AUMENTO ::= EXP aumento 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Aumento(op, opright, opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AUMENTO",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // AUMENTO ::= aumento EXP 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Preaumento(op, opright, opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AUMENTO",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // DECREMENTO ::= EXP decremento 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Decremento(op, opright, opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECREMENTO",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // DECREMENTO ::= decremento EXP 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Predecremento(op, opright, opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECREMENTO",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // TER ::= EXP interrogante EXP dospuntos EXP 
            {
              Ternario RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion v = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion f = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Ternario(c,v,f,cright,cleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TER",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // PRIMITIVO ::= tint 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Tipo(Tipo.TypePrimitive.INT,tright, tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // PRIMITIVO ::= tchar 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =  new Tipo(Tipo.TypePrimitive.CHAR,tright, tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // PRIMITIVO ::= tdouble 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Tipo(Tipo.TypePrimitive.DOUBLE,tright, tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // PRIMITIVO ::= tbool 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Tipo(Tipo.TypePrimitive.BOOL,tright, tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // PRIMITIVO ::= tstring 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Tipo(Tipo.TypePrimitive.STRING,tright, tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
