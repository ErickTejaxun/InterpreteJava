
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analisis;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import AST.*;
import Utilidades.ErrorC;
import AST.Instruccion.*;
import AST.Exp.*;
import AST.Ent.*;
import AST.Exp.Aritmetica.*;
import AST.Exp.Relacional.*;
import AST.Exp.Logica.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\112\000\002\002\004\000\002\011\003\000\002\002" +
    "\005\000\002\003\004\000\002\003\003\000\002\004\004" +
    "\000\002\004\004\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\004\000\002\004\004\000\002\025\003\000\002\025\003" +
    "\000\002\021\007\000\002\021\011\000\002\022\003\000" +
    "\002\022\003\000\002\020\004\000\002\017\004\000\002" +
    "\016\007\000\002\024\013\000\002\024\013\000\002\014" +
    "\006\000\002\013\007\000\002\015\005\000\002\005\004" +
    "\000\002\005\006\000\002\006\005\000\002\006\005\000" +
    "\002\006\004\000\002\006\005\000\002\006\005\000\002" +
    "\006\005\000\002\006\005\000\002\006\005\000\002\006" +
    "\005\000\002\006\005\000\002\006\005\000\002\006\005" +
    "\000\002\006\005\000\002\006\005\000\002\006\005\000" +
    "\002\006\003\000\002\006\004\000\002\006\005\000\002" +
    "\006\003\000\002\006\003\000\002\006\007\000\002\006" +
    "\007\000\002\006\007\000\002\006\007\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\007\004\000\002" +
    "\007\004\000\002\010\004\000\002\010\004\000\002\023" +
    "\007\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\227\000\004\012\005\001\002\000\004\002\000\001" +
    "\002\000\062\004\022\005\052\006\057\007\020\010\036" +
    "\012\005\014\025\016\042\022\050\063\024\064\034\065" +
    "\012\066\010\071\032\072\044\074\045\077\023\106\031" +
    "\112\014\114\056\115\021\116\037\117\054\120\047\001" +
    "\002\000\004\002\007\001\002\000\004\002\001\001\002" +
    "\000\004\011\231\001\002\000\050\011\230\023\uffce\024" +
    "\uffce\025\uffce\026\uffce\027\uffce\030\uffce\067\uffce\071\uffce" +
    "\072\uffce\073\uffce\075\uffce\076\uffce\105\uffce\106\uffce\107" +
    "\uffce\110\uffce\111\uffce\113\uffce\001\002\000\004\011\227" +
    "\001\002\000\004\016\224\001\002\000\004\014\221\001" +
    "\002\000\064\004\022\005\052\006\057\007\020\010\036" +
    "\012\005\013\217\014\025\016\042\022\050\063\024\064" +
    "\034\065\012\066\010\071\032\072\044\074\045\077\023" +
    "\106\031\112\014\114\056\115\021\116\037\117\054\120" +
    "\047\001\002\000\064\004\ufff4\005\ufff4\006\ufff4\007\ufff4" +
    "\010\ufff4\012\ufff4\013\ufff4\014\ufff4\016\ufff4\022\ufff4\063" +
    "\ufff4\064\ufff4\065\ufff4\066\ufff4\071\ufff4\072\ufff4\074\ufff4" +
    "\077\ufff4\106\ufff4\112\ufff4\114\ufff4\115\ufff4\116\ufff4\117" +
    "\ufff4\120\ufff4\001\002\000\064\004\ufff6\005\ufff6\006\ufff6" +
    "\007\ufff6\010\ufff6\012\ufff6\013\ufff6\014\ufff6\016\ufff6\022" +
    "\ufff6\063\ufff6\064\ufff6\065\ufff6\066\ufff6\071\ufff6\072\ufff6" +
    "\074\ufff6\077\ufff6\106\ufff6\112\ufff6\114\ufff6\115\ufff6\116" +
    "\ufff6\117\ufff6\120\ufff6\001\002\000\004\016\uffba\001\002" +
    "\000\054\011\uffc4\015\uffc4\023\uffc4\024\uffc4\025\uffc4\026" +
    "\uffc4\027\uffc4\030\uffc4\067\uffc4\070\uffc4\071\uffc4\072\uffc4" +
    "\073\uffc4\075\uffc4\076\uffc4\105\uffc4\106\uffc4\107\uffc4\110" +
    "\uffc4\111\uffc4\113\uffc4\001\002\000\004\016\uffbd\001\002" +
    "\000\004\014\207\001\002\000\004\014\203\001\002\000" +
    "\030\014\025\016\062\071\032\072\044\074\045\106\031" +
    "\114\056\115\021\116\037\117\054\120\047\001\002\000" +
    "\064\004\ufff3\005\ufff3\006\ufff3\007\ufff3\010\ufff3\012\ufff3" +
    "\013\ufff3\014\ufff3\016\ufff3\022\ufff3\063\ufff3\064\ufff3\065" +
    "\ufff3\066\ufff3\071\ufff3\072\ufff3\074\ufff3\077\ufff3\106\ufff3" +
    "\112\ufff3\114\ufff3\115\ufff3\116\ufff3\117\ufff3\120\ufff3\001" +
    "\002\000\046\023\105\024\077\025\107\026\072\027\065" +
    "\030\074\067\076\071\070\072\101\073\073\075\106\076" +
    "\067\105\104\106\071\107\100\110\075\111\102\113\103" +
    "\001\002\000\064\004\ufff8\005\ufff8\006\ufff8\007\ufff8\010" +
    "\ufff8\012\ufff8\013\ufff8\014\ufff8\016\ufff8\022\ufff8\063\ufff8" +
    "\064\ufff8\065\ufff8\066\ufff8\071\ufff8\072\ufff8\074\ufff8\077" +
    "\ufff8\106\ufff8\112\ufff8\114\ufff8\115\ufff8\116\ufff8\117\ufff8" +
    "\120\ufff8\001\002\000\030\014\025\016\062\071\032\072" +
    "\044\074\045\106\031\114\056\115\021\116\037\117\054" +
    "\120\047\001\002\000\030\014\025\016\062\071\032\072" +
    "\044\074\045\106\031\114\056\115\021\116\037\117\054" +
    "\120\047\001\002\000\004\011\176\001\002\000\004\014" +
    "\154\001\002\000\050\011\153\023\uffcd\024\uffcd\025\uffcd" +
    "\026\uffcd\027\uffcd\030\uffcd\067\uffcd\071\uffcd\072\uffcd\073" +
    "\uffcd\075\uffcd\076\uffcd\105\uffcd\106\uffcd\107\uffcd\110\uffcd" +
    "\111\uffcd\113\uffcd\001\002\000\004\016\uffb9\001\002\000" +
    "\054\011\uffc8\015\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8" +
    "\027\uffc8\030\uffc8\067\uffc8\070\uffc8\071\uffc8\072\uffc8\073" +
    "\uffc8\075\uffc8\076\uffc8\105\uffc8\106\uffc8\107\uffc8\110\uffc8" +
    "\111\uffc8\113\uffc8\001\002\000\064\004\ufff5\005\ufff5\006" +
    "\ufff5\007\ufff5\010\ufff5\012\ufff5\013\ufff5\014\ufff5\016\ufff5" +
    "\022\ufff5\063\ufff5\064\ufff5\065\ufff5\066\ufff5\071\ufff5\072" +
    "\ufff5\074\ufff5\077\ufff5\106\ufff5\112\ufff5\114\ufff5\115\ufff5" +
    "\116\ufff5\117\ufff5\120\ufff5\001\002\000\004\011\152\001" +
    "\002\000\052\016\uffb8\021\150\023\uffc3\024\uffc3\025\uffc3" +
    "\026\uffc3\027\uffc3\030\uffc3\067\uffc3\071\uffc3\072\uffc3\073" +
    "\uffc3\075\uffc3\076\uffc3\105\uffc3\106\uffc3\107\uffc3\110\uffc3" +
    "\111\uffc3\113\uffc3\001\002\000\064\004\ufff7\005\ufff7\006" +
    "\ufff7\007\ufff7\010\ufff7\012\ufff7\013\ufff7\014\ufff7\016\ufff7" +
    "\022\ufff7\063\ufff7\064\ufff7\065\ufff7\066\ufff7\071\ufff7\072" +
    "\ufff7\074\ufff7\077\ufff7\106\ufff7\112\ufff7\114\ufff7\115\ufff7" +
    "\116\ufff7\117\ufff7\120\ufff7\001\002\000\030\014\025\016" +
    "\062\071\032\072\044\074\045\106\031\114\056\115\021" +
    "\116\037\117\054\120\047\001\002\000\030\014\025\016" +
    "\062\071\032\072\044\074\045\106\031\114\056\115\021" +
    "\116\037\117\054\120\047\001\002\000\064\004\ufffa\005" +
    "\ufffa\006\ufffa\007\ufffa\010\ufffa\012\ufffa\013\ufffa\014\ufffa" +
    "\016\ufffa\022\ufffa\063\ufffa\064\ufffa\065\ufffa\066\ufffa\071" +
    "\ufffa\072\ufffa\074\ufffa\077\ufffa\106\ufffa\112\ufffa\114\ufffa" +
    "\115\ufffa\116\ufffa\117\ufffa\120\ufffa\001\002\000\054\011" +
    "\uffc6\015\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6" +
    "\030\uffc6\067\uffc6\070\uffc6\071\uffc6\072\uffc6\073\uffc6\075" +
    "\uffc6\076\uffc6\105\uffc6\106\uffc6\107\uffc6\110\uffc6\111\uffc6" +
    "\113\uffc6\001\002\000\004\014\060\001\002\000\054\011" +
    "\uffd1\015\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1" +
    "\030\uffd1\067\uffd1\070\uffd1\071\uffd1\072\uffd1\073\uffd1\075" +
    "\uffd1\076\uffd1\105\uffd1\106\uffd1\107\uffd1\110\uffd1\111\uffd1" +
    "\113\uffd1\001\002\000\004\016\uffbb\001\002\000\064\004" +
    "\ufffd\005\ufffd\006\ufffd\007\ufffd\010\ufffd\012\ufffd\013\ufffd" +
    "\014\ufffd\016\ufffd\022\ufffd\063\ufffd\064\ufffd\065\ufffd\066" +
    "\ufffd\071\ufffd\072\ufffd\074\ufffd\077\ufffd\106\ufffd\112\ufffd" +
    "\114\ufffd\115\ufffd\116\ufffd\117\ufffd\120\ufffd\001\002\000" +
    "\054\011\uffc7\015\uffc7\023\uffc7\024\uffc7\025\uffc7\026\uffc7" +
    "\027\uffc7\030\uffc7\067\uffc7\070\uffc7\071\uffc7\072\uffc7\073" +
    "\uffc7\075\uffc7\076\uffc7\105\uffc7\106\uffc7\107\uffc7\110\uffc7" +
    "\111\uffc7\113\uffc7\001\002\000\064\004\ufff9\005\ufff9\006" +
    "\ufff9\007\ufff9\010\ufff9\012\ufff9\013\ufff9\014\ufff9\016\ufff9" +
    "\022\ufff9\063\ufff9\064\ufff9\065\ufff9\066\ufff9\071\ufff9\072" +
    "\ufff9\074\ufff9\077\ufff9\106\ufff9\112\ufff9\114\ufff9\115\ufff9" +
    "\116\ufff9\117\ufff9\120\ufff9\001\002\000\054\011\uffc5\015" +
    "\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5\027\uffc5\030\uffc5" +
    "\067\uffc5\070\uffc5\071\uffc5\072\uffc5\073\uffc5\075\uffc5\076" +
    "\uffc5\105\uffc5\106\uffc5\107\uffc5\110\uffc5\111\uffc5\113\uffc5" +
    "\001\002\000\004\016\uffbc\001\002\000\030\014\025\016" +
    "\062\071\032\072\044\074\045\106\031\114\056\115\021" +
    "\116\037\117\054\120\047\001\002\000\054\011\uffce\015" +
    "\uffce\023\uffce\024\uffce\025\uffce\026\uffce\027\uffce\030\uffce" +
    "\067\uffce\070\uffce\071\uffce\072\uffce\073\uffce\075\uffce\076" +
    "\uffce\105\uffce\106\uffce\107\uffce\110\uffce\111\uffce\113\uffce" +
    "\001\002\000\054\011\uffc3\015\uffc3\023\uffc3\024\uffc3\025" +
    "\uffc3\026\uffc3\027\uffc3\030\uffc3\067\uffc3\070\uffc3\071\uffc3" +
    "\072\uffc3\073\uffc3\075\uffc3\076\uffc3\105\uffc3\106\uffc3\107" +
    "\uffc3\110\uffc3\111\uffc3\113\uffc3\001\002\000\054\011\uffcd" +
    "\015\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd\030" +
    "\uffcd\067\uffcd\070\uffcd\071\uffcd\072\uffcd\073\uffcd\075\uffcd" +
    "\076\uffcd\105\uffcd\106\uffcd\107\uffcd\110\uffcd\111\uffcd\113" +
    "\uffcd\001\002\000\050\015\066\023\105\024\077\025\107" +
    "\026\072\027\065\030\074\067\076\071\070\072\101\073" +
    "\073\075\106\076\067\105\104\106\071\107\100\110\075" +
    "\111\102\113\103\001\002\000\030\014\025\016\062\071" +
    "\032\072\044\074\045\106\031\114\056\115\021\116\037" +
    "\117\054\120\047\001\002\000\004\011\144\001\002\000" +
    "\030\014\025\016\062\071\032\072\044\074\045\106\031" +
    "\114\056\115\021\116\037\117\054\120\047\001\002\000" +
    "\054\011\uffc2\015\uffc2\023\uffc2\024\uffc2\025\uffc2\026\uffc2" +
    "\027\uffc2\030\uffc2\067\uffc2\070\uffc2\071\uffc2\072\uffc2\073" +
    "\uffc2\075\uffc2\076\uffc2\105\uffc2\106\uffc2\107\uffc2\110\uffc2" +
    "\111\uffc2\113\uffc2\001\002\000\030\014\025\016\062\071" +
    "\032\072\044\074\045\106\031\114\056\115\021\116\037" +
    "\117\054\120\047\001\002\000\030\014\025\016\062\071" +
    "\032\072\044\074\045\106\031\114\056\115\021\116\037" +
    "\117\054\120\047\001\002\000\012\016\130\102\127\103" +
    "\125\104\126\001\002\000\030\014\025\016\062\071\032" +
    "\072\044\074\045\106\031\114\056\115\021\116\037\117" +
    "\054\120\047\001\002\000\030\014\025\016\062\071\032" +
    "\072\044\074\045\106\031\114\056\115\021\116\037\117" +
    "\054\120\047\001\002\000\030\014\025\016\062\071\032" +
    "\072\044\074\045\106\031\114\056\115\021\116\037\117" +
    "\054\120\047\001\002\000\030\014\025\016\062\071\032" +
    "\072\044\074\045\106\031\114\056\115\021\116\037\117" +
    "\054\120\047\001\002\000\030\014\025\016\062\071\032" +
    "\072\044\074\045\106\031\114\056\115\021\116\037\117" +
    "\054\120\047\001\002\000\054\011\uffc0\015\uffc0\023\uffc0" +
    "\024\uffc0\025\uffc0\026\uffc0\027\uffc0\030\uffc0\067\uffc0\070" +
    "\uffc0\071\uffc0\072\uffc0\073\uffc0\075\uffc0\076\uffc0\105\uffc0" +
    "\106\uffc0\107\uffc0\110\uffc0\111\uffc0\113\uffc0\001\002\000" +
    "\030\014\025\016\062\071\032\072\044\074\045\106\031" +
    "\114\056\115\021\116\037\117\054\120\047\001\002\000" +
    "\030\014\025\016\062\071\032\072\044\074\045\106\031" +
    "\114\056\115\021\116\037\117\054\120\047\001\002\000" +
    "\030\014\025\016\062\071\032\072\044\074\045\106\031" +
    "\114\056\115\021\116\037\117\054\120\047\001\002\000" +
    "\030\014\025\016\062\071\032\072\044\074\045\106\031" +
    "\114\056\115\021\116\037\117\054\120\047\001\002\000" +
    "\030\014\025\016\062\071\032\072\044\074\045\106\031" +
    "\114\056\115\021\116\037\117\054\120\047\001\002\000" +
    "\030\014\025\016\062\071\032\072\044\074\045\106\031" +
    "\114\056\115\021\116\037\117\054\120\047\001\002\000" +
    "\054\011\uffdb\015\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb" +
    "\027\uffdb\030\uffdb\067\uffdb\070\uffdb\071\070\072\101\073" +
    "\uffdb\075\uffdb\076\uffdb\105\104\106\071\107\100\110\075" +
    "\111\uffdb\113\103\001\002\000\054\011\uffe0\015\uffe0\023" +
    "\105\024\077\025\107\026\072\027\065\030\074\067\uffe0" +
    "\070\uffe0\071\070\072\101\073\uffe0\075\uffe0\076\uffe0\105" +
    "\104\106\071\107\100\110\075\111\102\113\103\001\002" +
    "\000\054\011\uffdd\015\uffdd\023\uffdd\024\uffdd\025\107\026" +
    "\072\027\065\030\074\067\uffdd\070\uffdd\071\070\072\101" +
    "\073\uffdd\075\uffdd\076\uffdd\105\104\106\071\107\100\110" +
    "\075\111\uffdd\113\103\001\002\000\054\011\uffd7\015\uffd7" +
    "\023\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7\067" +
    "\uffd7\070\uffd7\071\070\072\101\073\uffd7\075\uffd7\076\uffd7" +
    "\105\uffd7\106\uffd7\107\100\110\075\111\uffd7\113\103\001" +
    "\002\000\054\011\uffd2\015\uffd2\023\uffd2\024\uffd2\025\uffd2" +
    "\026\uffd2\027\uffd2\030\uffd2\067\uffd2\070\uffd2\071\070\072" +
    "\101\073\uffd2\075\uffd2\076\uffd2\105\uffd2\106\uffd2\107\uffd2" +
    "\110\uffd2\111\uffd2\113\uffd2\001\002\000\054\011\uffd5\015" +
    "\uffd5\023\105\024\077\025\107\026\072\027\065\030\074" +
    "\067\uffd5\070\uffd5\071\070\072\101\073\uffd5\075\uffd5\076" +
    "\uffd5\105\104\106\071\107\100\110\075\111\uffd5\113\103" +
    "\001\002\000\054\011\uffd4\015\uffd4\023\uffd4\024\uffd4\025" +
    "\uffd4\026\uffd4\027\uffd4\030\uffd4\067\uffd4\070\uffd4\071\070" +
    "\072\101\073\uffd4\075\uffd4\076\uffd4\105\uffd4\106\uffd4\107" +
    "\uffd4\110\uffd4\111\uffd4\113\uffd4\001\002\000\054\011\uffdc" +
    "\015\uffdc\023\uffdc\024\uffdc\025\107\026\072\027\065\030" +
    "\074\067\uffdc\070\uffdc\071\070\072\101\073\uffdc\075\uffdc" +
    "\076\uffdc\105\104\106\071\107\100\110\075\111\uffdc\113" +
    "\103\001\002\000\050\023\105\024\077\025\107\026\072" +
    "\027\065\030\074\067\076\070\121\071\070\072\101\073" +
    "\073\075\106\076\067\105\104\106\071\107\100\110\075" +
    "\111\102\113\103\001\002\000\030\014\025\016\062\071" +
    "\032\072\044\074\045\106\031\114\056\115\021\116\037" +
    "\117\054\120\047\001\002\000\054\011\uffbe\015\uffbe\023" +
    "\105\024\077\025\107\026\072\027\065\030\074\067\076" +
    "\070\uffbe\071\070\072\101\073\073\075\106\076\067\105" +
    "\104\106\071\107\100\110\075\111\102\113\103\001\002" +
    "\000\054\011\uffd3\015\uffd3\023\uffd3\024\uffd3\025\uffd3\026" +
    "\uffd3\027\uffd3\030\uffd3\067\uffd3\070\uffd3\071\070\072\101" +
    "\073\uffd3\075\uffd3\076\uffd3\105\uffd3\106\uffd3\107\uffd3\110" +
    "\uffd3\111\uffd3\113\uffd3\001\002\000\054\011\uffda\015\uffda" +
    "\023\uffda\024\uffda\025\uffda\026\uffda\027\uffda\030\uffda\067" +
    "\uffda\070\uffda\071\070\072\101\073\uffda\075\uffda\076\uffda" +
    "\105\104\106\071\107\100\110\075\111\uffda\113\103\001" +
    "\002\000\004\014\137\001\002\000\004\014\135\001\002" +
    "\000\004\014\133\001\002\000\004\014\131\001\002\000" +
    "\004\015\132\001\002\000\054\011\uffcc\015\uffcc\023\uffcc" +
    "\024\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc\067\uffcc\070" +
    "\uffcc\071\uffcc\072\uffcc\073\uffcc\075\uffcc\076\uffcc\105\uffcc" +
    "\106\uffcc\107\uffcc\110\uffcc\111\uffcc\113\uffcc\001\002\000" +
    "\004\015\134\001\002\000\054\011\uffcb\015\uffcb\023\uffcb" +
    "\024\uffcb\025\uffcb\026\uffcb\027\uffcb\030\uffcb\067\uffcb\070" +
    "\uffcb\071\uffcb\072\uffcb\073\uffcb\075\uffcb\076\uffcb\105\uffcb" +
    "\106\uffcb\107\uffcb\110\uffcb\111\uffcb\113\uffcb\001\002\000" +
    "\004\015\136\001\002\000\054\011\uffc9\015\uffc9\023\uffc9" +
    "\024\uffc9\025\uffc9\026\uffc9\027\uffc9\030\uffc9\067\uffc9\070" +
    "\uffc9\071\uffc9\072\uffc9\073\uffc9\075\uffc9\076\uffc9\105\uffc9" +
    "\106\uffc9\107\uffc9\110\uffc9\111\uffc9\113\uffc9\001\002\000" +
    "\004\015\140\001\002\000\054\011\uffca\015\uffca\023\uffca" +
    "\024\uffca\025\uffca\026\uffca\027\uffca\030\uffca\067\uffca\070" +
    "\uffca\071\uffca\072\uffca\073\uffca\075\uffca\076\uffca\105\uffca" +
    "\106\uffca\107\uffca\110\uffca\111\uffca\113\uffca\001\002\000" +
    "\054\011\uffd9\015\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9" +
    "\027\uffd9\030\uffd9\067\uffd9\070\uffd9\071\070\072\101\073" +
    "\uffd9\075\uffd9\076\uffd9\105\104\106\071\107\100\110\075" +
    "\111\uffd9\113\103\001\002\000\054\011\uffd6\015\uffd6\023" +
    "\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6\067\uffd6" +
    "\070\uffd6\071\070\072\101\073\uffd6\075\uffd6\076\uffd6\105" +
    "\uffd6\106\uffd6\107\100\110\075\111\uffd6\113\103\001\002" +
    "\000\054\011\uffdf\015\uffdf\023\105\024\077\025\107\026" +
    "\072\027\065\030\074\067\uffdf\070\uffdf\071\070\072\101" +
    "\073\uffdf\075\106\076\uffdf\105\104\106\071\107\100\110" +
    "\075\111\102\113\103\001\002\000\064\004\uffe4\005\uffe4" +
    "\006\uffe4\007\uffe4\010\uffe4\012\uffe4\013\uffe4\014\uffe4\016" +
    "\uffe4\022\uffe4\063\uffe4\064\uffe4\065\uffe4\066\uffe4\071\uffe4" +
    "\072\uffe4\074\uffe4\077\uffe4\106\uffe4\112\uffe4\114\uffe4\115" +
    "\uffe4\116\uffe4\117\uffe4\120\uffe4\001\002\000\054\011\uffd8" +
    "\015\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030" +
    "\uffd8\067\uffd8\070\uffd8\071\070\072\101\073\uffd8\075\uffd8" +
    "\076\uffd8\105\104\106\071\107\100\110\075\111\uffd8\113" +
    "\103\001\002\000\054\011\uffde\015\uffde\023\uffde\024\uffde" +
    "\025\uffde\026\uffde\027\uffde\030\uffde\067\uffde\070\uffde\071" +
    "\070\072\101\073\uffde\075\uffde\076\uffde\105\uffde\106\uffde" +
    "\107\uffde\110\uffde\111\uffde\113\uffde\001\002\000\054\011" +
    "\uffbf\015\uffbf\023\uffbf\024\uffbf\025\uffbf\026\uffbf\027\uffbf" +
    "\030\uffbf\067\uffbf\070\uffbf\071\070\072\101\073\uffbf\075" +
    "\uffbf\076\uffbf\105\uffbf\106\uffbf\107\uffbf\110\uffbf\111\uffbf" +
    "\113\uffbf\001\002\000\030\014\025\016\062\071\032\072" +
    "\044\074\045\106\031\114\056\115\021\116\037\117\054" +
    "\120\047\001\002\000\050\011\uffe3\023\105\024\077\025" +
    "\107\026\072\027\065\030\074\067\076\071\070\072\101" +
    "\073\073\075\106\076\067\105\104\106\071\107\100\110" +
    "\075\111\102\113\103\001\002\000\064\004\ufffc\005\ufffc" +
    "\006\ufffc\007\ufffc\010\ufffc\012\ufffc\013\ufffc\014\ufffc\016" +
    "\ufffc\022\ufffc\063\ufffc\064\ufffc\065\ufffc\066\ufffc\071\ufffc" +
    "\072\ufffc\074\ufffc\077\ufffc\106\ufffc\112\ufffc\114\ufffc\115" +
    "\ufffc\116\ufffc\117\ufffc\120\ufffc\001\002\000\064\004\ufff1" +
    "\005\ufff1\006\ufff1\007\ufff1\010\ufff1\012\ufff1\013\ufff1\014" +
    "\ufff1\016\ufff1\022\ufff1\063\ufff1\064\ufff1\065\ufff1\066\ufff1" +
    "\071\ufff1\072\ufff1\074\ufff1\077\ufff1\106\ufff1\112\ufff1\114" +
    "\ufff1\115\ufff1\116\ufff1\117\ufff1\120\ufff1\001\002\000\016" +
    "\004\022\005\052\006\057\007\020\010\036\016\155\001" +
    "\002\000\006\016\uffb8\021\150\001\002\000\004\011\170" +
    "\001\002\000\004\011\160\001\002\000\030\014\025\016" +
    "\062\071\032\072\044\074\045\106\031\114\056\115\021" +
    "\116\037\117\054\120\047\001\002\000\050\011\162\023" +
    "\105\024\077\025\107\026\072\027\065\030\074\067\076" +
    "\071\070\072\101\073\073\075\106\076\067\105\104\106" +
    "\071\107\100\110\075\111\102\113\103\001\002\000\030" +
    "\014\025\016\062\071\032\072\044\074\045\106\031\114" +
    "\056\115\021\116\037\117\054\120\047\001\002\000\050" +
    "\015\ufff0\023\uffce\024\uffce\025\uffce\026\uffce\027\uffce\030" +
    "\uffce\067\uffce\071\uffce\072\uffce\073\uffce\075\uffce\076\uffce" +
    "\105\uffce\106\uffce\107\uffce\110\uffce\111\uffce\113\uffce\001" +
    "\002\000\004\015\166\001\002\000\050\015\uffef\023\uffcd" +
    "\024\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd\067\uffcd\071" +
    "\uffcd\072\uffcd\073\uffcd\075\uffcd\076\uffcd\105\uffcd\106\uffcd" +
    "\107\uffcd\110\uffcd\111\uffcd\113\uffcd\001\002\000\004\012" +
    "\005\001\002\000\064\004\uffe6\005\uffe6\006\uffe6\007\uffe6" +
    "\010\uffe6\012\uffe6\013\uffe6\014\uffe6\016\uffe6\022\uffe6\063" +
    "\uffe6\064\uffe6\065\uffe6\066\uffe6\071\uffe6\072\uffe6\074\uffe6" +
    "\077\uffe6\106\uffe6\112\uffe6\114\uffe6\115\uffe6\116\uffe6\117" +
    "\uffe6\120\uffe6\001\002\000\030\014\025\016\062\071\032" +
    "\072\044\074\045\106\031\114\056\115\021\116\037\117" +
    "\054\120\047\001\002\000\050\011\172\023\105\024\077" +
    "\025\107\026\072\027\065\030\074\067\076\071\070\072" +
    "\101\073\073\075\106\076\067\105\104\106\071\107\100" +
    "\110\075\111\102\113\103\001\002\000\030\014\025\016" +
    "\062\071\032\072\044\074\045\106\031\114\056\115\021" +
    "\116\037\117\054\120\047\001\002\000\004\015\174\001" +
    "\002\000\004\012\005\001\002\000\064\004\uffe7\005\uffe7" +
    "\006\uffe7\007\uffe7\010\uffe7\012\uffe7\013\uffe7\014\uffe7\016" +
    "\uffe7\022\uffe7\063\uffe7\064\uffe7\065\uffe7\066\uffe7\071\uffe7" +
    "\072\uffe7\074\uffe7\077\uffe7\106\uffe7\112\uffe7\114\uffe7\115" +
    "\uffe7\116\uffe7\117\uffe7\120\uffe7\001\002\000\064\004\ufffb" +
    "\005\ufffb\006\ufffb\007\ufffb\010\ufffb\012\ufffb\013\ufffb\014" +
    "\ufffb\016\ufffb\022\ufffb\063\ufffb\064\ufffb\065\ufffb\066\ufffb" +
    "\071\ufffb\072\ufffb\074\ufffb\077\ufffb\106\ufffb\112\ufffb\114" +
    "\ufffb\115\ufffb\116\ufffb\117\ufffb\120\ufffb\001\002\000\054" +
    "\011\uffc1\015\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1\027" +
    "\uffc1\030\uffc1\067\uffc1\070\uffc1\071\070\072\101\073\uffc1" +
    "\075\uffc1\076\uffc1\105\uffc1\106\uffc1\107\uffc1\110\uffc1\111" +
    "\uffc1\113\uffc1\001\002\000\054\011\uffd0\015\uffd0\023\uffd0" +
    "\024\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0\067\uffd0\070" +
    "\uffd0\071\070\072\101\073\uffd0\075\uffd0\076\uffd0\105\uffd0" +
    "\106\uffd0\107\100\110\075\111\uffd0\113\103\001\002\000" +
    "\050\015\202\023\105\024\077\025\107\026\072\027\065" +
    "\030\074\067\076\071\070\072\101\073\073\075\106\076" +
    "\067\105\104\106\071\107\100\110\075\111\102\113\103" +
    "\001\002\000\054\011\uffcf\015\uffcf\023\uffcf\024\uffcf\025" +
    "\uffcf\026\uffcf\027\uffcf\030\uffcf\067\uffcf\070\uffcf\071\uffcf" +
    "\072\uffcf\073\uffcf\075\uffcf\076\uffcf\105\uffcf\106\uffcf\107" +
    "\uffcf\110\uffcf\111\uffcf\113\uffcf\001\002\000\030\014\025" +
    "\016\062\071\032\072\044\074\045\106\031\114\056\115" +
    "\021\116\037\117\054\120\047\001\002\000\050\015\205" +
    "\023\105\024\077\025\107\026\072\027\065\030\074\067" +
    "\076\071\070\072\101\073\073\075\106\076\067\105\104" +
    "\106\071\107\100\110\075\111\102\113\103\001\002\000" +
    "\004\012\005\001\002\000\064\004\uffe8\005\uffe8\006\uffe8" +
    "\007\uffe8\010\uffe8\012\uffe8\013\uffe8\014\uffe8\016\uffe8\022" +
    "\uffe8\063\uffe8\064\uffe8\065\uffe8\066\uffe8\071\uffe8\072\uffe8" +
    "\074\uffe8\077\uffe8\106\uffe8\112\uffe8\114\uffe8\115\uffe8\116" +
    "\uffe8\117\uffe8\120\uffe8\001\002\000\030\014\025\016\062" +
    "\071\032\072\044\074\045\106\031\114\056\115\021\116" +
    "\037\117\054\120\047\001\002\000\050\015\211\023\105" +
    "\024\077\025\107\026\072\027\065\030\074\067\076\071" +
    "\070\072\101\073\073\075\106\076\067\105\104\106\071" +
    "\107\100\110\075\111\102\113\103\001\002\000\004\012" +
    "\005\001\002\000\066\004\uffee\005\uffee\006\uffee\007\uffee" +
    "\010\uffee\012\uffee\013\uffee\014\uffee\016\uffee\022\uffee\063" +
    "\uffee\064\uffee\065\uffee\066\uffee\071\uffee\072\uffee\074\uffee" +
    "\077\uffee\101\213\106\uffee\112\uffee\114\uffee\115\uffee\116" +
    "\uffee\117\uffee\120\uffee\001\002\000\006\012\005\077\023" +
    "\001\002\000\064\004\uffed\005\uffed\006\uffed\007\uffed\010" +
    "\uffed\012\uffed\013\uffed\014\uffed\016\uffed\022\uffed\063\uffed" +
    "\064\uffed\065\uffed\066\uffed\071\uffed\072\uffed\074\uffed\077" +
    "\uffed\106\uffed\112\uffed\114\uffed\115\uffed\116\uffed\117\uffed" +
    "\120\uffed\001\002\000\064\004\uffeb\005\uffeb\006\uffeb\007" +
    "\uffeb\010\uffeb\012\uffeb\013\uffeb\014\uffeb\016\uffeb\022\uffeb" +
    "\063\uffeb\064\uffeb\065\uffeb\066\uffeb\071\uffeb\072\uffeb\074" +
    "\uffeb\077\uffeb\106\uffeb\112\uffeb\114\uffeb\115\uffeb\116\uffeb" +
    "\117\uffeb\120\uffeb\001\002\000\064\004\uffec\005\uffec\006" +
    "\uffec\007\uffec\010\uffec\012\uffec\013\uffec\014\uffec\016\uffec" +
    "\022\uffec\063\uffec\064\uffec\065\uffec\066\uffec\071\uffec\072" +
    "\uffec\074\uffec\077\uffec\106\uffec\112\uffec\114\uffec\115\uffec" +
    "\116\uffec\117\uffec\120\uffec\001\002\000\070\002\uffff\004" +
    "\uffff\005\uffff\006\uffff\007\uffff\010\uffff\012\uffff\013\uffff" +
    "\014\uffff\016\uffff\022\uffff\063\uffff\064\uffff\065\uffff\066" +
    "\uffff\071\uffff\072\uffff\074\uffff\077\uffff\101\uffff\106\uffff" +
    "\112\uffff\114\uffff\115\uffff\116\uffff\117\uffff\120\uffff\001" +
    "\002\000\064\004\ufffe\005\ufffe\006\ufffe\007\ufffe\010\ufffe" +
    "\012\ufffe\013\ufffe\014\ufffe\016\ufffe\022\ufffe\063\ufffe\064" +
    "\ufffe\065\ufffe\066\ufffe\071\ufffe\072\ufffe\074\ufffe\077\ufffe" +
    "\106\ufffe\112\ufffe\114\ufffe\115\ufffe\116\ufffe\117\ufffe\120" +
    "\ufffe\001\002\000\004\015\222\001\002\000\004\011\223" +
    "\001\002\000\064\004\uffe5\005\uffe5\006\uffe5\007\uffe5\010" +
    "\uffe5\012\uffe5\013\uffe5\014\uffe5\016\uffe5\022\uffe5\063\uffe5" +
    "\064\uffe5\065\uffe5\066\uffe5\071\uffe5\072\uffe5\074\uffe5\077" +
    "\uffe5\106\uffe5\112\uffe5\114\uffe5\115\uffe5\116\uffe5\117\uffe5" +
    "\120\uffe5\001\002\000\006\011\uffe2\021\225\001\002\000" +
    "\030\014\025\016\062\071\032\072\044\074\045\106\031" +
    "\114\056\115\021\116\037\117\054\120\047\001\002\000" +
    "\050\011\uffe1\023\105\024\077\025\107\026\072\027\065" +
    "\030\074\067\076\071\070\072\101\073\073\075\106\076" +
    "\067\105\104\106\071\107\100\110\075\111\102\113\103" +
    "\001\002\000\064\004\uffe9\005\uffe9\006\uffe9\007\uffe9\010" +
    "\uffe9\012\uffe9\013\uffe9\014\uffe9\016\uffe9\022\uffe9\063\uffe9" +
    "\064\uffe9\065\uffe9\066\uffe9\071\uffe9\072\uffe9\074\uffe9\077" +
    "\uffe9\106\uffe9\112\uffe9\114\uffe9\115\uffe9\116\uffe9\117\uffe9" +
    "\120\uffe9\001\002\000\064\004\ufff2\005\ufff2\006\ufff2\007" +
    "\ufff2\010\ufff2\012\ufff2\013\ufff2\014\ufff2\016\ufff2\022\ufff2" +
    "\063\ufff2\064\ufff2\065\ufff2\066\ufff2\071\ufff2\072\ufff2\074" +
    "\ufff2\077\ufff2\106\ufff2\112\ufff2\114\ufff2\115\ufff2\116\ufff2" +
    "\117\ufff2\120\ufff2\001\002\000\064\004\uffea\005\uffea\006" +
    "\uffea\007\uffea\010\uffea\012\uffea\013\uffea\014\uffea\016\uffea" +
    "\022\uffea\063\uffea\064\uffea\065\uffea\066\uffea\071\uffea\072" +
    "\uffea\074\uffea\077\uffea\106\uffea\112\uffea\114\uffea\115\uffea" +
    "\116\uffea\117\uffea\120\uffea\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\227\000\006\002\003\011\005\001\001\000\002\001" +
    "\001\000\044\002\045\003\014\004\052\005\040\006\026" +
    "\007\010\010\034\012\012\013\054\014\027\015\032\016" +
    "\042\017\037\020\015\021\025\023\050\024\016\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\002\045\004\217\005\040\006\026\007" +
    "\010\010\034\012\012\013\054\014\027\015\032\016\042" +
    "\017\037\020\015\021\025\023\050\024\016\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\006\200\007\060\010\062\023\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\006\177\007\060\010\062\023\050\001\001\000\012" +
    "\006\176\007\060\010\062\023\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\006\146\007\060" +
    "\010\062\023\050\001\001\000\012\006\145\007\060\010" +
    "\062\023\050\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\006\063\007\060\010" +
    "\062\023\050\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\006\144\007" +
    "\060\010\062\023\050\001\001\000\002\001\001\000\012" +
    "\006\142\007\060\010\062\023\050\001\001\000\002\001" +
    "\001\000\012\006\141\007\060\010\062\023\050\001\001" +
    "\000\012\006\140\007\060\010\062\023\050\001\001\000" +
    "\002\001\001\000\012\006\123\007\060\010\062\023\050" +
    "\001\001\000\012\006\122\007\060\010\062\023\050\001" +
    "\001\000\012\006\117\007\060\010\062\023\050\001\001" +
    "\000\012\006\116\007\060\010\062\023\050\001\001\000" +
    "\012\006\115\007\060\010\062\023\050\001\001\000\002" +
    "\001\001\000\012\006\114\007\060\010\062\023\050\001" +
    "\001\000\012\006\113\007\060\010\062\023\050\001\001" +
    "\000\012\006\112\007\060\010\062\023\050\001\001\000" +
    "\012\006\111\007\060\010\062\023\050\001\001\000\012" +
    "\006\110\007\060\010\062\023\050\001\001\000\012\006" +
    "\107\007\060\010\062\023\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\006\121\007\060\010" +
    "\062\023\050\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\006\150\007\060\010\062\023\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\005\155\012\012\015\156\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\006\160" +
    "\007\060\010\062\023\050\001\001\000\002\001\001\000" +
    "\014\006\026\007\162\010\164\023\050\025\163\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\002\166\001\001\000\002\001\001\000\012\006\170" +
    "\007\060\010\062\023\050\001\001\000\002\001\001\000" +
    "\014\006\026\007\162\010\164\023\050\025\172\001\001" +
    "\000\002\001\001\000\004\002\174\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\006\203\007" +
    "\060\010\062\023\050\001\001\000\002\001\001\000\004" +
    "\002\205\001\001\000\002\001\001\000\012\006\207\007" +
    "\060\010\062\023\050\001\001\000\002\001\001\000\004" +
    "\002\211\001\001\000\002\001\001\000\010\002\214\021" +
    "\215\022\213\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\006\225\007\060\010\062\023\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


	   	
	public ArrayList<ErrorC> listaErrores = new ArrayList();	
	public ArrayList<Instruccion> ast = new ArrayList<Instruccion>();

	public Instruccion raiz = null;

	/*@Override
	public void syntax_error(Symbol cur_token) 
	{        
		List<Integer> listaIdTokens = expected_token_ids();
		LinkedList<String> listaNombres = new LinkedList<String>();
		for (Integer expected : listaIdTokens) 
		{			
			listaNombres.add(symbl_name_from_id(expected));
		}		
		Utilidades.Singlenton.registrarError(String.valueOf(cur_token.value), 
			String.valueOf(cur_token.value) + ". Se esperaba :"+listaNombres.toString(), ErrorC.TipoError.LEXICO, cur_token.right+1, cur_token.left+1);
		/*listaErrores.add(
					listaErrores.add(new ErrorC(ErrorC.TipoError.SINTACTICO,
								String.valueOf(cur_token.value) + ". Se esperaba :"+listaNombres.toString(),
								cur_token.right+1,
								cur_token.left+1));
                
	}*/


    public void report_error(String message, Object info) 
    {
        int linea = 0;
        int columna = 0;
        java_cup.runtime.Symbol s = null;
        StringBuilder m = new StringBuilder("Error Sintactico");

        if (info instanceof java_cup.runtime.Symbol) 
        {
            s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) 
            {                
                columna = s.left+1;
                if (s.right>= 0)
                {
                    linea = s.right+ 1;
                }                    
            }
        }

        m.append(" Se esperaba: "+message);
        //System.err.println(m.toString());
        //System.out.println("Error");
        //System.out.println("Error linea:"+linea+", col:"+columna);
        LinkedList<String> toks = new LinkedList();

        if(!expected_token_ids().isEmpty())
        {
            Imprimir("No esta vacia "+ expected_token_ids().size());		  
            for(int w=0; w<expected_token_ids().size(); w++)
            { 
                if(expected_token_ids().get(w) !=sym.error)
                {
                    int tok = (int)expected_token_ids().get(w);                        
                    toks.add( symbol_name_from_id(tok) );
                }
            }
        }

        Imprimir(expected_token_ids().size());
      
        for(int w=0; w<expected_token_ids().size(); w++)
        { 
            if(expected_token_ids().get(w)!=sym.error)
            {
                int tok = (int)expected_token_ids().get(w);
                toks.add( symbol_name_from_id(tok) );
            }
        }
        String esperados = "";
        for(String id : toks)
        {
            if(!esperados.equals(""))
            {
                esperados += ", ";
            }
            esperados += id;
            
        }        
        Utilidades.Singlenton.registrarError(s.value.toString(), "Se esperaba .. " +esperados, ErrorC.TipoError.SINTACTICO, linea, columna);		                  
    }	

    public String symbol_name_from_id(int id){
        return sym.terminalNames[id];
    }

	/*public void addError(Symbol s)
	{
		listaErrores.add(new ErrorC("Sintactico",s.rights.right+1,ConvertirObjectToString(s.value)));
	}*/
	public void Imprimir(Object cad)
	{
		System.out.println(cad.toString());
	}	


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= BLOQUE 
            {
              Object RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloque inst = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Imprimir("Correcto"); raiz = inst; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // BLOQUE ::= llavei LINST llaved 
            {
              Bloque RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Nodo> l = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Bloque(l,lright,lleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LINST ::= LINST INST 
            {
              ArrayList<Nodo> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Nodo> lista = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo inst = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 lista.add(inst); RESULT = lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINST",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LINST ::= INST 
            {
              ArrayList<Nodo> RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo inst = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Nodo> l = new ArrayList<Nodo>(); l.add(inst); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINST",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INST ::= DECLARACION puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Declaracion inst = (Declaracion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = inst; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INST ::= ASIG puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Asignacion inst = (Asignacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INST ::= BLOQUE 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloque inst = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = inst; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INST ::= PRINT 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Imprimir inst = (Imprimir)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = inst; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INST ::= PRINTABLE 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ImprimirT inst = (ImprimirT)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INST ::= WHILE 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		While inst = (While)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INST ::= FOR 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		For inst = (For)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INST ::= BREAK 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Break inst = (Break)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INST ::= CONTINUE 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Continuar inst = (Continuar)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INST ::= IF 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		If inst = (If)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INST ::= AUMENTO puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion inst = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INST ::= DECREMENTO puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion inst = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ACTUALIZACION ::= AUMENTO 
            {
              Expresion RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion inst = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZACION",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ACTUALIZACION ::= DECREMENTO 
            {
              Expresion RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion inst = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZACION",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // IF ::= si pari EXP pard BLOQUE 
            {
              If RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String si = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion condicion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new If(condicion, bloque, siright, sileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // IF ::= si pari EXP pard BLOQUE sino ELSE 
            {
              If RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String si = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion condicion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int inst2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int inst2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		If inst2 = (If)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new If(condicion,bloque,inst2,siright, sileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ELSE ::= IF 
            {
              If RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		If inst = (If)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ELSE ::= BLOQUE 
            {
              If RESULT =null;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new If(new Literal(new Tipo(Tipo.TypePrimitive.BOOL), true, bloqueright,bloqueleft),bloque, bloqueright, bloqueleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CONTINUE ::= continuar puntocoma 
            {
              Continuar RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String inst = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Continuar(instright, instleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTINUE",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // BREAK ::= romper puntocoma 
            {
              Break RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String inst = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Break(instright, instleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BREAK",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // WHILE ::= mientras pari EXP pard BLOQUE 
            {
              While RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String inst = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion condicion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new While(condicion,bloque,instright, instleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // FOR ::= para pari DECLARACION puntocoma EXP puntocoma ACTUALIZACION pard BLOQUE 
            {
              For RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String para = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Declaracion dec = (Declaracion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion condicion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int actleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int actright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion act = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new For(dec,condicion,act,bloque, paraleft,pararight);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // FOR ::= para pari ASIG puntocoma EXP puntocoma ACTUALIZACION pard BLOQUE 
            {
              For RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String para = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Asignacion dec = (Asignacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion condicion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int actleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int actright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion act = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new For(dec,condicion,act,bloque,paraleft,pararight);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // PRINTABLE ::= printable pari pard puntocoma 
            {
              ImprimirT RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		RESULT = new ImprimirT(pright,pleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTABLE",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // PRINT ::= print pari EXP pard puntocoma 
            {
              Imprimir RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion valor = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new Imprimir(valor, pright,pleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINT",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ASIG ::= id igual EXP 
            {
              Asignacion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion valor = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Asignacion(id, valor, idright,idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIG",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACION ::= TIPO id 
            {
              Declaracion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Declaracion(t, id , tright,tleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACION ::= TIPO id igual EXP 
            {
              Declaracion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion valor = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Declaracion(t, id, valor, tright,tleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EXP ::= EXP and EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new And(opi, opd, opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EXP ::= EXP or EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Or(opi, opd, opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EXP ::= not EXP 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Not(op, opright,opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EXP ::= EXP igualigual EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Igual(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXP ::= EXP desigual EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Desigual(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXP ::= EXP mayor EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Mayor(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXP ::= EXP mayorigual EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new MayorIgual(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXP ::= EXP menor EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Menor(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXP ::= EXP menorigual EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new MenorIgual(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXP ::= EXP suma EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Suma(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXP ::= EXP menos EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Resta(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXP ::= EXP xor EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Xor(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXP ::= EXP multi EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Multiplicacion(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXP ::= EXP div EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Division(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXP ::= EXP modulo EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Modulo(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXP ::= TER 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Ternario op = (Ternario)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = op;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXP ::= menos EXP 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Menos(op, opright,opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXP ::= pari EXP pard 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = op;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXP ::= AUMENTO 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = op;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXP ::= DECREMENTO 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = op;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXP ::= EXP punto id pari pard 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new Llamada(op,t, opright,opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXP ::= EXP punto tostring pari pard 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		RESULT = new ToString(op,opright,opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXP ::= EXP punto tolower pari pard 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		RESULT = new ToLower(op,opright,opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXP ::= EXP punto touper pari pard 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		RESULT = new ToUper(op,opright,opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXP ::= entero 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		int v = (int)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Tipo.TypePrimitive.INT), v, vright,vleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXP ::= decimal 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		double v = (double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Tipo.TypePrimitive.DOUBLE), v, vright,vleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXP ::= booleano 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		boolean v = (boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Tipo.TypePrimitive.BOOL), v, vright,vleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXP ::= cadena 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Tipo.TypePrimitive.STRING), v, vright,vleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXP ::= caracter 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		char v = (char)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Tipo.TypePrimitive.CHAR), v, vright,vleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXP ::= id 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Variable(v, vright,vleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // AUMENTO ::= EXP aumento 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Aumento(op, opright, opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AUMENTO",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // AUMENTO ::= aumento EXP 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Aumento(op, opright, opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AUMENTO",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DECREMENTO ::= EXP decremento 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Decremento(op, opright, opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECREMENTO",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DECREMENTO ::= decremento EXP 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Decremento(op, opright, opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECREMENTO",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // TER ::= EXP interrogante EXP dospuntos EXP 
            {
              Ternario RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion v = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion f = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Ternario(c,v,f,cright,cleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TER",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // TIPO ::= tint 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Tipo(Tipo.TypePrimitive.INT);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // TIPO ::= tchar 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =  new Tipo(Tipo.TypePrimitive.CHAR);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // TIPO ::= tdouble 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Tipo(Tipo.TypePrimitive.DOUBLE);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // TIPO ::= tbool 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Tipo(Tipo.TypePrimitive.BOOL);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // TIPO ::= tstring 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Tipo(Tipo.TypePrimitive.STRING);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // TIPO ::= id 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Tipo(Tipo.TypePrimitive.OBJETO,t);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
