
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analisis;

import AST.Expresion.Aritmetica.Preaumento;
import AST.Expresion.Aritmetica.Modulo;
import AST.Expresion.Aritmetica.Division;
import AST.Expresion.Aritmetica.Potencia;
import AST.Expresion.Aritmetica.Suma;
import AST.Expresion.Aritmetica.Decremento;
import AST.Expresion.Aritmetica.Predecremento;
import AST.Expresion.Aritmetica.Resta;
import AST.Expresion.Aritmetica.Multiplicacion;
import AST.Expresion.Aritmetica.Menos;
import AST.Expresion.Aritmetica.Aumento;
import AST.Expresion.Arreglo.AccesoVector;
import AST.Expresion.Arreglo.ExpresionArreglo;
import AST.Expresion.Arreglo.NodoNario;
import AST.Expresion.Casteo.Casteo;
import AST.Expresion.Casteo.ToUper;
import AST.Expresion.Casteo.ToLower;
import AST.Expresion.Casteo.ToString;
import AST.Expresion.Logica.Xor;
import AST.Expresion.Logica.Or;
import AST.Expresion.Logica.And;
import AST.Expresion.Logica.Not;
import AST.Expresion.Relacional.MenorIgual;
import AST.Expresion.Relacional.Desigual;
import AST.Expresion.Relacional.MayorIgual;
import AST.Expresion.Relacional.InstanceOf;
import AST.Expresion.Relacional.Menor;
import AST.Expresion.Relacional.Igual;
import AST.Expresion.Relacional.Mayor;
import AST.Expresion.Expresion;
import AST.Expresion.Ternario;
import AST.Expresion.Literal;
import AST.Expresion.Llamada;
import AST.Expresion.Variable;
import AST.Entorno.Tipo;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import AST.*;
import Utilidades.ErrorC;
import AST.Instruccion.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\147\000\002\002\004\000\002\011\003\000\002\002" +
    "\005\000\002\002\004\000\002\003\004\000\002\003\003" +
    "\000\002\004\004\000\002\004\004\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\004\000\002\004\004" +
    "\000\002\004\004\000\002\026\003\000\002\026\003\000" +
    "\002\022\007\000\002\022\011\000\002\023\003\000\002" +
    "\023\003\000\002\021\004\000\002\020\004\000\002\016" +
    "\007\000\002\017\011\000\002\025\013\000\002\025\013" +
    "\000\002\014\006\000\002\013\007\000\002\013\007\000" +
    "\002\015\005\000\002\031\006\000\002\005\004\000\002" +
    "\005\006\000\002\005\006\000\002\005\004\000\002\005" +
    "\005\000\002\005\007\000\002\005\005\000\002\005\007" +
    "\000\002\005\007\000\002\027\005\000\002\027\004\000" +
    "\002\006\005\000\002\006\005\000\002\006\004\000\002" +
    "\006\005\000\002\006\005\000\002\006\005\000\002\006" +
    "\005\000\002\006\005\000\002\006\005\000\002\006\005" +
    "\000\002\006\005\000\002\006\005\000\002\006\005\000" +
    "\002\006\005\000\002\006\005\000\002\006\003\000\002" +
    "\006\004\000\002\006\003\000\002\006\010\000\002\006" +
    "\005\000\002\006\003\000\002\006\007\000\002\006\007" +
    "\000\002\006\007\000\002\006\005\000\002\006\007\000" +
    "\002\006\006\000\002\006\006\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\005\000\002\006\005" +
    "\000\002\006\005\000\002\006\004\000\002\030\006\000" +
    "\002\030\005\000\002\034\005\000\002\033\005\000\002" +
    "\033\003\000\002\032\003\000\002\032\003\000\002\007" +
    "\004\000\002\007\004\000\002\010\004\000\002\010\004" +
    "\000\002\024\007\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\332\000\004\012\005\001\002\000\004\002\000\001" +
    "\002\000\074\004\023\005\061\006\066\007\020\010\037" +
    "\012\005\013\022\014\027\016\045\022\057\023\046\033" +
    "\044\042\050\050\040\067\025\070\035\071\012\072\010" +
    "\075\033\076\054\100\053\103\024\112\031\116\014\120" +
    "\065\121\021\122\041\123\062\124\055\001\002\000\004" +
    "\002\007\001\002\000\004\002\001\001\002\000\004\011" +
    "\334\001\002\000\054\011\333\017\uffc0\025\uffc0\026\uffc0" +
    "\027\uffc0\030\uffc0\031\uffc0\032\uffc0\047\uffc0\073\uffc0\075" +
    "\uffc0\076\uffc0\077\uffc0\101\uffc0\102\uffc0\111\uffc0\112\uffc0" +
    "\113\uffc0\114\uffc0\115\uffc0\117\uffc0\001\002\000\004\011" +
    "\332\001\002\000\004\016\323\001\002\000\004\014\320" +
    "\001\002\000\074\004\023\005\061\006\066\007\020\010" +
    "\037\012\005\013\316\014\027\016\045\022\057\023\046" +
    "\033\044\042\050\050\040\067\025\070\035\071\012\072" +
    "\010\075\033\076\054\100\053\103\024\112\031\116\014" +
    "\120\065\121\021\122\041\123\062\124\055\001\002\000" +
    "\074\004\ufff2\005\ufff2\006\ufff2\007\ufff2\010\ufff2\012\ufff2" +
    "\013\ufff2\014\ufff2\016\ufff2\022\ufff2\023\ufff2\033\ufff2\042" +
    "\ufff2\050\ufff2\067\ufff2\070\ufff2\071\ufff2\072\ufff2\075\ufff2" +
    "\076\ufff2\100\ufff2\103\ufff2\112\ufff2\116\ufff2\120\ufff2\121" +
    "\ufff2\122\ufff2\123\ufff2\124\ufff2\001\002\000\074\004\ufff4" +
    "\005\ufff4\006\ufff4\007\ufff4\010\ufff4\012\ufff4\013\ufff4\014" +
    "\ufff4\016\ufff4\022\ufff4\023\ufff4\033\ufff4\042\ufff4\050\ufff4" +
    "\067\ufff4\070\ufff4\071\ufff4\072\ufff4\075\ufff4\076\ufff4\100" +
    "\ufff4\103\ufff4\112\ufff4\116\ufff4\120\ufff4\121\ufff4\122\ufff4" +
    "\123\ufff4\124\ufff4\001\002\000\010\015\uff9c\016\uff9c\017" +
    "\uff9c\001\002\000\066\011\uffb1\013\uffb1\015\uffb1\017\uffb1" +
    "\020\uffb1\024\uffb1\025\uffb1\026\uffb1\027\uffb1\030\uffb1\031" +
    "\uffb1\032\uffb1\047\uffb1\073\uffb1\074\uffb1\075\uffb1\076\uffb1" +
    "\077\uffb1\101\uffb1\102\uffb1\111\uffb1\112\uffb1\113\uffb1\114" +
    "\uffb1\115\uffb1\117\uffb1\001\002\000\100\002\ufffe\004\ufffe" +
    "\005\ufffe\006\ufffe\007\ufffe\010\ufffe\012\ufffe\013\ufffe\014" +
    "\ufffe\016\ufffe\022\ufffe\023\ufffe\033\ufffe\042\ufffe\050\ufffe" +
    "\067\ufffe\070\ufffe\071\ufffe\072\ufffe\075\ufffe\076\ufffe\100" +
    "\ufffe\103\ufffe\105\ufffe\112\ufffe\116\ufffe\120\ufffe\121\ufffe" +
    "\122\ufffe\123\ufffe\124\ufffe\001\002\000\010\015\uff9f\016" +
    "\uff9f\017\uff9f\001\002\000\004\014\306\001\002\000\004" +
    "\014\302\001\002\000\074\004\ufff1\005\ufff1\006\ufff1\007" +
    "\ufff1\010\ufff1\012\ufff1\013\ufff1\014\ufff1\016\ufff1\022\ufff1" +
    "\023\ufff1\033\ufff1\042\ufff1\050\ufff1\067\ufff1\070\ufff1\071" +
    "\ufff1\072\ufff1\075\ufff1\076\ufff1\100\ufff1\103\ufff1\112\ufff1" +
    "\116\ufff1\120\ufff1\121\ufff1\122\ufff1\123\ufff1\124\ufff1\001" +
    "\002\000\046\004\023\005\061\006\066\007\020\010\037" +
    "\014\027\016\274\033\044\050\040\075\033\076\054\100" +
    "\053\112\031\120\065\121\021\122\041\123\062\124\055" +
    "\001\002\000\052\017\076\025\117\026\107\027\121\030" +
    "\102\031\075\032\104\047\115\073\106\075\100\076\111" +
    "\077\103\101\120\102\077\111\116\112\101\113\110\114" +
    "\105\115\112\117\114\001\002\000\034\014\027\016\071" +
    "\033\044\050\040\075\033\076\054\100\053\112\031\120" +
    "\065\121\021\122\041\123\062\124\055\001\002\000\074" +
    "\004\ufff7\005\ufff7\006\ufff7\007\ufff7\010\ufff7\012\ufff7\013" +
    "\ufff7\014\ufff7\016\ufff7\022\ufff7\023\ufff7\033\ufff7\042\ufff7" +
    "\050\ufff7\067\ufff7\070\ufff7\071\ufff7\072\ufff7\075\ufff7\076" +
    "\ufff7\100\ufff7\103\ufff7\112\ufff7\116\ufff7\120\ufff7\121\ufff7" +
    "\122\ufff7\123\ufff7\124\ufff7\001\002\000\034\014\027\016" +
    "\071\033\044\050\040\075\033\076\054\100\053\112\031" +
    "\120\065\121\021\122\041\123\062\124\055\001\002\000" +
    "\004\011\267\001\002\000\004\014\245\001\002\000\054" +
    "\011\244\017\uffbd\025\uffbd\026\uffbd\027\uffbd\030\uffbd\031" +
    "\uffbd\032\uffbd\047\uffbd\073\uffbd\075\uffbd\076\uffbd\077\uffbd" +
    "\101\uffbd\102\uffbd\111\uffbd\112\uffbd\113\uffbd\114\uffbd\115" +
    "\uffbd\117\uffbd\001\002\000\010\015\uff9b\016\uff9b\017\uff9b" +
    "\001\002\000\016\004\023\005\061\006\066\007\020\010" +
    "\037\016\241\001\002\000\066\011\uffb5\013\uffb5\015\uffb5" +
    "\017\uffb5\020\uffb5\024\uffb5\025\uffb5\026\uffb5\027\uffb5\030" +
    "\uffb5\031\uffb5\032\uffb5\047\uffb5\073\uffb5\074\uffb5\075\uffb5" +
    "\076\uffb5\077\uffb5\101\uffb5\102\uffb5\111\uffb5\112\uffb5\113" +
    "\uffb5\114\uffb5\115\uffb5\117\uffb5\001\002\000\074\004\ufff3" +
    "\005\ufff3\006\ufff3\007\ufff3\010\ufff3\012\ufff3\013\ufff3\014" +
    "\ufff3\016\ufff3\022\ufff3\023\ufff3\033\ufff3\042\ufff3\050\ufff3" +
    "\067\ufff3\070\ufff3\071\ufff3\072\ufff3\075\ufff3\076\ufff3\100" +
    "\ufff3\103\ufff3\112\ufff3\116\ufff3\120\ufff3\121\ufff3\122\ufff3" +
    "\123\ufff3\124\ufff3\001\002\000\004\011\237\001\002\000" +
    "\004\014\232\001\002\000\056\016\205\017\076\021\203" +
    "\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0\047" +
    "\uffb0\073\uffb0\075\uffb0\076\uffb0\077\uffb0\101\uffb0\102\uffb0" +
    "\111\uffb0\112\uffb0\113\uffb0\114\uffb0\115\uffb0\117\uffb0\001" +
    "\002\000\004\014\177\001\002\000\074\004\ufff5\005\ufff5" +
    "\006\ufff5\007\ufff5\010\ufff5\012\ufff5\013\ufff5\014\ufff5\016" +
    "\ufff5\022\ufff5\023\ufff5\033\ufff5\042\ufff5\050\ufff5\067\ufff5" +
    "\070\ufff5\071\ufff5\072\ufff5\075\ufff5\076\ufff5\100\ufff5\103" +
    "\ufff5\112\ufff5\116\ufff5\120\ufff5\121\ufff5\122\ufff5\123\ufff5" +
    "\124\ufff5\001\002\000\004\012\005\001\002\000\004\011" +
    "\170\001\002\000\074\004\ufff6\005\ufff6\006\ufff6\007\ufff6" +
    "\010\ufff6\012\ufff6\013\ufff6\014\ufff6\016\ufff6\022\ufff6\023" +
    "\ufff6\033\ufff6\042\ufff6\050\ufff6\067\ufff6\070\ufff6\071\ufff6" +
    "\072\ufff6\075\ufff6\076\ufff6\100\ufff6\103\ufff6\112\ufff6\116" +
    "\ufff6\120\ufff6\121\ufff6\122\ufff6\123\ufff6\124\ufff6\001\002" +
    "\000\034\014\027\016\071\033\044\050\040\075\033\076" +
    "\054\100\053\112\031\120\065\121\021\122\041\123\062" +
    "\124\055\001\002\000\034\014\027\016\071\033\044\050" +
    "\040\075\033\076\054\100\053\112\031\120\065\121\021" +
    "\122\041\123\062\124\055\001\002\000\066\011\uffb3\013" +
    "\uffb3\015\uffb3\017\uffb3\020\uffb3\024\uffb3\025\uffb3\026\uffb3" +
    "\027\uffb3\030\uffb3\031\uffb3\032\uffb3\047\uffb3\073\uffb3\074" +
    "\uffb3\075\uffb3\076\uffb3\077\uffb3\101\uffb3\102\uffb3\111\uffb3" +
    "\112\uffb3\113\uffb3\114\uffb3\115\uffb3\117\uffb3\001\002\000" +
    "\074\004\ufff9\005\ufff9\006\ufff9\007\ufff9\010\ufff9\012\ufff9" +
    "\013\ufff9\014\ufff9\016\ufff9\022\ufff9\023\ufff9\033\ufff9\042" +
    "\ufff9\050\ufff9\067\ufff9\070\ufff9\071\ufff9\072\ufff9\075\ufff9" +
    "\076\ufff9\100\ufff9\103\ufff9\112\ufff9\116\ufff9\120\ufff9\121" +
    "\ufff9\122\ufff9\123\ufff9\124\ufff9\001\002\000\004\014\067" +
    "\001\002\000\066\011\uffc2\013\uffc2\015\uffc2\017\uffc2\020" +
    "\uffc2\024\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2" +
    "\032\uffc2\047\uffc2\073\uffc2\074\uffc2\075\uffc2\076\uffc2\077" +
    "\uffc2\101\uffc2\102\uffc2\111\uffc2\112\uffc2\113\uffc2\114\uffc2" +
    "\115\uffc2\117\uffc2\001\002\000\010\015\uff9d\016\uff9d\017" +
    "\uff9d\001\002\000\066\011\uffb4\013\uffb4\015\uffb4\017\uffb4" +
    "\020\uffb4\024\uffb4\025\uffb4\026\uffb4\027\uffb4\030\uffb4\031" +
    "\uffb4\032\uffb4\047\uffb4\073\uffb4\074\uffb4\075\uffb4\076\uffb4" +
    "\077\uffb4\101\uffb4\102\uffb4\111\uffb4\112\uffb4\113\uffb4\114" +
    "\uffb4\115\uffb4\117\uffb4\001\002\000\074\004\ufffc\005\ufffc" +
    "\006\ufffc\007\ufffc\010\ufffc\012\ufffc\013\ufffc\014\ufffc\016" +
    "\ufffc\022\ufffc\023\ufffc\033\ufffc\042\ufffc\050\ufffc\067\ufffc" +
    "\070\ufffc\071\ufffc\072\ufffc\075\ufffc\076\ufffc\100\ufffc\103" +
    "\ufffc\112\ufffc\116\ufffc\120\ufffc\121\ufffc\122\ufffc\123\ufffc" +
    "\124\ufffc\001\002\000\074\004\ufff8\005\ufff8\006\ufff8\007" +
    "\ufff8\010\ufff8\012\ufff8\013\ufff8\014\ufff8\016\ufff8\022\ufff8" +
    "\023\ufff8\033\ufff8\042\ufff8\050\ufff8\067\ufff8\070\ufff8\071" +
    "\ufff8\072\ufff8\075\ufff8\076\ufff8\100\ufff8\103\ufff8\112\ufff8" +
    "\116\ufff8\120\ufff8\121\ufff8\122\ufff8\123\ufff8\124\ufff8\001" +
    "\002\000\066\011\uffb2\013\uffb2\015\uffb2\017\uffb2\020\uffb2" +
    "\024\uffb2\025\uffb2\026\uffb2\027\uffb2\030\uffb2\031\uffb2\032" +
    "\uffb2\047\uffb2\073\uffb2\074\uffb2\075\uffb2\076\uffb2\077\uffb2" +
    "\101\uffb2\102\uffb2\111\uffb2\112\uffb2\113\uffb2\114\uffb2\115" +
    "\uffb2\117\uffb2\001\002\000\010\015\uff9e\016\uff9e\017\uff9e" +
    "\001\002\000\034\014\027\016\071\033\044\050\040\075" +
    "\033\076\054\100\053\112\031\120\065\121\021\122\041" +
    "\123\062\124\055\001\002\000\066\011\uffc0\013\uffc0\015" +
    "\uffc0\017\uffc0\020\uffc0\024\uffc0\025\uffc0\026\uffc0\027\uffc0" +
    "\030\uffc0\031\uffc0\032\uffc0\047\uffc0\073\uffc0\074\uffc0\075" +
    "\uffc0\076\uffc0\077\uffc0\101\uffc0\102\uffc0\111\uffc0\112\uffc0" +
    "\113\uffc0\114\uffc0\115\uffc0\117\uffc0\001\002\000\066\011" +
    "\uffb0\013\uffb0\015\uffb0\017\uffb0\020\uffb0\024\uffb0\025\uffb0" +
    "\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0\047\uffb0\073" +
    "\uffb0\074\uffb0\075\uffb0\076\uffb0\077\uffb0\101\uffb0\102\uffb0" +
    "\111\uffb0\112\uffb0\113\uffb0\114\uffb0\115\uffb0\117\uffb0\001" +
    "\002\000\066\011\uffbd\013\uffbd\015\uffbd\017\uffbd\020\uffbd" +
    "\024\uffbd\025\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd\032" +
    "\uffbd\047\uffbd\073\uffbd\074\uffbd\075\uffbd\076\uffbd\077\uffbd" +
    "\101\uffbd\102\uffbd\111\uffbd\112\uffbd\113\uffbd\114\uffbd\115" +
    "\uffbd\117\uffbd\001\002\000\054\015\074\017\076\025\117" +
    "\026\107\027\121\030\102\031\075\032\104\047\115\073" +
    "\106\075\100\076\111\077\103\101\120\102\077\111\116" +
    "\112\101\113\110\114\105\115\112\117\114\001\002\000" +
    "\004\011\165\001\002\000\034\014\027\016\071\033\044" +
    "\050\040\075\033\076\054\100\053\112\031\120\065\121" +
    "\021\122\041\123\062\124\055\001\002\000\034\014\027" +
    "\016\071\033\044\050\040\075\033\076\054\100\053\112" +
    "\031\120\065\121\021\122\041\123\062\124\055\001\002" +
    "\000\034\014\027\016\071\033\044\050\040\075\033\076" +
    "\054\100\053\112\031\120\065\121\021\122\041\123\062" +
    "\124\055\001\002\000\066\011\uffa4\013\uffa4\015\uffa4\017" +
    "\uffa4\020\uffa4\024\uffa4\025\uffa4\026\uffa4\027\uffa4\030\uffa4" +
    "\031\uffa4\032\uffa4\047\uffa4\073\uffa4\074\uffa4\075\uffa4\076" +
    "\uffa4\077\uffa4\101\uffa4\102\uffa4\111\uffa4\112\uffa4\113\uffa4" +
    "\114\uffa4\115\uffa4\117\uffa4\001\002\000\034\014\027\016" +
    "\071\033\044\050\040\075\033\076\054\100\053\112\031" +
    "\120\065\121\021\122\041\123\062\124\055\001\002\000" +
    "\034\014\027\016\071\033\044\050\040\075\033\076\054" +
    "\100\053\112\031\120\065\121\021\122\041\123\062\124" +
    "\055\001\002\000\012\016\146\106\145\107\143\110\144" +
    "\001\002\000\034\014\027\016\071\033\044\050\040\075" +
    "\033\076\054\100\053\112\031\120\065\121\021\122\041" +
    "\123\062\124\055\001\002\000\034\014\027\016\071\033" +
    "\044\050\040\075\033\076\054\100\053\112\031\120\065" +
    "\121\021\122\041\123\062\124\055\001\002\000\034\014" +
    "\027\016\071\033\044\050\040\075\033\076\054\100\053" +
    "\112\031\120\065\121\021\122\041\123\062\124\055\001" +
    "\002\000\034\014\027\016\071\033\044\050\040\075\033" +
    "\076\054\100\053\112\031\120\065\121\021\122\041\123" +
    "\062\124\055\001\002\000\034\014\027\016\071\033\044" +
    "\050\040\075\033\076\054\100\053\112\031\120\065\121" +
    "\021\122\041\123\062\124\055\001\002\000\066\011\uffa2" +
    "\013\uffa2\015\uffa2\017\uffa2\020\uffa2\024\uffa2\025\uffa2\026" +
    "\uffa2\027\uffa2\030\uffa2\031\uffa2\032\uffa2\047\uffa2\073\uffa2" +
    "\074\uffa2\075\uffa2\076\uffa2\077\uffa2\101\uffa2\102\uffa2\111" +
    "\uffa2\112\uffa2\113\uffa2\114\uffa2\115\uffa2\117\uffa2\001\002" +
    "\000\034\014\027\016\071\033\044\050\040\075\033\076" +
    "\054\100\053\112\031\120\065\121\021\122\041\123\062" +
    "\124\055\001\002\000\066\011\uffac\013\uffac\015\uffac\017" +
    "\130\020\uffac\024\uffac\025\uffac\026\uffac\027\uffac\030\uffac" +
    "\031\uffac\032\uffac\047\uffac\073\uffac\074\uffac\075\uffac\076" +
    "\uffac\077\uffac\101\uffac\102\uffac\111\uffac\112\uffac\113\uffac" +
    "\114\uffac\115\uffac\117\uffac\001\002\000\034\014\027\016" +
    "\071\033\044\050\040\075\033\076\054\100\053\112\031" +
    "\120\065\121\021\122\041\123\062\124\055\001\002\000" +
    "\004\016\126\001\002\000\034\014\027\016\071\033\044" +
    "\050\040\075\033\076\054\100\053\112\031\120\065\121" +
    "\021\122\041\123\062\124\055\001\002\000\034\014\027" +
    "\016\071\033\044\050\040\075\033\076\054\100\053\112" +
    "\031\120\065\121\021\122\041\123\062\124\055\001\002" +
    "\000\034\014\027\016\071\033\044\050\040\075\033\076" +
    "\054\100\053\112\031\120\065\121\021\122\041\123\062" +
    "\124\055\001\002\000\034\014\027\016\071\033\044\050" +
    "\040\075\033\076\054\100\053\112\031\120\065\121\021" +
    "\122\041\123\062\124\055\001\002\000\066\011\uffcc\013" +
    "\uffcc\015\uffcc\017\076\020\uffcc\024\uffcc\025\uffcc\026\uffcc" +
    "\027\uffcc\030\uffcc\031\uffcc\032\uffcc\047\uffcc\073\uffcc\074" +
    "\uffcc\075\100\076\111\077\103\101\uffcc\102\uffcc\111\116" +
    "\112\101\113\110\114\105\115\uffcc\117\114\001\002\000" +
    "\066\011\uffd1\013\uffd1\015\uffd1\017\076\020\uffd1\024\uffd1" +
    "\025\117\026\107\027\121\030\102\031\075\032\104\047" +
    "\115\073\uffd1\074\uffd1\075\100\076\111\077\103\101\uffd1" +
    "\102\uffd1\111\116\112\101\113\110\114\105\115\112\117" +
    "\114\001\002\000\066\011\uffce\013\uffce\015\uffce\017\076" +
    "\020\uffce\024\uffce\025\uffce\026\uffce\027\121\030\102\031" +
    "\075\032\104\047\115\073\uffce\074\uffce\075\100\076\111" +
    "\077\103\101\uffce\102\uffce\111\116\112\101\113\110\114" +
    "\105\115\uffce\117\114\001\002\000\066\011\uffc8\013\uffc8" +
    "\015\uffc8\017\076\020\uffc8\024\uffc8\025\uffc8\026\uffc8\027" +
    "\uffc8\030\uffc8\031\uffc8\032\uffc8\047\uffc8\073\uffc8\074\uffc8" +
    "\075\100\076\111\077\103\101\uffc8\102\uffc8\111\uffc8\112" +
    "\uffc8\113\110\114\105\115\uffc8\117\114\001\002\000\066" +
    "\011\uffbe\013\uffbe\015\uffbe\017\uffbe\020\uffbe\024\uffbe\025" +
    "\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe\032\uffbe\047\uffbe" +
    "\073\uffbe\074\uffbe\075\uffbe\076\uffbe\077\uffbe\101\uffbe\102" +
    "\uffbe\111\uffbe\112\uffbe\113\uffbe\114\uffbe\115\uffbe\117\uffbe" +
    "\001\002\000\066\011\uffc3\013\uffc3\015\uffc3\017\076\020" +
    "\uffc3\024\uffc3\025\uffc3\026\uffc3\027\uffc3\030\uffc3\031\uffc3" +
    "\032\uffc3\047\uffc3\073\uffc3\074\uffc3\075\100\076\111\077" +
    "\103\101\uffc3\102\uffc3\111\uffc3\112\uffc3\113\uffc3\114\uffc3" +
    "\115\uffc3\117\uffc3\001\002\000\034\014\027\016\071\033" +
    "\044\050\040\075\033\076\054\100\053\112\031\120\065" +
    "\121\021\122\041\123\062\124\055\001\002\000\054\017" +
    "\076\020\132\025\117\026\107\027\121\030\102\031\075" +
    "\032\104\047\115\073\106\075\100\076\111\077\103\101" +
    "\120\102\077\111\116\112\101\113\110\114\105\115\112" +
    "\117\114\001\002\000\070\011\uffab\013\uffab\015\uffab\017" +
    "\uffab\020\uffab\021\uffab\024\uffab\025\uffab\026\uffab\027\uffab" +
    "\030\uffab\031\uffab\032\uffab\047\uffab\073\uffab\074\uffab\075" +
    "\uffab\076\uffab\077\uffab\101\uffab\102\uffab\111\uffab\112\uffab" +
    "\113\uffab\114\uffab\115\uffab\117\uffab\001\002\000\066\011" +
    "\uffc6\013\uffc6\015\uffc6\017\076\020\uffc6\024\uffc6\025\117" +
    "\026\107\027\121\030\102\031\075\032\104\047\115\073" +
    "\uffc6\074\uffc6\075\100\076\111\077\103\101\uffc6\102\uffc6" +
    "\111\116\112\101\113\110\114\105\115\uffc6\117\114\001" +
    "\002\000\066\011\uffc5\013\uffc5\015\uffc5\017\076\020\uffc5" +
    "\024\uffc5\025\uffc5\026\uffc5\027\uffc5\030\uffc5\031\uffc5\032" +
    "\uffc5\047\uffc5\073\uffc5\074\uffc5\075\100\076\111\077\103" +
    "\101\uffc5\102\uffc5\111\uffc5\112\uffc5\113\uffc5\114\uffc5\115" +
    "\uffc5\117\uffc5\001\002\000\066\011\uffcd\013\uffcd\015\uffcd" +
    "\017\076\020\uffcd\024\uffcd\025\uffcd\026\uffcd\027\121\030" +
    "\102\031\075\032\104\047\115\073\uffcd\074\uffcd\075\100" +
    "\076\111\077\103\101\uffcd\102\uffcd\111\116\112\101\113" +
    "\110\114\105\115\uffcd\117\114\001\002\000\054\017\076" +
    "\025\117\026\107\027\121\030\102\031\075\032\104\047" +
    "\115\073\106\074\137\075\100\076\111\077\103\101\120" +
    "\102\077\111\116\112\101\113\110\114\105\115\112\117" +
    "\114\001\002\000\034\014\027\016\071\033\044\050\040" +
    "\075\033\076\054\100\053\112\031\120\065\121\021\122" +
    "\041\123\062\124\055\001\002\000\066\011\uffa0\013\uffa0" +
    "\015\uffa0\017\076\020\uffa0\024\uffa0\025\117\026\107\027" +
    "\121\030\102\031\075\032\104\047\115\073\106\074\uffa0" +
    "\075\100\076\111\077\103\101\120\102\077\111\116\112" +
    "\101\113\110\114\105\115\112\117\114\001\002\000\066" +
    "\011\uffc4\013\uffc4\015\uffc4\017\076\020\uffc4\024\uffc4\025" +
    "\uffc4\026\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4\047\uffc4" +
    "\073\uffc4\074\uffc4\075\100\076\111\077\103\101\uffc4\102" +
    "\uffc4\111\uffc4\112\uffc4\113\uffc4\114\uffc4\115\uffc4\117\uffc4" +
    "\001\002\000\066\011\uffcb\013\uffcb\015\uffcb\017\076\020" +
    "\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb" +
    "\032\uffcb\047\uffcb\073\uffcb\074\uffcb\075\100\076\111\077" +
    "\103\101\uffcb\102\uffcb\111\116\112\101\113\110\114\105" +
    "\115\uffcb\117\114\001\002\000\004\014\155\001\002\000" +
    "\004\014\153\001\002\000\004\014\151\001\002\000\070" +
    "\011\uffb9\013\uffb9\014\147\015\uffb9\017\uffb9\020\uffb9\024" +
    "\uffb9\025\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9\032\uffb9" +
    "\047\uffb9\073\uffb9\074\uffb9\075\uffb9\076\uffb9\077\uffb9\101" +
    "\uffb9\102\uffb9\111\uffb9\112\uffb9\113\uffb9\114\uffb9\115\uffb9" +
    "\117\uffb9\001\002\000\004\015\150\001\002\000\066\011" +
    "\uffbc\013\uffbc\015\uffbc\017\uffbc\020\uffbc\024\uffbc\025\uffbc" +
    "\026\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc\047\uffbc\073" +
    "\uffbc\074\uffbc\075\uffbc\076\uffbc\077\uffbc\101\uffbc\102\uffbc" +
    "\111\uffbc\112\uffbc\113\uffbc\114\uffbc\115\uffbc\117\uffbc\001" +
    "\002\000\004\015\152\001\002\000\066\011\uffbb\013\uffbb" +
    "\015\uffbb\017\uffbb\020\uffbb\024\uffbb\025\uffbb\026\uffbb\027" +
    "\uffbb\030\uffbb\031\uffbb\032\uffbb\047\uffbb\073\uffbb\074\uffbb" +
    "\075\uffbb\076\uffbb\077\uffbb\101\uffbb\102\uffbb\111\uffbb\112" +
    "\uffbb\113\uffbb\114\uffbb\115\uffbb\117\uffbb\001\002\000\004" +
    "\015\154\001\002\000\066\011\uffb8\013\uffb8\015\uffb8\017" +
    "\uffb8\020\uffb8\024\uffb8\025\uffb8\026\uffb8\027\uffb8\030\uffb8" +
    "\031\uffb8\032\uffb8\047\uffb8\073\uffb8\074\uffb8\075\uffb8\076" +
    "\uffb8\077\uffb8\101\uffb8\102\uffb8\111\uffb8\112\uffb8\113\uffb8" +
    "\114\uffb8\115\uffb8\117\uffb8\001\002\000\004\015\156\001" +
    "\002\000\066\011\uffba\013\uffba\015\uffba\017\uffba\020\uffba" +
    "\024\uffba\025\uffba\026\uffba\027\uffba\030\uffba\031\uffba\032" +
    "\uffba\047\uffba\073\uffba\074\uffba\075\uffba\076\uffba\077\uffba" +
    "\101\uffba\102\uffba\111\uffba\112\uffba\113\uffba\114\uffba\115" +
    "\uffba\117\uffba\001\002\000\066\011\uffca\013\uffca\015\uffca" +
    "\017\076\020\uffca\024\uffca\025\uffca\026\uffca\027\uffca\030" +
    "\uffca\031\uffca\032\uffca\047\uffca\073\uffca\074\uffca\075\100" +
    "\076\111\077\103\101\uffca\102\uffca\111\116\112\101\113" +
    "\110\114\105\115\uffca\117\114\001\002\000\066\011\uffc7" +
    "\013\uffc7\015\uffc7\017\076\020\uffc7\024\uffc7\025\uffc7\026" +
    "\uffc7\027\uffc7\030\uffc7\031\uffc7\032\uffc7\047\uffc7\073\uffc7" +
    "\074\uffc7\075\100\076\111\077\103\101\uffc7\102\uffc7\111" +
    "\uffc7\112\uffc7\113\110\114\105\115\uffc7\117\114\001\002" +
    "\000\066\011\uffd0\013\uffd0\015\uffd0\017\076\020\uffd0\024" +
    "\uffd0\025\117\026\107\027\121\030\102\031\075\032\104" +
    "\047\115\073\uffd0\074\uffd0\075\100\076\111\077\103\101" +
    "\120\102\uffd0\111\116\112\101\113\110\114\105\115\112" +
    "\117\114\001\002\000\054\017\076\020\163\025\117\026" +
    "\107\027\121\030\102\031\075\032\104\047\115\073\106" +
    "\075\100\076\111\077\103\101\120\102\077\111\116\112" +
    "\101\113\110\114\105\115\112\117\114\001\002\000\070" +
    "\011\uffaa\013\uffaa\015\uffaa\017\uffaa\020\uffaa\021\uffaa\024" +
    "\uffaa\025\uffaa\026\uffaa\027\uffaa\030\uffaa\031\uffaa\032\uffaa" +
    "\047\uffaa\073\uffaa\074\uffaa\075\uffaa\076\uffaa\077\uffaa\101" +
    "\uffaa\102\uffaa\111\uffaa\112\uffaa\113\uffaa\114\uffaa\115\uffaa" +
    "\117\uffaa\001\002\000\066\011\uffc9\013\uffc9\015\uffc9\017" +
    "\076\020\uffc9\024\uffc9\025\uffc9\026\uffc9\027\uffc9\030\uffc9" +
    "\031\uffc9\032\uffc9\047\uffc9\073\uffc9\074\uffc9\075\100\076" +
    "\111\077\103\101\uffc9\102\uffc9\111\116\112\101\113\110" +
    "\114\105\115\uffc9\117\114\001\002\000\074\004\uffdf\005" +
    "\uffdf\006\uffdf\007\uffdf\010\uffdf\012\uffdf\013\uffdf\014\uffdf" +
    "\016\uffdf\022\uffdf\023\uffdf\033\uffdf\042\uffdf\050\uffdf\067" +
    "\uffdf\070\uffdf\071\uffdf\072\uffdf\075\uffdf\076\uffdf\100\uffdf" +
    "\103\uffdf\112\uffdf\116\uffdf\120\uffdf\121\uffdf\122\uffdf\123" +
    "\uffdf\124\uffdf\001\002\000\062\011\uffa1\013\uffa1\015\uffa1" +
    "\017\076\020\uffa1\024\uffa1\025\uffa1\026\uffa1\027\uffa1\030" +
    "\uffa1\031\uffa1\032\uffa1\047\uffa1\073\uffa1\074\uffa1\077\103" +
    "\101\uffa1\102\uffa1\111\uffa1\112\uffa1\113\uffa1\114\uffa1\115" +
    "\uffa1\117\uffa1\001\002\000\062\011\uffcf\013\uffcf\015\uffcf" +
    "\017\076\020\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf\030" +
    "\uffcf\031\uffcf\032\uffcf\047\uffcf\073\uffcf\074\uffcf\077\103" +
    "\101\uffcf\102\uffcf\111\uffcf\112\uffcf\113\uffcf\114\uffcf\115" +
    "\uffcf\117\uffcf\001\002\000\074\004\uffee\005\uffee\006\uffee" +
    "\007\uffee\010\uffee\012\uffee\013\uffee\014\uffee\016\uffee\022" +
    "\uffee\023\uffee\033\uffee\042\uffee\050\uffee\067\uffee\070\uffee" +
    "\071\uffee\072\uffee\075\uffee\076\uffee\100\uffee\103\uffee\112" +
    "\uffee\116\uffee\120\uffee\121\uffee\122\uffee\123\uffee\124\uffee" +
    "\001\002\000\004\067\172\001\002\000\004\014\173\001" +
    "\002\000\034\014\027\016\071\033\044\050\040\075\033" +
    "\076\054\100\053\112\031\120\065\121\021\122\041\123" +
    "\062\124\055\001\002\000\054\015\175\017\076\025\117" +
    "\026\107\027\121\030\102\031\075\032\104\047\115\073" +
    "\106\075\100\076\111\077\103\101\120\102\077\111\116" +
    "\112\101\113\110\114\105\115\112\117\114\001\002\000" +
    "\004\011\176\001\002\000\074\004\uffe4\005\uffe4\006\uffe4" +
    "\007\uffe4\010\uffe4\012\uffe4\013\uffe4\014\uffe4\016\uffe4\022" +
    "\uffe4\023\uffe4\033\uffe4\042\uffe4\050\uffe4\067\uffe4\070\uffe4" +
    "\071\uffe4\072\uffe4\075\uffe4\076\uffe4\100\uffe4\103\uffe4\112" +
    "\uffe4\116\uffe4\120\uffe4\121\uffe4\122\uffe4\123\uffe4\124\uffe4" +
    "\001\002\000\034\014\027\016\071\033\044\050\040\075" +
    "\033\076\054\100\053\112\031\120\065\121\021\122\041" +
    "\123\062\124\055\001\002\000\054\015\201\017\076\025" +
    "\117\026\107\027\121\030\102\031\075\032\104\047\115" +
    "\073\106\075\100\076\111\077\103\101\120\102\077\111" +
    "\116\112\101\113\110\114\105\115\112\117\114\001\002" +
    "\000\004\011\202\001\002\000\074\004\uffe0\005\uffe0\006" +
    "\uffe0\007\uffe0\010\uffe0\012\uffe0\013\uffe0\014\uffe0\016\uffe0" +
    "\022\uffe0\023\uffe0\033\uffe0\042\uffe0\050\uffe0\067\uffe0\070" +
    "\uffe0\071\uffe0\072\uffe0\075\uffe0\076\uffe0\100\uffe0\103\uffe0" +
    "\112\uffe0\116\uffe0\120\uffe0\121\uffe0\122\uffe0\123\uffe0\124" +
    "\uffe0\001\002\000\034\014\027\016\071\033\044\050\040" +
    "\075\033\076\054\100\053\112\031\120\065\121\021\122" +
    "\041\123\062\124\055\001\002\000\006\017\130\021\227" +
    "\001\002\000\010\011\uffd9\017\207\021\210\001\002\000" +
    "\010\011\uffd6\017\213\021\214\001\002\000\004\020\212" +
    "\001\002\000\034\014\027\016\071\033\044\050\040\075" +
    "\033\076\054\100\053\112\031\120\065\121\021\122\041" +
    "\123\062\124\055\001\002\000\054\011\uffda\017\076\025" +
    "\117\026\107\027\121\030\102\031\075\032\104\047\115" +
    "\073\106\075\100\076\111\077\103\101\120\102\077\111" +
    "\116\112\101\113\110\114\105\115\112\117\114\001\002" +
    "\000\010\011\uffd2\017\uffd2\021\uffd2\001\002\000\004\020" +
    "\226\001\002\000\004\012\215\001\002\000\036\012\215" +
    "\014\027\016\071\033\044\050\040\075\033\076\054\100" +
    "\053\112\031\120\065\121\021\122\041\123\062\124\055" +
    "\001\002\000\004\011\uffd5\001\002\000\006\013\223\024" +
    "\224\001\002\000\006\013\uffa5\024\uffa5\001\002\000\006" +
    "\013\uffa7\024\uffa7\001\002\000\056\013\uffa6\017\076\024" +
    "\uffa6\025\117\026\107\027\121\030\102\031\075\032\104" +
    "\047\115\073\106\075\100\076\111\077\103\101\120\102" +
    "\077\111\116\112\101\113\110\114\105\115\112\117\114" +
    "\001\002\000\010\011\uffa9\013\uffa9\024\uffa9\001\002\000" +
    "\036\012\215\014\027\016\071\033\044\050\040\075\033" +
    "\076\054\100\053\112\031\120\065\121\021\122\041\123" +
    "\062\124\055\001\002\000\006\013\uffa8\024\uffa8\001\002" +
    "\000\010\011\uffd3\017\uffd3\021\uffd3\001\002\000\034\014" +
    "\027\016\071\033\044\050\040\075\033\076\054\100\053" +
    "\112\031\120\065\121\021\122\041\123\062\124\055\001" +
    "\002\000\054\011\uffdd\017\076\025\117\026\107\027\121" +
    "\030\102\031\075\032\104\047\115\073\106\075\100\076" +
    "\111\077\103\101\120\102\077\111\116\112\101\113\110" +
    "\114\105\115\112\117\114\001\002\000\054\011\uffde\017" +
    "\076\025\117\026\107\027\121\030\102\031\075\032\104" +
    "\047\115\073\106\075\100\076\111\077\103\101\120\102" +
    "\077\111\116\112\101\113\110\114\105\115\112\117\114" +
    "\001\002\000\034\014\027\016\071\033\044\050\040\075" +
    "\033\076\054\100\053\112\031\120\065\121\021\122\041" +
    "\123\062\124\055\001\002\000\054\017\076\024\234\025" +
    "\117\026\107\027\121\030\102\031\075\032\104\047\115" +
    "\073\106\075\100\076\111\077\103\101\120\102\077\111" +
    "\116\112\101\113\110\114\105\115\112\117\114\001\002" +
    "\000\034\014\027\016\071\033\044\050\040\075\033\076" +
    "\054\100\053\112\031\120\065\121\021\122\041\123\062" +
    "\124\055\001\002\000\054\015\236\017\076\025\117\026" +
    "\107\027\121\030\102\031\075\032\104\047\115\073\106" +
    "\075\100\076\111\077\103\101\120\102\077\111\116\112" +
    "\101\113\110\114\105\115\112\117\114\001\002\000\066" +
    "\011\uffbf\013\uffbf\015\uffbf\017\uffbf\020\uffbf\024\uffbf\025" +
    "\uffbf\026\uffbf\027\uffbf\030\uffbf\031\uffbf\032\uffbf\047\uffbf" +
    "\073\uffbf\074\uffbf\075\uffbf\076\uffbf\077\uffbf\101\uffbf\102" +
    "\uffbf\111\uffbf\112\uffbf\113\uffbf\114\uffbf\115\uffbf\117\uffbf" +
    "\001\002\000\074\004\ufffb\005\ufffb\006\ufffb\007\ufffb\010" +
    "\ufffb\012\ufffb\013\ufffb\014\ufffb\016\ufffb\022\ufffb\023\ufffb" +
    "\033\ufffb\042\ufffb\050\ufffb\067\ufffb\070\ufffb\071\ufffb\072" +
    "\ufffb\075\ufffb\076\ufffb\100\ufffb\103\ufffb\112\ufffb\116\ufffb" +
    "\120\ufffb\121\ufffb\122\ufffb\123\ufffb\124\ufffb\001\002\000" +
    "\004\017\076\001\002\000\004\017\076\001\002\000\066" +
    "\011\uffae\013\uffae\015\uffae\017\130\020\uffae\024\uffae\025" +
    "\uffae\026\uffae\027\uffae\030\uffae\031\uffae\032\uffae\047\uffae" +
    "\073\uffae\074\uffae\075\uffae\076\uffae\077\uffae\101\uffae\102" +
    "\uffae\111\uffae\112\uffae\113\uffae\114\uffae\115\uffae\117\uffae" +
    "\001\002\000\066\011\uffaf\013\uffaf\015\uffaf\017\130\020" +
    "\uffaf\024\uffaf\025\uffaf\026\uffaf\027\uffaf\030\uffaf\031\uffaf" +
    "\032\uffaf\047\uffaf\073\uffaf\074\uffaf\075\uffaf\076\uffaf\077" +
    "\uffaf\101\uffaf\102\uffaf\111\uffaf\112\uffaf\113\uffaf\114\uffaf" +
    "\115\uffaf\117\uffaf\001\002\000\074\004\uffef\005\uffef\006" +
    "\uffef\007\uffef\010\uffef\012\uffef\013\uffef\014\uffef\016\uffef" +
    "\022\uffef\023\uffef\033\uffef\042\uffef\050\uffef\067\uffef\070" +
    "\uffef\071\uffef\072\uffef\075\uffef\076\uffef\100\uffef\103\uffef" +
    "\112\uffef\116\uffef\120\uffef\121\uffef\122\uffef\123\uffef\124" +
    "\uffef\001\002\000\016\004\023\005\061\006\066\007\020" +
    "\010\037\016\246\001\002\000\006\016\205\021\203\001" +
    "\002\000\004\011\261\001\002\000\004\011\251\001\002" +
    "\000\034\014\027\016\071\033\044\050\040\075\033\076" +
    "\054\100\053\112\031\120\065\121\021\122\041\123\062" +
    "\124\055\001\002\000\054\011\253\017\076\025\117\026" +
    "\107\027\121\030\102\031\075\032\104\047\115\073\106" +
    "\075\100\076\111\077\103\101\120\102\077\111\116\112" +
    "\101\113\110\114\105\115\112\117\114\001\002\000\034" +
    "\014\027\016\071\033\044\050\040\075\033\076\054\100" +
    "\053\112\031\120\065\121\021\122\041\123\062\124\055" +
    "\001\002\000\054\015\uffed\017\uffc0\025\uffc0\026\uffc0\027" +
    "\uffc0\030\uffc0\031\uffc0\032\uffc0\047\uffc0\073\uffc0\075\uffc0" +
    "\076\uffc0\077\uffc0\101\uffc0\102\uffc0\111\uffc0\112\uffc0\113" +
    "\uffc0\114\uffc0\115\uffc0\117\uffc0\001\002\000\004\015\257" +
    "\001\002\000\054\015\uffec\017\uffbd\025\uffbd\026\uffbd\027" +
    "\uffbd\030\uffbd\031\uffbd\032\uffbd\047\uffbd\073\uffbd\075\uffbd" +
    "\076\uffbd\077\uffbd\101\uffbd\102\uffbd\111\uffbd\112\uffbd\113" +
    "\uffbd\114\uffbd\115\uffbd\117\uffbd\001\002\000\004\012\005" +
    "\001\002\000\074\004\uffe2\005\uffe2\006\uffe2\007\uffe2\010" +
    "\uffe2\012\uffe2\013\uffe2\014\uffe2\016\uffe2\022\uffe2\023\uffe2" +
    "\033\uffe2\042\uffe2\050\uffe2\067\uffe2\070\uffe2\071\uffe2\072" +
    "\uffe2\075\uffe2\076\uffe2\100\uffe2\103\uffe2\112\uffe2\116\uffe2" +
    "\120\uffe2\121\uffe2\122\uffe2\123\uffe2\124\uffe2\001\002\000" +
    "\034\014\027\016\071\033\044\050\040\075\033\076\054" +
    "\100\053\112\031\120\065\121\021\122\041\123\062\124" +
    "\055\001\002\000\054\011\263\017\076\025\117\026\107" +
    "\027\121\030\102\031\075\032\104\047\115\073\106\075" +
    "\100\076\111\077\103\101\120\102\077\111\116\112\101" +
    "\113\110\114\105\115\112\117\114\001\002\000\034\014" +
    "\027\016\071\033\044\050\040\075\033\076\054\100\053" +
    "\112\031\120\065\121\021\122\041\123\062\124\055\001" +
    "\002\000\004\015\265\001\002\000\004\012\005\001\002" +
    "\000\074\004\uffe3\005\uffe3\006\uffe3\007\uffe3\010\uffe3\012" +
    "\uffe3\013\uffe3\014\uffe3\016\uffe3\022\uffe3\023\uffe3\033\uffe3" +
    "\042\uffe3\050\uffe3\067\uffe3\070\uffe3\071\uffe3\072\uffe3\075" +
    "\uffe3\076\uffe3\100\uffe3\103\uffe3\112\uffe3\116\uffe3\120\uffe3" +
    "\121\uffe3\122\uffe3\123\uffe3\124\uffe3\001\002\000\074\004" +
    "\ufffa\005\ufffa\006\ufffa\007\ufffa\010\ufffa\012\ufffa\013\ufffa" +
    "\014\ufffa\016\ufffa\022\ufffa\023\ufffa\033\ufffa\042\ufffa\050" +
    "\ufffa\067\ufffa\070\ufffa\071\ufffa\072\ufffa\075\ufffa\076\ufffa" +
    "\100\ufffa\103\ufffa\112\ufffa\116\ufffa\120\ufffa\121\ufffa\122" +
    "\ufffa\123\ufffa\124\ufffa\001\002\000\062\011\uffa3\013\uffa3" +
    "\015\uffa3\017\076\020\uffa3\024\uffa3\025\uffa3\026\uffa3\027" +
    "\uffa3\030\uffa3\031\uffa3\032\uffa3\047\uffa3\073\uffa3\074\uffa3" +
    "\077\103\101\uffa3\102\uffa3\111\uffa3\112\uffa3\113\uffa3\114" +
    "\uffa3\115\uffa3\117\uffa3\001\002\000\066\011\uffc1\013\uffc1" +
    "\015\uffc1\017\076\020\uffc1\024\uffc1\025\uffc1\026\uffc1\027" +
    "\uffc1\030\uffc1\031\uffc1\032\uffc1\047\uffc1\073\uffc1\074\uffc1" +
    "\075\100\076\111\077\103\101\uffc1\102\uffc1\111\uffc1\112" +
    "\uffc1\113\110\114\105\115\uffc1\117\114\001\002\000\054" +
    "\015\301\017\076\025\117\026\107\027\121\030\102\031" +
    "\075\032\104\047\115\073\106\075\100\076\111\077\103" +
    "\101\120\102\077\111\116\112\101\113\110\114\105\115" +
    "\112\117\114\001\002\000\004\015\277\001\002\000\054" +
    "\015\275\017\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031" +
    "\uffb0\032\uffb0\047\uffb0\073\uffb0\075\uffb0\076\uffb0\077\uffb0" +
    "\101\uffb0\102\uffb0\111\uffb0\112\uffb0\113\uffb0\114\uffb0\115" +
    "\uffb0\117\uffb0\001\002\000\034\014\027\016\071\033\044" +
    "\050\040\075\033\076\054\100\053\112\031\120\065\121" +
    "\021\122\041\123\062\124\055\001\002\000\066\011\uffb6" +
    "\013\uffb6\015\uffb6\017\076\020\uffb6\024\uffb6\025\uffb6\026" +
    "\uffb6\027\uffb6\030\uffb6\031\uffb6\032\uffb6\047\uffb6\073\uffb6" +
    "\074\uffb6\075\uffb6\076\uffb6\077\103\101\uffb6\102\uffb6\111" +
    "\uffb6\112\uffb6\113\uffb6\114\uffb6\115\uffb6\117\uffb6\001\002" +
    "\000\034\014\027\016\071\033\044\050\040\075\033\076" +
    "\054\100\053\112\031\120\065\121\021\122\041\123\062" +
    "\124\055\001\002\000\066\011\uffb7\013\uffb7\015\uffb7\017" +
    "\076\020\uffb7\024\uffb7\025\uffb7\026\uffb7\027\uffb7\030\uffb7" +
    "\031\uffb7\032\uffb7\047\uffb7\073\uffb7\074\uffb7\075\uffb7\076" +
    "\uffb7\077\103\101\uffb7\102\uffb7\111\uffb7\112\uffb7\113\uffb7" +
    "\114\uffb7\115\uffb7\117\uffb7\001\002\000\066\011\uffad\013" +
    "\uffad\015\uffad\017\uffad\020\uffad\024\uffad\025\uffad\026\uffad" +
    "\027\uffad\030\uffad\031\uffad\032\uffad\047\uffad\073\uffad\074" +
    "\uffad\075\uffad\076\uffad\077\uffad\101\uffad\102\uffad\111\uffad" +
    "\112\uffad\113\uffad\114\uffad\115\uffad\117\uffad\001\002\000" +
    "\034\014\027\016\071\033\044\050\040\075\033\076\054" +
    "\100\053\112\031\120\065\121\021\122\041\123\062\124" +
    "\055\001\002\000\054\015\304\017\076\025\117\026\107" +
    "\027\121\030\102\031\075\032\104\047\115\073\106\075" +
    "\100\076\111\077\103\101\120\102\077\111\116\112\101" +
    "\113\110\114\105\115\112\117\114\001\002\000\004\012" +
    "\005\001\002\000\074\004\uffe5\005\uffe5\006\uffe5\007\uffe5" +
    "\010\uffe5\012\uffe5\013\uffe5\014\uffe5\016\uffe5\022\uffe5\023" +
    "\uffe5\033\uffe5\042\uffe5\050\uffe5\067\uffe5\070\uffe5\071\uffe5" +
    "\072\uffe5\075\uffe5\076\uffe5\100\uffe5\103\uffe5\112\uffe5\116" +
    "\uffe5\120\uffe5\121\uffe5\122\uffe5\123\uffe5\124\uffe5\001\002" +
    "\000\034\014\027\016\071\033\044\050\040\075\033\076" +
    "\054\100\053\112\031\120\065\121\021\122\041\123\062" +
    "\124\055\001\002\000\054\015\310\017\076\025\117\026" +
    "\107\027\121\030\102\031\075\032\104\047\115\073\106" +
    "\075\100\076\111\077\103\101\120\102\077\111\116\112" +
    "\101\113\110\114\105\115\112\117\114\001\002\000\004" +
    "\012\005\001\002\000\076\004\uffeb\005\uffeb\006\uffeb\007" +
    "\uffeb\010\uffeb\012\uffeb\013\uffeb\014\uffeb\016\uffeb\022\uffeb" +
    "\023\uffeb\033\uffeb\042\uffeb\050\uffeb\067\uffeb\070\uffeb\071" +
    "\uffeb\072\uffeb\075\uffeb\076\uffeb\100\uffeb\103\uffeb\105\312" +
    "\112\uffeb\116\uffeb\120\uffeb\121\uffeb\122\uffeb\123\uffeb\124" +
    "\uffeb\001\002\000\006\012\005\103\024\001\002\000\074" +
    "\004\uffea\005\uffea\006\uffea\007\uffea\010\uffea\012\uffea\013" +
    "\uffea\014\uffea\016\uffea\022\uffea\023\uffea\033\uffea\042\uffea" +
    "\050\uffea\067\uffea\070\uffea\071\uffea\072\uffea\075\uffea\076" +
    "\uffea\100\uffea\103\uffea\112\uffea\116\uffea\120\uffea\121\uffea" +
    "\122\uffea\123\uffea\124\uffea\001\002\000\074\004\uffe8\005" +
    "\uffe8\006\uffe8\007\uffe8\010\uffe8\012\uffe8\013\uffe8\014\uffe8" +
    "\016\uffe8\022\uffe8\023\uffe8\033\uffe8\042\uffe8\050\uffe8\067" +
    "\uffe8\070\uffe8\071\uffe8\072\uffe8\075\uffe8\076\uffe8\100\uffe8" +
    "\103\uffe8\112\uffe8\116\uffe8\120\uffe8\121\uffe8\122\uffe8\123" +
    "\uffe8\124\uffe8\001\002\000\074\004\uffe9\005\uffe9\006\uffe9" +
    "\007\uffe9\010\uffe9\012\uffe9\013\uffe9\014\uffe9\016\uffe9\022" +
    "\uffe9\023\uffe9\033\uffe9\042\uffe9\050\uffe9\067\uffe9\070\uffe9" +
    "\071\uffe9\072\uffe9\075\uffe9\076\uffe9\100\uffe9\103\uffe9\112" +
    "\uffe9\116\uffe9\120\uffe9\121\uffe9\122\uffe9\123\uffe9\124\uffe9" +
    "\001\002\000\100\002\uffff\004\uffff\005\uffff\006\uffff\007" +
    "\uffff\010\uffff\012\uffff\013\uffff\014\uffff\016\uffff\022\uffff" +
    "\023\uffff\033\uffff\042\uffff\050\uffff\067\uffff\070\uffff\071" +
    "\uffff\072\uffff\075\uffff\076\uffff\100\uffff\103\uffff\105\uffff" +
    "\112\uffff\116\uffff\120\uffff\121\uffff\122\uffff\123\uffff\124" +
    "\uffff\001\002\000\074\004\ufffd\005\ufffd\006\ufffd\007\ufffd" +
    "\010\ufffd\012\ufffd\013\ufffd\014\ufffd\016\ufffd\022\ufffd\023" +
    "\ufffd\033\ufffd\042\ufffd\050\ufffd\067\ufffd\070\ufffd\071\ufffd" +
    "\072\ufffd\075\ufffd\076\ufffd\100\ufffd\103\ufffd\112\ufffd\116" +
    "\ufffd\120\ufffd\121\ufffd\122\ufffd\123\ufffd\124\ufffd\001\002" +
    "\000\004\015\321\001\002\000\004\011\322\001\002\000" +
    "\074\004\uffe1\005\uffe1\006\uffe1\007\uffe1\010\uffe1\012\uffe1" +
    "\013\uffe1\014\uffe1\016\uffe1\022\uffe1\023\uffe1\033\uffe1\042" +
    "\uffe1\050\uffe1\067\uffe1\070\uffe1\071\uffe1\072\uffe1\075\uffe1" +
    "\076\uffe1\100\uffe1\103\uffe1\112\uffe1\116\uffe1\120\uffe1\121" +
    "\uffe1\122\uffe1\123\uffe1\124\uffe1\001\002\000\010\011\uffdc" +
    "\017\207\021\325\001\002\000\010\011\uffd8\017\213\021" +
    "\327\001\002\000\034\014\027\016\071\033\044\050\040" +
    "\075\033\076\054\100\053\112\031\120\065\121\021\122" +
    "\041\123\062\124\055\001\002\000\054\011\uffdb\017\076" +
    "\025\117\026\107\027\121\030\102\031\075\032\104\047" +
    "\115\073\106\075\100\076\111\077\103\101\120\102\077" +
    "\111\116\112\101\113\110\114\105\115\112\117\114\001" +
    "\002\000\036\012\215\014\027\016\071\033\044\050\040" +
    "\075\033\076\054\100\053\112\031\120\065\121\021\122" +
    "\041\123\062\124\055\001\002\000\004\011\uffd4\001\002" +
    "\000\054\011\uffd7\017\076\025\117\026\107\027\121\030" +
    "\102\031\075\032\104\047\115\073\106\075\100\076\111" +
    "\077\103\101\120\102\077\111\116\112\101\113\110\114" +
    "\105\115\112\117\114\001\002\000\074\004\uffe6\005\uffe6" +
    "\006\uffe6\007\uffe6\010\uffe6\012\uffe6\013\uffe6\014\uffe6\016" +
    "\uffe6\022\uffe6\023\uffe6\033\uffe6\042\uffe6\050\uffe6\067\uffe6" +
    "\070\uffe6\071\uffe6\072\uffe6\075\uffe6\076\uffe6\100\uffe6\103" +
    "\uffe6\112\uffe6\116\uffe6\120\uffe6\121\uffe6\122\uffe6\123\uffe6" +
    "\124\uffe6\001\002\000\074\004\ufff0\005\ufff0\006\ufff0\007" +
    "\ufff0\010\ufff0\012\ufff0\013\ufff0\014\ufff0\016\ufff0\022\ufff0" +
    "\023\ufff0\033\ufff0\042\ufff0\050\ufff0\067\ufff0\070\ufff0\071" +
    "\ufff0\072\ufff0\075\ufff0\076\ufff0\100\ufff0\103\ufff0\112\ufff0" +
    "\116\ufff0\120\ufff0\121\ufff0\122\ufff0\123\ufff0\124\ufff0\001" +
    "\002\000\074\004\uffe7\005\uffe7\006\uffe7\007\uffe7\010\uffe7" +
    "\012\uffe7\013\uffe7\014\uffe7\016\uffe7\022\uffe7\023\uffe7\033" +
    "\uffe7\042\uffe7\050\uffe7\067\uffe7\070\uffe7\071\uffe7\072\uffe7" +
    "\075\uffe7\076\uffe7\100\uffe7\103\uffe7\112\uffe7\116\uffe7\120" +
    "\uffe7\121\uffe7\122\uffe7\123\uffe7\124\uffe7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\332\000\006\002\003\011\005\001\001\000\002\001" +
    "\001\000\050\002\055\003\014\004\062\005\042\006\027" +
    "\007\010\010\035\012\012\013\063\014\031\015\033\016" +
    "\051\017\046\020\041\021\015\022\025\024\057\025\016" +
    "\031\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\046\002\055\004\316\005" +
    "\042\006\027\007\010\010\035\012\012\013\063\014\031" +
    "\015\033\016\051\017\046\020\041\021\015\022\025\024" +
    "\057\025\016\031\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\006\271\007\067\010\071\012" +
    "\272\024\057\001\001\000\004\030\112\001\001\000\012" +
    "\006\270\007\067\010\071\024\057\001\001\000\002\001" +
    "\001\000\012\006\267\007\067\010\071\024\057\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\237\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\030\203\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\002\170\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\006\166\007\067\010\071\024\057\001\001" +
    "\000\012\006\165\007\067\010\071\024\057\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\006\072\007\067\010\071\024\057\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\030\112\001\001\000\002\001\001\000\012\006\163\007" +
    "\067\010\071\024\057\001\001\000\012\006\161\007\067" +
    "\010\071\024\057\001\001\000\012\006\160\007\067\010" +
    "\071\024\057\001\001\000\002\001\001\000\012\006\157" +
    "\007\067\010\071\024\057\001\001\000\012\006\156\007" +
    "\067\010\071\024\057\001\001\000\002\001\001\000\012" +
    "\006\141\007\067\010\071\024\057\001\001\000\012\006" +
    "\140\007\067\010\071\024\057\001\001\000\012\006\135" +
    "\007\067\010\071\024\057\001\001\000\012\006\134\007" +
    "\067\010\071\024\057\001\001\000\012\006\133\007\067" +
    "\010\071\024\057\001\001\000\002\001\001\000\012\006" +
    "\132\007\067\010\071\024\057\001\001\000\002\001\001" +
    "\000\012\006\126\007\067\010\071\024\057\001\001\000" +
    "\002\001\001\000\012\006\124\007\067\010\071\024\057" +
    "\001\001\000\012\006\123\007\067\010\071\024\057\001" +
    "\001\000\012\006\122\007\067\010\071\024\057\001\001" +
    "\000\012\006\121\007\067\010\071\024\057\001\001\000" +
    "\004\030\112\001\001\000\004\030\112\001\001\000\004" +
    "\030\112\001\001\000\004\030\112\001\001\000\002\001" +
    "\001\000\004\030\112\001\001\000\012\006\130\007\067" +
    "\010\071\024\057\001\001\000\004\030\112\001\001\000" +
    "\002\001\001\000\004\030\112\001\001\000\004\030\112" +
    "\001\001\000\004\030\112\001\001\000\004\030\112\001" +
    "\001\000\012\006\137\007\067\010\071\024\057\001\001" +
    "\000\004\030\112\001\001\000\004\030\112\001\001\000" +
    "\004\030\112\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\030\112\001\001\000\004\030\112\001\001" +
    "\000\004\030\112\001\001\000\004\030\112\001\001\000" +
    "\002\001\001\000\004\030\112\001\001\000\002\001\001" +
    "\000\004\030\112\001\001\000\004\030\112\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\006\173\007\067\010\071\024\057\001\001\000\004\030" +
    "\112\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\006\177\007\067\010\071\024\057\001\001\000\004\030" +
    "\112\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\006\230\007\067\010\071\024\057\001\001\000\002\001" +
    "\001\000\004\027\205\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\006\210\007\067\010\071\024\057\001" +
    "\001\000\004\030\112\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\034\215\001\001\000\020\006\221\007" +
    "\067\010\071\024\057\032\220\033\216\034\217\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\030\112\001\001\000\002\001\001" +
    "\000\016\006\221\007\067\010\071\024\057\032\224\034" +
    "\217\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\006\227\007\067\010\071\024\057\001\001\000\004\030" +
    "\112\001\001\000\004\030\112\001\001\000\012\006\232" +
    "\007\067\010\071\024\057\001\001\000\004\030\112\001" +
    "\001\000\012\006\234\007\067\010\071\024\057\001\001" +
    "\000\004\030\112\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\030\242\001\001\000\004\030\241\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\005\246\012\012\015\247\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\006\251\007" +
    "\067\010\071\024\057\001\001\000\004\030\112\001\001" +
    "\000\014\006\027\007\253\010\255\024\057\026\254\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\002\257\001\001\000\002\001\001\000\012\006" +
    "\261\007\067\010\071\024\057\001\001\000\004\030\112" +
    "\001\001\000\014\006\027\007\253\010\255\024\057\026" +
    "\263\001\001\000\002\001\001\000\004\002\265\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\030\112\001" +
    "\001\000\004\030\112\001\001\000\004\030\112\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\006\275\007" +
    "\067\010\071\024\057\001\001\000\004\030\112\001\001" +
    "\000\012\006\277\007\067\010\071\024\057\001\001\000" +
    "\004\030\112\001\001\000\002\001\001\000\012\006\302" +
    "\007\067\010\071\024\057\001\001\000\004\030\112\001" +
    "\001\000\004\002\304\001\001\000\002\001\001\000\012" +
    "\006\306\007\067\010\071\024\057\001\001\000\004\030" +
    "\112\001\001\000\004\002\310\001\001\000\002\001\001" +
    "\000\010\002\313\022\314\023\312\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\027\323\001\001\000\002\001\001" +
    "\000\012\006\325\007\067\010\071\024\057\001\001\000" +
    "\004\030\112\001\001\000\014\006\330\007\067\010\071" +
    "\024\057\034\327\001\001\000\002\001\001\000\004\030" +
    "\112\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


	   	
	public ArrayList<ErrorC> listaErrores = new ArrayList();	
	public ArrayList<Instruccion> ast = new ArrayList<Instruccion>();

	public Instruccion raiz = null;

	/*@Override
	public void syntax_error(Symbol cur_token) 
	{        
		List<Integer> listaIdTokens = expected_token_ids();
		LinkedList<String> listaNombres = new LinkedList<String>();
		for (Integer expected : listaIdTokens) 
		{			
			listaNombres.add(symbl_name_from_id(expected));
		}		
		Utilidades.Singlenton.registrarError(String.valueOf(cur_token.value), 
			String.valueOf(cur_token.value) + ". Se esperaba :"+listaNombres.toString(), ErrorC.TipoError.LEXICO, cur_token.right+1, cur_token.left+1);
		/*listaErrores.add(
					listaErrores.add(new ErrorC(ErrorC.TipoError.SINTACTICO,
								String.valueOf(cur_token.value) + ". Se esperaba :"+listaNombres.toString(),
								cur_token.right+1,
								cur_token.left+1));
                
	}*/


    public void report_error(String message, Object info) 
    {
        int linea = 0;
        int columna = 0;
        java_cup.runtime.Symbol s = null;
        StringBuilder m = new StringBuilder("Error Sintactico");

        if (info instanceof java_cup.runtime.Symbol) 
        {
            s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) 
            {                
                columna = s.left+1;
                if (s.right>= 0)
                {
                    linea = s.right+ 1;
                }                    
            }
        }

        m.append(" Se esperaba: "+message);
        //System.err.println(m.toString());
        //System.out.println("Error");
        //System.out.println("Error linea:"+linea+", col:"+columna);
        LinkedList<String> toks = new LinkedList();

        if(!expected_token_ids().isEmpty())
        {
            Imprimir("No esta vacia "+ expected_token_ids().size());		  
            for(int w=0; w<expected_token_ids().size(); w++)
            { 
                if(expected_token_ids().get(w) !=sym.error)
                {
                    int tok = (int)expected_token_ids().get(w);                        
                    toks.add( symbol_name_from_id(tok) );
                }
            }
        }

        Imprimir(expected_token_ids().size());
      
        for(int w=0; w<expected_token_ids().size(); w++)
        { 
            if(expected_token_ids().get(w)!=sym.error)
            {
                int tok = (int)expected_token_ids().get(w);
                toks.add( symbol_name_from_id(tok) );
            }
        }
        String esperados = "";
        for(String id : toks)
        {
            if(!esperados.equals(""))
            {
                esperados += ", ";
            }
            esperados += id;
            
        }        
        Utilidades.Singlenton.registrarError(s.value.toString(), "Se esperaba .. " +esperados, ErrorC.TipoError.SINTACTICO, linea, columna);		                  
    }	

    public String symbol_name_from_id(int id){
        return sym.terminalNames[id];
    }

	/*public void addError(Symbol s)
	{
		listaErrores.add(new ErrorC("Sintactico",s.rights.right+1,ConvertirObjectToString(s.value)));
	}*/
	public void Imprimir(Object cad)
	{
		System.out.println(cad.toString());
	}	


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= BLOQUE 
            {
              Object RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloque inst = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Imprimir("Correcto"); raiz = inst; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // BLOQUE ::= llavei LINST llaved 
            {
              Bloque RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Nodo> l = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Bloque(l,lright,lleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // BLOQUE ::= llavei llaved 
            {
              Bloque RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Bloque(new ArrayList<Nodo>(),lright,lleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LINST ::= LINST INST 
            {
              ArrayList<Nodo> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Nodo> lista = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo inst = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 lista.add(inst); RESULT = lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINST",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // LINST ::= INST 
            {
              ArrayList<Nodo> RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo inst = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Nodo> l = new ArrayList<Nodo>(); l.add(inst); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINST",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INST ::= DECLARACION puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Declaracion inst = (Declaracion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = inst; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INST ::= ASIG puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Asignacion inst = (Asignacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INST ::= BLOQUE 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloque inst = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = inst; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INST ::= PRINT 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Imprimir inst = (Imprimir)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = inst; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INST ::= PRINTABLE 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ImprimirT inst = (ImprimirT)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INST ::= WHILE 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		While inst = (While)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INST ::= DOWHILE 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DoWhile inst = (DoWhile)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INST ::= FOR 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		For inst = (For)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INST ::= BREAK 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Break inst = (Break)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INST ::= CONTINUE 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Continuar inst = (Continuar)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INST ::= IF 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		If inst = (If)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INST ::= AUMENTO puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion inst = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INST ::= DECREMENTO puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion inst = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INST ::= ASIGV puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AsignacionVector inst = (AsignacionVector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ACTUALIZACION ::= AUMENTO 
            {
              Expresion RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion inst = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZACION",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ACTUALIZACION ::= DECREMENTO 
            {
              Expresion RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion inst = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZACION",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // IF ::= si pari EXP pard BLOQUE 
            {
              If RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String si = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion condicion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new If(condicion, bloque, siright, sileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // IF ::= si pari EXP pard BLOQUE sino ELSE 
            {
              If RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String si = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion condicion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int inst2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int inst2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		If inst2 = (If)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new If(condicion,bloque,inst2,siright, sileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ELSE ::= IF 
            {
              If RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		If inst = (If)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ELSE ::= BLOQUE 
            {
              If RESULT =null;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new If(new Literal(new Tipo(Tipo.TypePrimitive.BOOL), true, bloqueright,bloqueleft),bloque, bloqueright, bloqueleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CONTINUE ::= continuar puntocoma 
            {
              Continuar RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String inst = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Continuar(instright, instleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTINUE",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // BREAK ::= romper puntocoma 
            {
              Break RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String inst = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Break(instright, instleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BREAK",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // WHILE ::= mientras pari EXP pard BLOQUE 
            {
              While RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String inst = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion condicion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new While(condicion,bloque,instright, instleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DOWHILE ::= hacer BLOQUE mientras pari EXP pard puntocoma 
            {
              DoWhile RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String inst = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion condicion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
            RESULT = new DoWhile(condicion, bloque, iright, ileft);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DOWHILE",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FOR ::= para pari DECLARACION puntocoma EXP puntocoma ACTUALIZACION pard BLOQUE 
            {
              For RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String para = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Declaracion dec = (Declaracion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion condicion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int actleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int actright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion act = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new For(dec,condicion,act,bloque, paraleft,pararight);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // FOR ::= para pari ASIG puntocoma EXP puntocoma ACTUALIZACION pard BLOQUE 
            {
              For RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String para = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Asignacion dec = (Asignacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion condicion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int actleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int actright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion act = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new For(dec,condicion,act,bloque,paraleft,pararight);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // PRINTABLE ::= printable pari pard puntocoma 
            {
              ImprimirT RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		RESULT = new ImprimirT(pright,pleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTABLE",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // PRINT ::= println pari EXP pard puntocoma 
            {
              Imprimir RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion valor = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new Imprimir(valor, pright,pleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINT",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // PRINT ::= print pari EXP pard puntocoma 
            {
              Imprimir RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion valor = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new Imprimir(valor,false,pright,pleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINT",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ASIG ::= id igual EXP 
            {
              Asignacion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion valor = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Asignacion(id, valor, idright,idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIG",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ASIGV ::= id LEXP igual EXP 
            {
              AsignacionVector RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int coordenasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int coordenasright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Expresion> coordenas = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion valor = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AsignacionVector(id, coordenas, valor,  idright,idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGV",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARACION ::= TIPO id 
            {
              Declaracion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Declaracion(t, id , tright,tleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECLARACION ::= TIPO id igual EXP 
            {
              Declaracion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion valor = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Declaracion(t, id, valor, tright,tleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLARACION ::= id id igual EXP 
            {
              Declaracion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion valor = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Declaracion(new Tipo(Tipo.TypePrimitive.OBJETO,t), id, valor, tright,tleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARACION ::= id id 
            {
              Declaracion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Declaracion(new Tipo(Tipo.TypePrimitive.OBJETO,t), id , tright,tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARACION ::= TIPO id NDIM 
            {
              Declaracion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Declaracion(t, id , n, tright,tleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARACION ::= TIPO id NDIM igual EXP 
            {
              Declaracion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion valor = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Declaracion(t, id , n, valor, tright,tleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLARACION ::= id id NDIM 
            {
              Declaracion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Declaracion(new Tipo(t) , id , n, tright,tleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECLARACION ::= id id NDIM igual ARR 
            {
              Declaracion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoNario valor = (NodoNario)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Declaracion(new Tipo(t), id , n, new ExpresionArreglo(valor, valorright, valorleft), tright,tleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECLARACION ::= TIPO id NDIM igual ARR 
            {
              Declaracion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoNario valor = (NodoNario)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Declaracion(t, id , n, new ExpresionArreglo(valor, valorright, valorleft), tright,tleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NDIM ::= NDIM corchetei corcheted 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = n+1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NDIM",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NDIM ::= corchetei corcheted 
            {
              Integer RESULT =null;
		 RESULT = 1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NDIM",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXP ::= EXP and EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new And(opi, opd, opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXP ::= EXP or EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Or(opi, opd, opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXP ::= not EXP 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Not(op, opright,opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXP ::= EXP igualigual EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Igual(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXP ::= EXP desigual EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Desigual(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXP ::= EXP mayor EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Mayor(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXP ::= EXP mayorigual EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new MayorIgual(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXP ::= EXP menor EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Menor(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXP ::= EXP menorigual EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new MenorIgual(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXP ::= EXP suma EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Suma(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXP ::= EXP menos EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Resta(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXP ::= EXP xor EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Xor(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXP ::= EXP multi EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Multiplicacion(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXP ::= EXP div EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Division(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXP ::= EXP modulo EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Modulo(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXP ::= TER 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Ternario op = (Ternario)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = op;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXP ::= menos EXP 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Menos(op, opright,opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXP ::= AUMENTO 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = op;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXP ::= potencia pari EXP coma EXP pard 
            {
              Expresion RESULT =null;
		int potleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int potright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String pot = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Potencia(opi,opd,potright,potleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXP ::= EXP instanceof_ id 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new InstanceOf(op,tipo, opright, opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXP ::= DECREMENTO 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = op;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXP ::= EXP punto id pari pard 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new Llamada(op,t, opright,opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXP ::= EXP punto tostring pari pard 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		RESULT = new ToString(op,opright,opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXP ::= EXP punto tolower pari pard 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		RESULT = new ToLower(op,opright,opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXP ::= EXP punto id 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int atribleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int atribright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String atrib = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ToLower(op,opright,opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EXP ::= EXP punto touper pari pard 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		RESULT = new ToUper(op,opright,opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXP ::= pari TIPO pard EXP 
            {
              Expresion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Casteo(op,tipo, tright, tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXP ::= pari id pard EXP 
            {
              Expresion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Casteo(op,tipo, tright, tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXP ::= entero 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		int v = (int)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Tipo.TypePrimitive.INT), v, vright,vleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXP ::= decimal 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		double v = (double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Tipo.TypePrimitive.DOUBLE), v, vright,vleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXP ::= booleano 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		boolean v = (boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Tipo.TypePrimitive.BOOL), v, vright,vleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXP ::= cadena 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Tipo.TypePrimitive.STRING), v, vright,vleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXP ::= caracter 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		char v = (char)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Tipo.TypePrimitive.CHAR), v, vright,vleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXP ::= id 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Variable(v, vright,vleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXP ::= nuevo TIPO LEXP 
            {
              Expresion RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expresion> l = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExpresionArreglo(tipo,l,nright,nleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXP ::= nuevo id LEXP 
            {
              Expresion RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expresion> l = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExpresionArreglo(new Tipo(tipo), l,nright,nleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXP ::= pari EXP pard 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = op;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXP ::= EXP LEXP 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion id = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int coorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int coorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expresion> coor = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AccesoVector(id, coor , idright, idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // LEXP ::= LEXP corchetei EXP corcheted 
            {
              ArrayList<Expresion> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<Expresion> l = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		l.add(exp); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LEXP",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // LEXP ::= corchetei EXP corcheted 
            {
              ArrayList<Expresion> RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 ArrayList<Expresion> l = new ArrayList<Expresion>(); l.add(exp); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LEXP",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ARR ::= llavei LITEM llaved 
            {
              NodoNario RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoNario nodo = (NodoNario)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = nodo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARR",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // LITEM ::= LITEM coma ITEM 
            {
              NodoNario RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoNario nodo = (NodoNario)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int itemleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int itemright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoNario item = (NodoNario)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 nodo.addHijo(item); RESULT = nodo; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LITEM",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // LITEM ::= ITEM 
            {
              NodoNario RESULT =null;
		int itemleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int itemright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoNario item = (NodoNario)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 NodoNario nodo = new NodoNario(); nodo.addHijo(item); RESULT = nodo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LITEM",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ITEM ::= EXP 
            {
              NodoNario RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NodoNario(exp);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ITEM",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ITEM ::= ARR 
            {
              NodoNario RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoNario exp = (NodoNario)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = exp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ITEM",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // AUMENTO ::= EXP aumento 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Aumento(op, opright, opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AUMENTO",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // AUMENTO ::= aumento EXP 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Preaumento(op, opright, opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AUMENTO",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // DECREMENTO ::= EXP decremento 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Decremento(op, opright, opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECREMENTO",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // DECREMENTO ::= decremento EXP 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Predecremento(op, opright, opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECREMENTO",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // TER ::= EXP interrogante EXP dospuntos EXP 
            {
              Ternario RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion v = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion f = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Ternario(c,v,f,cright,cleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TER",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // TIPO ::= tint 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Tipo(Tipo.TypePrimitive.INT);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // TIPO ::= tchar 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =  new Tipo(Tipo.TypePrimitive.CHAR);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // TIPO ::= tdouble 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Tipo(Tipo.TypePrimitive.DOUBLE);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // TIPO ::= tbool 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Tipo(Tipo.TypePrimitive.BOOL);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // TIPO ::= tstring 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Tipo(Tipo.TypePrimitive.STRING);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
