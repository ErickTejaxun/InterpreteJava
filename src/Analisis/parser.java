
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analisis;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import AST.*;
import Utilidades.ErrorC;
import AST.Instruccion.*;
import AST.Instruccion.Ciclos.*;
import AST.Expresion.*;
import AST.Entorno.*;
import AST.Expresion.Aritmetica.*;
import AST.Expresion.Relacional.*;
import AST.Expresion.Logica.*;
import AST.Expresion.Arreglo.*;
import AST.Expresion.Casteo.*;
import AST.Expresion.Casteo.Explicito.*;
import AST.Expresion.Metodos.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\221\000\002\002\004\000\002\012\003\000\002\056" +
    "\004\000\002\056\003\000\002\002\005\000\002\002\004" +
    "\000\002\003\004\000\002\003\003\000\002\004\004\000" +
    "\002\004\004\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\004\000\002\004\004\000\002\004\004\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\011\006\000\002\011\006\000\002\011\006\000\002\011" +
    "\006\000\002\027\003\000\002\027\003\000\002\046\011" +
    "\000\002\046\012\000\002\045\004\000\002\045\003\000" +
    "\002\043\006\000\002\044\005\000\002\023\007\000\002" +
    "\023\011\000\002\024\003\000\002\024\003\000\002\022" +
    "\004\000\002\021\004\000\002\017\007\000\002\020\011" +
    "\000\002\042\012\000\002\026\013\000\002\026\013\000" +
    "\002\015\006\000\002\014\007\000\002\014\007\000\002" +
    "\016\005\000\002\033\006\000\002\005\004\000\002\040" +
    "\005\000\002\040\003\000\002\041\003\000\002\041\005" +
    "\000\002\041\004\000\002\041\006\000\002\041\006\000" +
    "\002\037\003\000\002\037\003\000\002\031\005\000\002" +
    "\031\004\000\002\006\005\000\002\006\005\000\002\006" +
    "\004\000\002\006\005\000\002\006\005\000\002\006\005" +
    "\000\002\006\005\000\002\006\005\000\002\006\005\000" +
    "\002\006\005\000\002\006\005\000\002\006\005\000\002" +
    "\006\005\000\002\006\005\000\002\006\005\000\002\006" +
    "\003\000\002\006\004\000\002\006\003\000\002\006\010" +
    "\000\002\006\005\000\002\006\003\000\002\006\007\000" +
    "\002\006\007\000\002\006\007\000\002\006\005\000\002" +
    "\006\007\000\002\006\006\000\002\006\006\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\005\000" +
    "\002\006\005\000\002\006\005\000\002\006\004\000\002" +
    "\006\003\000\002\057\005\000\002\030\003\000\002\030" +
    "\003\000\002\054\004\000\002\054\004\000\002\055\010" +
    "\000\002\055\007\000\002\053\005\000\002\053\003\000" +
    "\002\053\002\000\002\052\004\000\002\052\005\000\002" +
    "\052\005\000\002\052\006\000\002\051\003\000\002\051" +
    "\003\000\002\047\004\000\002\047\003\000\002\050\003" +
    "\000\002\050\003\000\002\050\003\000\002\050\003\000" +
    "\002\050\003\000\002\050\003\000\002\032\006\000\002" +
    "\032\005\000\002\036\005\000\002\035\005\000\002\035" +
    "\003\000\002\034\003\000\002\034\003\000\002\007\004" +
    "\000\002\007\004\000\002\010\004\000\002\010\004\000" +
    "\002\025\007\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u012f\000\034\004\014\005\017\006\015\007\006\010" +
    "\022\016\025\034\011\036\024\045\004\052\020\053\013" +
    "\054\010\057\012\001\002\000\034\004\uff83\005\uff83\006" +
    "\uff83\007\uff83\010\uff83\016\uff83\034\uff83\036\uff83\045\uff83" +
    "\052\uff83\053\uff83\054\uff83\057\uff83\001\002\000\004\016" +
    "\uffc4\001\002\000\010\015\uff72\016\uff72\017\uff72\001\002" +
    "\000\034\004\uff88\005\uff88\006\uff88\007\uff88\010\uff88\016" +
    "\uff88\034\uff88\036\uff88\045\uff88\052\uff88\053\uff88\054\uff88" +
    "\057\uff88\001\002\000\034\004\uff87\005\uff87\006\uff87\007" +
    "\uff87\010\uff87\016\uff87\034\uff87\036\uff87\045\uff87\052\uff87" +
    "\053\uff87\054\uff87\057\uff87\001\002\000\004\016\uff8a\001" +
    "\002\000\034\004\uff82\005\uff82\006\uff82\007\uff82\010\uff82" +
    "\016\uff82\034\uff82\036\uff82\045\uff82\052\uff82\053\uff82\054" +
    "\uff82\057\uff82\001\002\000\034\004\uff86\005\uff86\006\uff86" +
    "\007\uff86\010\uff86\016\uff86\034\uff86\036\uff86\045\uff86\052" +
    "\uff86\053\uff86\054\uff86\057\uff86\001\002\000\010\015\uff75" +
    "\016\uff75\017\uff75\001\002\000\010\015\uff74\016\uff74\017" +
    "\uff74\001\002\000\004\016\uff8b\001\002\000\010\015\uff73" +
    "\016\uff73\017\uff73\001\002\000\034\004\uff85\005\uff85\006" +
    "\uff85\007\uff85\010\uff85\016\uff85\034\uff85\036\uff85\045\uff85" +
    "\052\uff85\053\uff85\054\uff85\057\uff85\001\002\000\036\002" +
    "\000\004\014\005\017\006\015\007\006\010\022\016\025" +
    "\034\011\036\024\045\004\052\020\053\013\054\010\057" +
    "\012\001\002\000\010\015\uff71\016\uff71\017\uff71\001\002" +
    "\000\006\011\063\012\065\001\002\000\034\004\uff84\005" +
    "\uff84\006\uff84\007\uff84\010\uff84\016\uff84\034\uff84\036\uff84" +
    "\045\uff84\052\uff84\053\uff84\054\uff84\057\uff84\001\002\000" +
    "\004\016\uffc3\001\002\000\004\016\057\001\002\000\034" +
    "\004\014\005\017\006\015\007\006\010\022\016\025\034" +
    "\011\036\024\045\004\052\020\053\013\054\010\057\012" +
    "\001\002\000\004\002\032\001\002\000\036\002\ufffe\004" +
    "\ufffe\005\ufffe\006\ufffe\007\ufffe\010\ufffe\016\ufffe\034\ufffe" +
    "\036\ufffe\045\ufffe\052\ufffe\053\ufffe\054\ufffe\057\ufffe\001" +
    "\002\000\004\002\001\001\002\000\004\016\035\001\002" +
    "\000\034\004\uff89\005\uff89\006\uff89\007\uff89\010\uff89\016" +
    "\uff89\034\uff89\036\uff89\045\uff89\052\uff89\053\uff89\054\uff89" +
    "\057\uff89\001\002\000\004\014\036\001\002\000\024\004" +
    "\014\005\017\006\015\007\006\010\022\015\uff90\016\025" +
    "\024\uff90\045\042\001\002\000\006\015\uff91\024\uff91\001" +
    "\002\000\004\016\055\001\002\000\006\015\053\024\052" +
    "\001\002\000\016\004\014\005\017\006\015\007\006\010" +
    "\022\016\025\001\002\000\004\016\044\001\002\000\010" +
    "\015\uff8e\017\046\024\uff8e\001\002\000\010\015\uff8c\017" +
    "\050\024\uff8c\001\002\000\004\020\047\001\002\000\014" +
    "\011\uffc1\015\uffc1\017\uffc1\021\uffc1\024\uffc1\001\002\000" +
    "\004\020\051\001\002\000\014\011\uffc2\015\uffc2\017\uffc2" +
    "\021\uffc2\024\uffc2\001\002\000\020\004\014\005\017\006" +
    "\015\007\006\010\022\016\025\045\042\001\002\000\006" +
    "\011\uff94\012\uff94\001\002\000\006\015\uff92\024\uff92\001" +
    "\002\000\010\015\uff8f\017\046\024\uff8f\001\002\000\010" +
    "\015\uff8d\017\050\024\uff8d\001\002\000\004\014\060\001" +
    "\002\000\024\004\014\005\017\006\015\007\006\010\022" +
    "\015\uff90\016\025\024\uff90\045\042\001\002\000\006\015" +
    "\062\024\052\001\002\000\006\011\uff93\012\uff93\001\002" +
    "\000\036\002\uff95\004\uff95\005\uff95\006\uff95\007\uff95\010" +
    "\uff95\016\uff95\034\uff95\036\uff95\045\uff95\052\uff95\053\uff95" +
    "\054\uff95\057\uff95\001\002\000\036\002\uff96\004\uff96\005" +
    "\uff96\006\uff96\007\uff96\010\uff96\016\uff96\034\uff96\036\uff96" +
    "\045\uff96\052\uff96\053\uff96\054\uff96\057\uff96\001\002\000" +
    "\110\004\014\005\017\006\015\007\006\010\022\012\065" +
    "\013\102\014\105\016\127\022\142\023\130\033\126\043" +
    "\133\051\120\055\145\061\076\063\077\064\144\065\117" +
    "\066\121\071\104\072\115\073\070\074\066\077\113\100" +
    "\136\102\137\105\103\114\111\120\072\122\151\123\101" +
    "\124\122\125\146\126\140\001\002\000\004\011\u0130\001" +
    "\002\000\054\011\u012f\017\uffaf\025\uffaf\026\uffaf\027\uffaf" +
    "\030\uffaf\031\uffaf\032\uffaf\050\uffaf\075\uffaf\077\uffaf\100" +
    "\uffaf\101\uffaf\103\uffaf\104\uffaf\113\uffaf\114\uffaf\115\uffaf" +
    "\116\uffaf\117\uffaf\121\uffaf\001\002\000\004\011\u012e\001" +
    "\002\000\004\016\357\001\002\000\004\014\u012b\001\002" +
    "\000\110\004\014\005\017\006\015\007\006\010\022\012" +
    "\065\013\u012a\014\105\016\127\022\142\023\130\033\126" +
    "\043\133\051\120\055\145\061\076\063\077\064\144\065" +
    "\117\066\121\071\104\072\115\073\070\074\066\077\113" +
    "\100\136\102\137\105\103\114\111\120\072\122\151\123" +
    "\101\124\122\125\146\126\140\001\002\000\066\011\uff9a" +
    "\013\uff9a\015\uff9a\017\uff9a\020\uff9a\024\uff9a\025\uff9a\026" +
    "\uff9a\027\uff9a\030\uff9a\031\uff9a\032\uff9a\050\uff9a\075\uff9a" +
    "\076\uff9a\077\uff9a\100\uff9a\101\uff9a\103\uff9a\104\uff9a\113" +
    "\uff9a\114\uff9a\115\uff9a\116\uff9a\117\uff9a\121\uff9a\001\002" +
    "\000\114\004\ufff0\005\ufff0\006\ufff0\007\ufff0\010\ufff0\012" +
    "\ufff0\013\ufff0\014\ufff0\016\ufff0\022\ufff0\023\ufff0\033\ufff0" +
    "\037\ufff0\042\ufff0\043\ufff0\051\ufff0\055\ufff0\061\ufff0\063" +
    "\ufff0\064\ufff0\065\ufff0\066\ufff0\071\ufff0\072\ufff0\073\ufff0" +
    "\074\ufff0\077\ufff0\100\ufff0\102\ufff0\105\ufff0\114\ufff0\120" +
    "\ufff0\122\ufff0\123\ufff0\124\ufff0\125\ufff0\126\ufff0\001\002" +
    "\000\004\014\u0118\001\002\000\004\014\u0115\001\002\000" +
    "\114\004\ufff2\005\ufff2\006\ufff2\007\ufff2\010\ufff2\012\ufff2" +
    "\013\ufff2\014\ufff2\016\ufff2\022\ufff2\023\ufff2\033\ufff2\037" +
    "\ufff2\042\ufff2\043\ufff2\051\ufff2\055\ufff2\061\ufff2\063\ufff2" +
    "\064\ufff2\065\ufff2\066\ufff2\071\ufff2\072\ufff2\073\ufff2\074" +
    "\ufff2\077\ufff2\100\ufff2\102\ufff2\105\ufff2\114\ufff2\120\ufff2" +
    "\122\ufff2\123\ufff2\124\ufff2\125\ufff2\126\ufff2\001\002\000" +
    "\066\011\uffa0\013\uffa0\015\uffa0\017\uffa0\020\uffa0\024\uffa0" +
    "\025\uffa0\026\uffa0\027\uffa0\030\uffa0\031\uffa0\032\uffa0\050" +
    "\uffa0\075\uffa0\076\uffa0\077\uffa0\100\uffa0\101\uffa0\103\uffa0" +
    "\104\uffa0\113\uffa0\114\uffa0\115\uffa0\116\uffa0\117\uffa0\121" +
    "\uffa0\001\002\000\136\002\ufffc\004\ufffc\005\ufffc\006\ufffc" +
    "\007\ufffc\010\ufffc\012\ufffc\013\ufffc\014\ufffc\016\ufffc\022" +
    "\ufffc\023\ufffc\033\ufffc\034\ufffc\036\ufffc\037\ufffc\042\ufffc" +
    "\043\ufffc\045\ufffc\051\ufffc\052\ufffc\053\ufffc\054\ufffc\055" +
    "\ufffc\057\ufffc\061\ufffc\063\ufffc\064\ufffc\065\ufffc\066\ufffc" +
    "\071\ufffc\072\ufffc\073\ufffc\074\ufffc\077\ufffc\100\ufffc\102" +
    "\ufffc\105\ufffc\107\ufffc\114\ufffc\120\ufffc\122\ufffc\123\ufffc" +
    "\124\ufffc\125\ufffc\126\ufffc\001\002\000\004\014\u010d\001" +
    "\002\000\004\014\u0109\001\002\000\056\004\014\005\017" +
    "\006\015\007\006\010\022\014\105\016\u0103\033\126\051" +
    "\120\063\077\064\144\065\117\066\121\077\113\100\136" +
    "\102\137\114\111\122\151\123\101\124\122\125\146\126" +
    "\140\001\002\000\114\004\uffef\005\uffef\006\uffef\007\uffef" +
    "\010\uffef\012\uffef\013\uffef\014\uffef\016\uffef\022\uffef\023" +
    "\uffef\033\uffef\037\uffef\042\uffef\043\uffef\051\uffef\055\uffef" +
    "\061\uffef\063\uffef\064\uffef\065\uffef\066\uffef\071\uffef\072" +
    "\uffef\073\uffef\074\uffef\077\uffef\100\uffef\102\uffef\105\uffef" +
    "\114\uffef\120\uffef\122\uffef\123\uffef\124\uffef\125\uffef\126" +
    "\uffef\001\002\000\052\017\161\025\202\026\172\027\204" +
    "\030\165\031\160\032\167\050\177\075\171\077\163\100" +
    "\174\101\166\103\203\104\162\113\201\114\164\115\173" +
    "\116\170\117\175\121\200\001\002\000\114\004\uffe9\005" +
    "\uffe9\006\uffe9\007\uffe9\010\uffe9\012\uffe9\013\uffe9\014\uffe9" +
    "\016\uffe9\022\uffe9\023\uffe9\033\uffe9\037\uffe9\042\uffe9\043" +
    "\uffe9\051\uffe9\055\uffe9\061\uffe9\063\uffe9\064\uffe9\065\uffe9" +
    "\066\uffe9\071\uffe9\072\uffe9\073\uffe9\074\uffe9\077\uffe9\100" +
    "\uffe9\102\uffe9\105\uffe9\114\uffe9\120\uffe9\122\uffe9\123\uffe9" +
    "\124\uffe9\125\uffe9\126\uffe9\001\002\000\044\014\105\016" +
    "\156\033\126\051\120\063\077\064\144\065\117\066\121" +
    "\077\113\100\136\102\137\114\111\122\151\123\101\124" +
    "\122\125\146\126\140\001\002\000\114\004\ufff5\005\ufff5" +
    "\006\ufff5\007\ufff5\010\ufff5\012\ufff5\013\ufff5\014\ufff5\016" +
    "\ufff5\022\ufff5\023\ufff5\033\ufff5\037\ufff5\042\ufff5\043\ufff5" +
    "\051\ufff5\055\ufff5\061\ufff5\063\ufff5\064\ufff5\065\ufff5\066" +
    "\ufff5\071\ufff5\072\ufff5\073\ufff5\074\ufff5\077\ufff5\100\ufff5" +
    "\102\ufff5\105\ufff5\114\ufff5\120\ufff5\122\ufff5\123\ufff5\124" +
    "\ufff5\125\ufff5\126\ufff5\001\002\000\044\014\105\016\156" +
    "\033\126\051\120\063\077\064\144\065\117\066\121\077" +
    "\113\100\136\102\137\114\111\122\151\123\101\124\122" +
    "\125\146\126\140\001\002\000\004\011\376\001\002\000" +
    "\004\014\323\001\002\000\054\011\322\017\uffac\025\uffac" +
    "\026\uffac\027\uffac\030\uffac\031\uffac\032\uffac\050\uffac\075" +
    "\uffac\077\uffac\100\uffac\101\uffac\103\uffac\104\uffac\113\uffac" +
    "\114\uffac\115\uffac\116\uffac\117\uffac\121\uffac\001\002\000" +
    "\004\014\317\001\002\000\016\004\014\005\017\006\015" +
    "\007\006\010\022\016\314\001\002\000\004\014\310\001" +
    "\002\000\066\011\uffa4\013\uffa4\015\uffa4\017\uffa4\020\uffa4" +
    "\024\uffa4\025\uffa4\026\uffa4\027\uffa4\030\uffa4\031\uffa4\032" +
    "\uffa4\050\uffa4\075\uffa4\076\uffa4\077\uffa4\100\uffa4\101\uffa4" +
    "\103\uffa4\104\uffa4\113\uffa4\114\uffa4\115\uffa4\116\uffa4\117" +
    "\uffa4\121\uffa4\001\002\000\114\004\ufff1\005\ufff1\006\ufff1" +
    "\007\ufff1\010\ufff1\012\ufff1\013\ufff1\014\ufff1\016\ufff1\022" +
    "\ufff1\023\ufff1\033\ufff1\037\ufff1\042\ufff1\043\ufff1\051\ufff1" +
    "\055\ufff1\061\ufff1\063\ufff1\064\ufff1\065\ufff1\066\ufff1\071" +
    "\ufff1\072\ufff1\073\ufff1\074\ufff1\077\ufff1\100\ufff1\102\ufff1" +
    "\105\ufff1\114\ufff1\120\ufff1\122\ufff1\123\ufff1\124\ufff1\125" +
    "\ufff1\126\ufff1\001\002\000\114\004\uffea\005\uffea\006\uffea" +
    "\007\uffea\010\uffea\012\uffea\013\uffea\014\uffea\016\uffea\022" +
    "\uffea\023\uffea\033\uffea\037\uffea\042\uffea\043\uffea\051\uffea" +
    "\055\uffea\061\uffea\063\uffea\064\uffea\065\uffea\066\uffea\071" +
    "\uffea\072\uffea\073\uffea\074\uffea\077\uffea\100\uffea\102\uffea" +
    "\105\uffea\114\uffea\120\uffea\122\uffea\123\uffea\124\uffea\125" +
    "\uffea\126\uffea\001\002\000\004\011\307\001\002\000\004" +
    "\014\302\001\002\000\056\016\uffc3\017\161\021\275\025" +
    "\uff9f\026\uff9f\027\uff9f\030\uff9f\031\uff9f\032\uff9f\050\uff9f" +
    "\075\uff9f\077\uff9f\100\uff9f\101\uff9f\103\uff9f\104\uff9f\113" +
    "\uff9f\114\uff9f\115\uff9f\116\uff9f\117\uff9f\121\uff9f\001\002" +
    "\000\004\014\271\001\002\000\114\004\uffeb\005\uffeb\006" +
    "\uffeb\007\uffeb\010\uffeb\012\uffeb\013\uffeb\014\uffeb\016\uffeb" +
    "\022\uffeb\023\uffeb\033\uffeb\037\uffeb\042\uffeb\043\uffeb\051" +
    "\uffeb\055\uffeb\061\uffeb\063\uffeb\064\uffeb\065\uffeb\066\uffeb" +
    "\071\uffeb\072\uffeb\073\uffeb\074\uffeb\077\uffeb\100\uffeb\102" +
    "\uffeb\105\uffeb\114\uffeb\120\uffeb\122\uffeb\123\uffeb\124\uffeb" +
    "\125\uffeb\126\uffeb\001\002\000\114\004\ufff3\005\ufff3\006" +
    "\ufff3\007\ufff3\010\ufff3\012\ufff3\013\ufff3\014\ufff3\016\ufff3" +
    "\022\ufff3\023\ufff3\033\ufff3\037\ufff3\042\ufff3\043\ufff3\051" +
    "\ufff3\055\ufff3\061\ufff3\063\ufff3\064\ufff3\065\ufff3\066\ufff3" +
    "\071\ufff3\072\ufff3\073\ufff3\074\ufff3\077\ufff3\100\ufff3\102" +
    "\ufff3\105\ufff3\114\ufff3\120\ufff3\122\ufff3\123\ufff3\124\ufff3" +
    "\125\ufff3\126\ufff3\001\002\000\004\012\065\001\002\000" +
    "\004\011\262\001\002\000\114\004\ufff4\005\ufff4\006\ufff4" +
    "\007\ufff4\010\ufff4\012\ufff4\013\ufff4\014\ufff4\016\ufff4\022" +
    "\ufff4\023\ufff4\033\ufff4\037\ufff4\042\ufff4\043\ufff4\051\ufff4" +
    "\055\ufff4\061\ufff4\063\ufff4\064\ufff4\065\ufff4\066\ufff4\071" +
    "\ufff4\072\ufff4\073\ufff4\074\ufff4\077\ufff4\100\ufff4\102\ufff4" +
    "\105\ufff4\114\ufff4\120\ufff4\122\ufff4\123\ufff4\124\ufff4\125" +
    "\ufff4\126\ufff4\001\002\000\044\014\105\016\156\033\126" +
    "\051\120\063\077\064\144\065\117\066\121\077\113\100" +
    "\136\102\137\114\111\122\151\123\101\124\122\125\146" +
    "\126\140\001\002\000\044\014\105\016\156\033\126\051" +
    "\120\063\077\064\144\065\117\066\121\077\113\100\136" +
    "\102\137\114\111\122\151\123\101\124\122\125\146\126" +
    "\140\001\002\000\066\011\uffa2\013\uffa2\015\uffa2\017\uffa2" +
    "\020\uffa2\024\uffa2\025\uffa2\026\uffa2\027\uffa2\030\uffa2\031" +
    "\uffa2\032\uffa2\050\uffa2\075\uffa2\076\uffa2\077\uffa2\100\uffa2" +
    "\101\uffa2\103\uffa2\104\uffa2\113\uffa2\114\uffa2\115\uffa2\116" +
    "\uffa2\117\uffa2\121\uffa2\001\002\000\114\004\ufff7\005\ufff7" +
    "\006\ufff7\007\ufff7\010\ufff7\012\ufff7\013\ufff7\014\ufff7\016" +
    "\ufff7\022\ufff7\023\ufff7\033\ufff7\037\ufff7\042\ufff7\043\ufff7" +
    "\051\ufff7\055\ufff7\061\ufff7\063\ufff7\064\ufff7\065\ufff7\066" +
    "\ufff7\071\ufff7\072\ufff7\073\ufff7\074\ufff7\077\ufff7\100\ufff7" +
    "\102\ufff7\105\ufff7\114\ufff7\120\ufff7\122\ufff7\123\ufff7\124" +
    "\ufff7\125\ufff7\126\ufff7\001\002\000\004\014\254\001\002" +
    "\000\066\011\uffb1\013\uffb1\015\uffb1\017\uffb1\020\uffb1\024" +
    "\uffb1\025\uffb1\026\uffb1\027\uffb1\030\uffb1\031\uffb1\032\uffb1" +
    "\050\uffb1\075\uffb1\076\uffb1\077\uffb1\100\uffb1\101\uffb1\103" +
    "\uffb1\104\uffb1\113\uffb1\114\uffb1\115\uffb1\116\uffb1\117\uffb1" +
    "\121\uffb1\001\002\000\004\014\251\001\002\000\046\014" +
    "\105\016\156\033\126\035\155\051\120\063\077\064\144" +
    "\065\117\066\121\077\113\100\136\102\137\114\111\122" +
    "\151\123\101\124\122\125\146\126\140\001\002\000\066" +
    "\011\uffa3\013\uffa3\015\uffa3\017\uffa3\020\uffa3\024\uffa3\025" +
    "\uffa3\026\uffa3\027\uffa3\030\uffa3\031\uffa3\032\uffa3\050\uffa3" +
    "\075\uffa3\076\uffa3\077\uffa3\100\uffa3\101\uffa3\103\uffa3\104" +
    "\uffa3\113\uffa3\114\uffa3\115\uffa3\116\uffa3\117\uffa3\121\uffa3" +
    "\001\002\000\114\004\ufffa\005\ufffa\006\ufffa\007\ufffa\010" +
    "\ufffa\012\ufffa\013\ufffa\014\ufffa\016\ufffa\022\ufffa\023\ufffa" +
    "\033\ufffa\037\ufffa\042\ufffa\043\ufffa\051\ufffa\055\ufffa\061" +
    "\ufffa\063\ufffa\064\ufffa\065\ufffa\066\ufffa\071\ufffa\072\ufffa" +
    "\073\ufffa\074\ufffa\077\ufffa\100\ufffa\102\ufffa\105\ufffa\114" +
    "\ufffa\120\ufffa\122\ufffa\123\ufffa\124\ufffa\125\ufffa\126\ufffa" +
    "\001\002\000\114\004\ufff6\005\ufff6\006\ufff6\007\ufff6\010" +
    "\ufff6\012\ufff6\013\ufff6\014\ufff6\016\ufff6\022\ufff6\023\ufff6" +
    "\033\ufff6\037\ufff6\042\ufff6\043\ufff6\051\ufff6\055\ufff6\061" +
    "\ufff6\063\ufff6\064\ufff6\065\ufff6\066\ufff6\071\ufff6\072\ufff6" +
    "\073\ufff6\074\ufff6\077\ufff6\100\ufff6\102\ufff6\105\ufff6\114" +
    "\ufff6\120\ufff6\122\ufff6\123\ufff6\124\ufff6\125\ufff6\126\ufff6" +
    "\001\002\000\066\011\uffa1\013\uffa1\015\uffa1\017\uffa1\020" +
    "\uffa1\024\uffa1\025\uffa1\026\uffa1\027\uffa1\030\uffa1\031\uffa1" +
    "\032\uffa1\050\uffa1\075\uffa1\076\uffa1\077\uffa1\100\uffa1\101" +
    "\uffa1\103\uffa1\104\uffa1\113\uffa1\114\uffa1\115\uffa1\116\uffa1" +
    "\117\uffa1\121\uffa1\001\002\000\004\011\250\001\002\000" +
    "\054\011\uff98\017\161\025\202\026\172\027\204\030\165" +
    "\031\160\032\167\050\177\075\171\077\163\100\174\101" +
    "\166\103\203\104\162\113\201\114\164\115\173\116\170" +
    "\117\175\121\200\001\002\000\066\011\uffaf\013\uffaf\015" +
    "\uffaf\017\uffaf\020\uffaf\024\uffaf\025\uffaf\026\uffaf\027\uffaf" +
    "\030\uffaf\031\uffaf\032\uffaf\050\uffaf\075\uffaf\076\uffaf\077" +
    "\uffaf\100\uffaf\101\uffaf\103\uffaf\104\uffaf\113\uffaf\114\uffaf" +
    "\115\uffaf\116\uffaf\117\uffaf\121\uffaf\001\002\000\004\011" +
    "\uff97\001\002\000\066\011\uff9f\013\uff9f\015\uff9f\017\uff9f" +
    "\020\uff9f\024\uff9f\025\uff9f\026\uff9f\027\uff9f\030\uff9f\031" +
    "\uff9f\032\uff9f\050\uff9f\075\uff9f\076\uff9f\077\uff9f\100\uff9f" +
    "\101\uff9f\103\uff9f\104\uff9f\113\uff9f\114\uff9f\115\uff9f\116" +
    "\uff9f\117\uff9f\121\uff9f\001\002\000\066\011\uffac\013\uffac" +
    "\015\uffac\017\uffac\020\uffac\024\uffac\025\uffac\026\uffac\027" +
    "\uffac\030\uffac\031\uffac\032\uffac\050\uffac\075\uffac\076\uffac" +
    "\077\uffac\100\uffac\101\uffac\103\uffac\104\uffac\113\uffac\114" +
    "\uffac\115\uffac\116\uffac\117\uffac\121\uffac\001\002\000\044" +
    "\014\105\016\156\033\126\051\120\063\077\064\144\065" +
    "\117\066\121\077\113\100\136\102\137\114\111\122\151" +
    "\123\101\124\122\125\146\126\140\001\002\000\044\014" +
    "\105\016\156\033\126\051\120\063\077\064\144\065\117" +
    "\066\121\077\113\100\136\102\137\114\111\122\151\123" +
    "\101\124\122\125\146\126\140\001\002\000\044\014\105" +
    "\016\156\033\126\051\120\063\077\064\144\065\117\066" +
    "\121\077\113\100\136\102\137\114\111\122\151\123\101" +
    "\124\122\125\146\126\140\001\002\000\066\011\uff7a\013" +
    "\uff7a\015\uff7a\017\uff7a\020\uff7a\024\uff7a\025\uff7a\026\uff7a" +
    "\027\uff7a\030\uff7a\031\uff7a\032\uff7a\050\uff7a\075\uff7a\076" +
    "\uff7a\077\uff7a\100\uff7a\101\uff7a\103\uff7a\104\uff7a\113\uff7a" +
    "\114\uff7a\115\uff7a\116\uff7a\117\uff7a\121\uff7a\001\002\000" +
    "\044\014\105\016\156\033\126\051\120\063\077\064\144" +
    "\065\117\066\121\077\113\100\136\102\137\114\111\122" +
    "\151\123\101\124\122\125\146\126\140\001\002\000\044" +
    "\014\105\016\156\033\126\051\120\063\077\064\144\065" +
    "\117\066\121\077\113\100\136\102\137\114\111\122\151" +
    "\123\101\124\122\125\146\126\140\001\002\000\012\016" +
    "\231\110\230\111\226\112\227\001\002\000\044\014\105" +
    "\016\156\033\126\051\120\063\077\064\144\065\117\066" +
    "\121\077\113\100\136\102\137\114\111\122\151\123\101" +
    "\124\122\125\146\126\140\001\002\000\044\014\105\016" +
    "\156\033\126\051\120\063\077\064\144\065\117\066\121" +
    "\077\113\100\136\102\137\114\111\122\151\123\101\124" +
    "\122\125\146\126\140\001\002\000\044\014\105\016\156" +
    "\033\126\051\120\063\077\064\144\065\117\066\121\077" +
    "\113\100\136\102\137\114\111\122\151\123\101\124\122" +
    "\125\146\126\140\001\002\000\044\014\105\016\156\033" +
    "\126\051\120\063\077\064\144\065\117\066\121\077\113" +
    "\100\136\102\137\114\111\122\151\123\101\124\122\125" +
    "\146\126\140\001\002\000\044\014\105\016\156\033\126" +
    "\051\120\063\077\064\144\065\117\066\121\077\113\100" +
    "\136\102\137\114\111\122\151\123\101\124\122\125\146" +
    "\126\140\001\002\000\066\011\uff78\013\uff78\015\uff78\017" +
    "\uff78\020\uff78\024\uff78\025\uff78\026\uff78\027\uff78\030\uff78" +
    "\031\uff78\032\uff78\050\uff78\075\uff78\076\uff78\077\uff78\100" +
    "\uff78\101\uff78\103\uff78\104\uff78\113\uff78\114\uff78\115\uff78" +
    "\116\uff78\117\uff78\121\uff78\001\002\000\044\014\105\016" +
    "\156\033\126\051\120\063\077\064\144\065\117\066\121" +
    "\077\113\100\136\102\137\114\111\122\151\123\101\124" +
    "\122\125\146\126\140\001\002\000\066\011\uff9b\013\uff9b" +
    "\015\uff9b\017\213\020\uff9b\024\uff9b\025\uff9b\026\uff9b\027" +
    "\uff9b\030\uff9b\031\uff9b\032\uff9b\050\uff9b\075\uff9b\076\uff9b" +
    "\077\uff9b\100\uff9b\101\uff9b\103\uff9b\104\uff9b\113\uff9b\114" +
    "\uff9b\115\uff9b\116\uff9b\117\uff9b\121\uff9b\001\002\000\004" +
    "\016\212\001\002\000\044\014\105\016\156\033\126\051" +
    "\120\063\077\064\144\065\117\066\121\077\113\100\136" +
    "\102\137\114\111\122\151\123\101\124\122\125\146\126" +
    "\140\001\002\000\044\014\105\016\156\033\126\051\120" +
    "\063\077\064\144\065\117\066\121\077\113\100\136\102" +
    "\137\114\111\122\151\123\101\124\122\125\146\126\140" +
    "\001\002\000\044\014\105\016\156\033\126\051\120\063" +
    "\077\064\144\065\117\066\121\077\113\100\136\102\137" +
    "\114\111\122\151\123\101\124\122\125\146\126\140\001" +
    "\002\000\044\014\105\016\156\033\126\051\120\063\077" +
    "\064\144\065\117\066\121\077\113\100\136\102\137\114" +
    "\111\122\151\123\101\124\122\125\146\126\140\001\002" +
    "\000\044\014\105\016\156\033\126\051\120\063\077\064" +
    "\144\065\117\066\121\077\113\100\136\102\137\114\111" +
    "\122\151\123\101\124\122\125\146\126\140\001\002\000" +
    "\066\011\uffbb\013\uffbb\015\uffbb\017\161\020\uffbb\024\uffbb" +
    "\025\uffbb\026\uffbb\027\uffbb\030\uffbb\031\uffbb\032\uffbb\050" +
    "\uffbb\075\uffbb\076\uffbb\077\163\100\174\101\166\103\uffbb" +
    "\104\uffbb\113\201\114\164\115\173\116\170\117\uffbb\121" +
    "\200\001\002\000\066\011\uffc0\013\uffc0\015\uffc0\017\161" +
    "\020\uffc0\024\uffc0\025\202\026\172\027\204\030\165\031" +
    "\160\032\167\050\177\075\uffc0\076\uffc0\077\163\100\174" +
    "\101\166\103\uffc0\104\uffc0\113\201\114\164\115\173\116" +
    "\170\117\175\121\200\001\002\000\066\011\uffbd\013\uffbd" +
    "\015\uffbd\017\161\020\uffbd\024\uffbd\025\uffbd\026\uffbd\027" +
    "\204\030\165\031\160\032\167\050\177\075\uffbd\076\uffbd" +
    "\077\163\100\174\101\166\103\uffbd\104\uffbd\113\201\114" +
    "\164\115\173\116\170\117\uffbd\121\200\001\002\000\066" +
    "\011\uffb7\013\uffb7\015\uffb7\017\161\020\uffb7\024\uffb7\025" +
    "\uffb7\026\uffb7\027\uffb7\030\uffb7\031\uffb7\032\uffb7\050\uffb7" +
    "\075\uffb7\076\uffb7\077\163\100\174\101\166\103\uffb7\104" +
    "\uffb7\113\uffb7\114\uffb7\115\173\116\170\117\uffb7\121\200" +
    "\001\002\000\066\011\uffb2\013\uffb2\015\uffb2\017\161\020" +
    "\uffb2\024\uffb2\025\uffb2\026\uffb2\027\uffb2\030\uffb2\031\uffb2" +
    "\032\uffb2\050\uffb2\075\uffb2\076\uffb2\077\163\100\174\101" +
    "\166\103\uffb2\104\uffb2\113\uffb2\114\uffb2\115\uffb2\116\uffb2" +
    "\117\uffb2\121\uffb2\001\002\000\066\011\uffad\013\uffad\015" +
    "\uffad\017\uffad\020\uffad\024\uffad\025\uffad\026\uffad\027\uffad" +
    "\030\uffad\031\uffad\032\uffad\050\uffad\075\uffad\076\uffad\077" +
    "\uffad\100\uffad\101\uffad\103\uffad\104\uffad\113\uffad\114\uffad" +
    "\115\uffad\116\uffad\117\uffad\121\uffad\001\002\000\044\014" +
    "\105\016\156\033\126\051\120\063\077\064\144\065\117" +
    "\066\121\077\113\100\136\102\137\114\111\122\151\123" +
    "\101\124\122\125\146\126\140\001\002\000\054\017\161" +
    "\020\215\025\202\026\172\027\204\030\165\031\160\032" +
    "\167\050\177\075\171\077\163\100\174\101\166\103\203" +
    "\104\162\113\201\114\164\115\173\116\170\117\175\121" +
    "\200\001\002\000\070\011\uff81\013\uff81\015\uff81\017\uff81" +
    "\020\uff81\021\uff81\024\uff81\025\uff81\026\uff81\027\uff81\030" +
    "\uff81\031\uff81\032\uff81\050\uff81\075\uff81\076\uff81\077\uff81" +
    "\100\uff81\101\uff81\103\uff81\104\uff81\113\uff81\114\uff81\115" +
    "\uff81\116\uff81\117\uff81\121\uff81\001\002\000\066\011\uffb5" +
    "\013\uffb5\015\uffb5\017\161\020\uffb5\024\uffb5\025\202\026" +
    "\172\027\204\030\165\031\160\032\167\050\177\075\uffb5" +
    "\076\uffb5\077\163\100\174\101\166\103\uffb5\104\uffb5\113" +
    "\201\114\164\115\173\116\170\117\uffb5\121\200\001\002" +
    "\000\066\011\uffb4\013\uffb4\015\uffb4\017\161\020\uffb4\024" +
    "\uffb4\025\uffb4\026\uffb4\027\uffb4\030\uffb4\031\uffb4\032\uffb4" +
    "\050\uffb4\075\uffb4\076\uffb4\077\163\100\174\101\166\103" +
    "\uffb4\104\uffb4\113\uffb4\114\uffb4\115\uffb4\116\uffb4\117\uffb4" +
    "\121\uffb4\001\002\000\066\011\uffbc\013\uffbc\015\uffbc\017" +
    "\161\020\uffbc\024\uffbc\025\uffbc\026\uffbc\027\204\030\165" +
    "\031\160\032\167\050\177\075\uffbc\076\uffbc\077\163\100" +
    "\174\101\166\103\uffbc\104\uffbc\113\201\114\164\115\173" +
    "\116\170\117\uffbc\121\200\001\002\000\054\017\161\025" +
    "\202\026\172\027\204\030\165\031\160\032\167\050\177" +
    "\075\171\076\222\077\163\100\174\101\166\103\203\104" +
    "\162\113\201\114\164\115\173\116\170\117\175\121\200" +
    "\001\002\000\044\014\105\016\156\033\126\051\120\063" +
    "\077\064\144\065\117\066\121\077\113\100\136\102\137" +
    "\114\111\122\151\123\101\124\122\125\146\126\140\001" +
    "\002\000\066\011\uff76\013\uff76\015\uff76\017\161\020\uff76" +
    "\024\uff76\025\202\026\172\027\204\030\165\031\160\032" +
    "\167\050\177\075\171\076\uff76\077\163\100\174\101\166" +
    "\103\203\104\162\113\201\114\164\115\173\116\170\117" +
    "\175\121\200\001\002\000\066\011\uffb3\013\uffb3\015\uffb3" +
    "\017\161\020\uffb3\024\uffb3\025\uffb3\026\uffb3\027\uffb3\030" +
    "\uffb3\031\uffb3\032\uffb3\050\uffb3\075\uffb3\076\uffb3\077\163" +
    "\100\174\101\166\103\uffb3\104\uffb3\113\uffb3\114\uffb3\115" +
    "\uffb3\116\uffb3\117\uffb3\121\uffb3\001\002\000\066\011\uffba" +
    "\013\uffba\015\uffba\017\161\020\uffba\024\uffba\025\uffba\026" +
    "\uffba\027\uffba\030\uffba\031\uffba\032\uffba\050\uffba\075\uffba" +
    "\076\uffba\077\163\100\174\101\166\103\uffba\104\uffba\113" +
    "\201\114\164\115\173\116\170\117\uffba\121\200\001\002" +
    "\000\004\014\240\001\002\000\004\014\236\001\002\000" +
    "\004\014\234\001\002\000\070\011\uffa8\013\uffa8\014\232" +
    "\015\uffa8\017\uffa8\020\uffa8\024\uffa8\025\uffa8\026\uffa8\027" +
    "\uffa8\030\uffa8\031\uffa8\032\uffa8\050\uffa8\075\uffa8\076\uffa8" +
    "\077\uffa8\100\uffa8\101\uffa8\103\uffa8\104\uffa8\113\uffa8\114" +
    "\uffa8\115\uffa8\116\uffa8\117\uffa8\121\uffa8\001\002\000\004" +
    "\015\233\001\002\000\066\011\uffab\013\uffab\015\uffab\017" +
    "\uffab\020\uffab\024\uffab\025\uffab\026\uffab\027\uffab\030\uffab" +
    "\031\uffab\032\uffab\050\uffab\075\uffab\076\uffab\077\uffab\100" +
    "\uffab\101\uffab\103\uffab\104\uffab\113\uffab\114\uffab\115\uffab" +
    "\116\uffab\117\uffab\121\uffab\001\002\000\004\015\235\001" +
    "\002\000\066\011\uffaa\013\uffaa\015\uffaa\017\uffaa\020\uffaa" +
    "\024\uffaa\025\uffaa\026\uffaa\027\uffaa\030\uffaa\031\uffaa\032" +
    "\uffaa\050\uffaa\075\uffaa\076\uffaa\077\uffaa\100\uffaa\101\uffaa" +
    "\103\uffaa\104\uffaa\113\uffaa\114\uffaa\115\uffaa\116\uffaa\117" +
    "\uffaa\121\uffaa\001\002\000\004\015\237\001\002\000\066" +
    "\011\uffa7\013\uffa7\015\uffa7\017\uffa7\020\uffa7\024\uffa7\025" +
    "\uffa7\026\uffa7\027\uffa7\030\uffa7\031\uffa7\032\uffa7\050\uffa7" +
    "\075\uffa7\076\uffa7\077\uffa7\100\uffa7\101\uffa7\103\uffa7\104" +
    "\uffa7\113\uffa7\114\uffa7\115\uffa7\116\uffa7\117\uffa7\121\uffa7" +
    "\001\002\000\004\015\241\001\002\000\066\011\uffa9\013" +
    "\uffa9\015\uffa9\017\uffa9\020\uffa9\024\uffa9\025\uffa9\026\uffa9" +
    "\027\uffa9\030\uffa9\031\uffa9\032\uffa9\050\uffa9\075\uffa9\076" +
    "\uffa9\077\uffa9\100\uffa9\101\uffa9\103\uffa9\104\uffa9\113\uffa9" +
    "\114\uffa9\115\uffa9\116\uffa9\117\uffa9\121\uffa9\001\002\000" +
    "\066\011\uffb9\013\uffb9\015\uffb9\017\161\020\uffb9\024\uffb9" +
    "\025\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9\032\uffb9\050" +
    "\uffb9\075\uffb9\076\uffb9\077\163\100\174\101\166\103\uffb9" +
    "\104\uffb9\113\201\114\164\115\173\116\170\117\uffb9\121" +
    "\200\001\002\000\066\011\uffb6\013\uffb6\015\uffb6\017\161" +
    "\020\uffb6\024\uffb6\025\uffb6\026\uffb6\027\uffb6\030\uffb6\031" +
    "\uffb6\032\uffb6\050\uffb6\075\uffb6\076\uffb6\077\163\100\174" +
    "\101\166\103\uffb6\104\uffb6\113\uffb6\114\uffb6\115\173\116" +
    "\170\117\uffb6\121\200\001\002\000\066\011\uffbf\013\uffbf" +
    "\015\uffbf\017\161\020\uffbf\024\uffbf\025\202\026\172\027" +
    "\204\030\165\031\160\032\167\050\177\075\uffbf\076\uffbf" +
    "\077\163\100\174\101\166\103\203\104\uffbf\113\201\114" +
    "\164\115\173\116\170\117\175\121\200\001\002\000\054" +
    "\017\161\020\246\025\202\026\172\027\204\030\165\031" +
    "\160\032\167\050\177\075\171\077\163\100\174\101\166" +
    "\103\203\104\162\113\201\114\164\115\173\116\170\117" +
    "\175\121\200\001\002\000\070\011\uff80\013\uff80\015\uff80" +
    "\017\uff80\020\uff80\021\uff80\024\uff80\025\uff80\026\uff80\027" +
    "\uff80\030\uff80\031\uff80\032\uff80\050\uff80\075\uff80\076\uff80" +
    "\077\uff80\100\uff80\101\uff80\103\uff80\104\uff80\113\uff80\114" +
    "\uff80\115\uff80\116\uff80\117\uff80\121\uff80\001\002\000\066" +
    "\011\uffb8\013\uffb8\015\uffb8\017\161\020\uffb8\024\uffb8\025" +
    "\uffb8\026\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8\050\uffb8" +
    "\075\uffb8\076\uffb8\077\163\100\174\101\166\103\uffb8\104" +
    "\uffb8\113\201\114\164\115\173\116\170\117\uffb8\121\200" +
    "\001\002\000\114\004\uff99\005\uff99\006\uff99\007\uff99\010" +
    "\uff99\012\uff99\013\uff99\014\uff99\016\uff99\022\uff99\023\uff99" +
    "\033\uff99\037\uff99\042\uff99\043\uff99\051\uff99\055\uff99\061" +
    "\uff99\063\uff99\064\uff99\065\uff99\066\uff99\071\uff99\072\uff99" +
    "\073\uff99\074\uff99\077\uff99\100\uff99\102\uff99\105\uff99\114" +
    "\uff99\120\uff99\122\uff99\123\uff99\124\uff99\125\uff99\126\uff99" +
    "\001\002\000\044\014\105\016\156\033\126\051\120\063" +
    "\077\064\144\065\117\066\121\077\113\100\136\102\137" +
    "\114\111\122\151\123\101\124\122\125\146\126\140\001" +
    "\002\000\054\015\253\017\161\025\202\026\172\027\204" +
    "\030\165\031\160\032\167\050\177\075\171\077\163\100" +
    "\174\101\166\103\203\104\162\113\201\114\164\115\173" +
    "\116\170\117\175\121\200\001\002\000\066\011\uffe7\013" +
    "\uffe7\015\uffe7\017\uffe7\020\uffe7\024\uffe7\025\uffe7\026\uffe7" +
    "\027\uffe7\030\uffe7\031\uffe7\032\uffe7\050\uffe7\075\uffe7\076" +
    "\uffe7\077\uffe7\100\uffe7\101\uffe7\103\uffe7\104\uffe7\113\uffe7" +
    "\114\uffe7\115\uffe7\116\uffe7\117\uffe7\121\uffe7\001\002\000" +
    "\044\014\105\016\156\033\126\051\120\063\077\064\144" +
    "\065\117\066\121\077\113\100\136\102\137\114\111\122" +
    "\151\123\101\124\122\125\146\126\140\001\002\000\054" +
    "\015\256\017\161\025\202\026\172\027\204\030\165\031" +
    "\160\032\167\050\177\075\171\077\163\100\174\101\166" +
    "\103\203\104\162\113\201\114\164\115\173\116\170\117" +
    "\175\121\200\001\002\000\004\011\257\001\002\000\114" +
    "\004\uffcf\005\uffcf\006\uffcf\007\uffcf\010\uffcf\012\uffcf\013" +
    "\uffcf\014\uffcf\016\uffcf\022\uffcf\023\uffcf\033\uffcf\037\uffcf" +
    "\042\uffcf\043\uffcf\051\uffcf\055\uffcf\061\uffcf\063\uffcf\064" +
    "\uffcf\065\uffcf\066\uffcf\071\uffcf\072\uffcf\073\uffcf\074\uffcf" +
    "\077\uffcf\100\uffcf\102\uffcf\105\uffcf\114\uffcf\120\uffcf\122" +
    "\uffcf\123\uffcf\124\uffcf\125\uffcf\126\uffcf\001\002\000\062" +
    "\011\uffbe\013\uffbe\015\uffbe\017\161\020\uffbe\024\uffbe\025" +
    "\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe\032\uffbe\050\uffbe" +
    "\075\uffbe\076\uffbe\101\166\103\uffbe\104\uffbe\113\uffbe\114" +
    "\uffbe\115\uffbe\116\uffbe\117\uffbe\121\uffbe\001\002\000\062" +
    "\011\uff77\013\uff77\015\uff77\017\161\020\uff77\024\uff77\025" +
    "\uff77\026\uff77\027\uff77\030\uff77\031\uff77\032\uff77\050\uff77" +
    "\075\uff77\076\uff77\101\166\103\uff77\104\uff77\113\uff77\114" +
    "\uff77\115\uff77\116\uff77\117\uff77\121\uff77\001\002\000\114" +
    "\004\uffec\005\uffec\006\uffec\007\uffec\010\uffec\012\uffec\013" +
    "\uffec\014\uffec\016\uffec\022\uffec\023\uffec\033\uffec\037\uffec" +
    "\042\uffec\043\uffec\051\uffec\055\uffec\061\uffec\063\uffec\064" +
    "\uffec\065\uffec\066\uffec\071\uffec\072\uffec\073\uffec\074\uffec" +
    "\077\uffec\100\uffec\102\uffec\105\uffec\114\uffec\120\uffec\122" +
    "\uffec\123\uffec\124\uffec\125\uffec\126\uffec\001\002\000\004" +
    "\071\264\001\002\000\004\014\265\001\002\000\044\014" +
    "\105\016\156\033\126\051\120\063\077\064\144\065\117" +
    "\066\121\077\113\100\136\102\137\114\111\122\151\123" +
    "\101\124\122\125\146\126\140\001\002\000\054\015\267" +
    "\017\161\025\202\026\172\027\204\030\165\031\160\032" +
    "\167\050\177\075\171\077\163\100\174\101\166\103\203" +
    "\104\162\113\201\114\164\115\173\116\170\117\175\121" +
    "\200\001\002\000\004\011\270\001\002\000\114\004\uffd5" +
    "\005\uffd5\006\uffd5\007\uffd5\010\uffd5\012\uffd5\013\uffd5\014" +
    "\uffd5\016\uffd5\022\uffd5\023\uffd5\033\uffd5\037\uffd5\042\uffd5" +
    "\043\uffd5\051\uffd5\055\uffd5\061\uffd5\063\uffd5\064\uffd5\065" +
    "\uffd5\066\uffd5\071\uffd5\072\uffd5\073\uffd5\074\uffd5\077\uffd5" +
    "\100\uffd5\102\uffd5\105\uffd5\114\uffd5\120\uffd5\122\uffd5\123" +
    "\uffd5\124\uffd5\125\uffd5\126\uffd5\001\002\000\044\014\105" +
    "\016\156\033\126\051\120\063\077\064\144\065\117\066" +
    "\121\077\113\100\136\102\137\114\111\122\151\123\101" +
    "\124\122\125\146\126\140\001\002\000\054\015\273\017" +
    "\161\025\202\026\172\027\204\030\165\031\160\032\167" +
    "\050\177\075\171\077\163\100\174\101\166\103\203\104" +
    "\162\113\201\114\164\115\173\116\170\117\175\121\200" +
    "\001\002\000\004\011\274\001\002\000\114\004\uffd0\005" +
    "\uffd0\006\uffd0\007\uffd0\010\uffd0\012\uffd0\013\uffd0\014\uffd0" +
    "\016\uffd0\022\uffd0\023\uffd0\033\uffd0\037\uffd0\042\uffd0\043" +
    "\uffd0\051\uffd0\055\uffd0\061\uffd0\063\uffd0\064\uffd0\065\uffd0" +
    "\066\uffd0\071\uffd0\072\uffd0\073\uffd0\074\uffd0\077\uffd0\100" +
    "\uffd0\102\uffd0\105\uffd0\114\uffd0\120\uffd0\122\uffd0\123\uffd0" +
    "\124\uffd0\125\uffd0\126\uffd0\001\002\000\044\014\105\016" +
    "\156\033\126\051\120\063\077\064\144\065\117\066\121" +
    "\077\113\100\136\102\137\114\111\122\151\123\101\124" +
    "\122\125\146\126\140\001\002\000\006\017\213\021\277" +
    "\001\002\000\044\014\105\016\156\033\126\051\120\063" +
    "\077\064\144\065\117\066\121\077\113\100\136\102\137" +
    "\114\111\122\151\123\101\124\122\125\146\126\140\001" +
    "\002\000\054\011\uffcd\017\161\025\202\026\172\027\204" +
    "\030\165\031\160\032\167\050\177\075\171\077\163\100" +
    "\174\101\166\103\203\104\162\113\201\114\164\115\173" +
    "\116\170\117\175\121\200\001\002\000\054\011\uffce\017" +
    "\161\025\202\026\172\027\204\030\165\031\160\032\167" +
    "\050\177\075\171\077\163\100\174\101\166\103\203\104" +
    "\162\113\201\114\164\115\173\116\170\117\175\121\200" +
    "\001\002\000\044\014\105\016\156\033\126\051\120\063" +
    "\077\064\144\065\117\066\121\077\113\100\136\102\137" +
    "\114\111\122\151\123\101\124\122\125\146\126\140\001" +
    "\002\000\054\017\161\024\304\025\202\026\172\027\204" +
    "\030\165\031\160\032\167\050\177\075\171\077\163\100" +
    "\174\101\166\103\203\104\162\113\201\114\164\115\173" +
    "\116\170\117\175\121\200\001\002\000\044\014\105\016" +
    "\156\033\126\051\120\063\077\064\144\065\117\066\121" +
    "\077\113\100\136\102\137\114\111\122\151\123\101\124" +
    "\122\125\146\126\140\001\002\000\054\015\306\017\161" +
    "\025\202\026\172\027\204\030\165\031\160\032\167\050" +
    "\177\075\171\077\163\100\174\101\166\103\203\104\162" +
    "\113\201\114\164\115\173\116\170\117\175\121\200\001" +
    "\002\000\066\011\uffae\013\uffae\015\uffae\017\uffae\020\uffae" +
    "\024\uffae\025\uffae\026\uffae\027\uffae\030\uffae\031\uffae\032" +
    "\uffae\050\uffae\075\uffae\076\uffae\077\uffae\100\uffae\101\uffae" +
    "\103\uffae\104\uffae\113\uffae\114\uffae\115\uffae\116\uffae\117" +
    "\uffae\121\uffae\001\002\000\114\004\ufff9\005\ufff9\006\ufff9" +
    "\007\ufff9\010\ufff9\012\ufff9\013\ufff9\014\ufff9\016\ufff9\022" +
    "\ufff9\023\ufff9\033\ufff9\037\ufff9\042\ufff9\043\ufff9\051\ufff9" +
    "\055\ufff9\061\ufff9\063\ufff9\064\ufff9\065\ufff9\066\ufff9\071" +
    "\ufff9\072\ufff9\073\ufff9\074\ufff9\077\ufff9\100\ufff9\102\ufff9" +
    "\105\ufff9\114\ufff9\120\ufff9\122\ufff9\123\ufff9\124\ufff9\125" +
    "\ufff9\126\ufff9\001\002\000\044\014\105\016\156\033\126" +
    "\051\120\063\077\064\144\065\117\066\121\077\113\100" +
    "\136\102\137\114\111\122\151\123\101\124\122\125\146" +
    "\126\140\001\002\000\054\015\312\017\161\025\202\026" +
    "\172\027\204\030\165\031\160\032\167\050\177\075\171" +
    "\077\163\100\174\101\166\103\203\104\162\113\201\114" +
    "\164\115\173\116\170\117\175\121\200\001\002\000\066" +
    "\011\uffe8\013\uffe8\015\uffe8\017\uffe8\020\uffe8\024\uffe8\025" +
    "\uffe8\026\uffe8\027\uffe8\030\uffe8\031\uffe8\032\uffe8\050\uffe8" +
    "\075\uffe8\076\uffe8\077\uffe8\100\uffe8\101\uffe8\103\uffe8\104" +
    "\uffe8\113\uffe8\114\uffe8\115\uffe8\116\uffe8\117\uffe8\121\uffe8" +
    "\001\002\000\004\017\161\001\002\000\004\017\161\001" +
    "\002\000\066\011\uff9d\013\uff9d\015\uff9d\017\213\020\uff9d" +
    "\024\uff9d\025\uff9d\026\uff9d\027\uff9d\030\uff9d\031\uff9d\032" +
    "\uff9d\050\uff9d\075\uff9d\076\uff9d\077\uff9d\100\uff9d\101\uff9d" +
    "\103\uff9d\104\uff9d\113\uff9d\114\uff9d\115\uff9d\116\uff9d\117" +
    "\uff9d\121\uff9d\001\002\000\066\011\uff9e\013\uff9e\015\uff9e" +
    "\017\213\020\uff9e\024\uff9e\025\uff9e\026\uff9e\027\uff9e\030" +
    "\uff9e\031\uff9e\032\uff9e\050\uff9e\075\uff9e\076\uff9e\077\uff9e" +
    "\100\uff9e\101\uff9e\103\uff9e\104\uff9e\113\uff9e\114\uff9e\115" +
    "\uff9e\116\uff9e\117\uff9e\121\uff9e\001\002\000\044\014\105" +
    "\016\156\033\126\051\120\063\077\064\144\065\117\066" +
    "\121\077\113\100\136\102\137\114\111\122\151\123\101" +
    "\124\122\125\146\126\140\001\002\000\054\015\321\017" +
    "\161\025\202\026\172\027\204\030\165\031\160\032\167" +
    "\050\177\075\171\077\163\100\174\101\166\103\203\104" +
    "\162\113\201\114\164\115\173\116\170\117\175\121\200" +
    "\001\002\000\066\011\uffe5\013\uffe5\015\uffe5\017\uffe5\020" +
    "\uffe5\024\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5" +
    "\032\uffe5\050\uffe5\075\uffe5\076\uffe5\077\uffe5\100\uffe5\101" +
    "\uffe5\103\uffe5\104\uffe5\113\uffe5\114\uffe5\115\uffe5\116\uffe5" +
    "\117\uffe5\121\uffe5\001\002\000\114\004\uffed\005\uffed\006" +
    "\uffed\007\uffed\010\uffed\012\uffed\013\uffed\014\uffed\016\uffed" +
    "\022\uffed\023\uffed\033\uffed\037\uffed\042\uffed\043\uffed\051" +
    "\uffed\055\uffed\061\uffed\063\uffed\064\uffed\065\uffed\066\uffed" +
    "\071\uffed\072\uffed\073\uffed\074\uffed\077\uffed\100\uffed\102" +
    "\uffed\105\uffed\114\uffed\120\uffed\122\uffed\123\uffed\124\uffed" +
    "\125\uffed\126\uffed\001\002\000\016\004\014\005\017\006" +
    "\015\007\006\010\022\016\324\001\002\000\006\016\uffc3" +
    "\021\275\001\002\000\004\011\370\001\002\000\004\011" +
    "\360\001\002\000\004\016\332\001\002\000\006\011\uffca" +
    "\024\uffca\001\002\000\006\011\uffcc\024\355\001\002\000" +
    "\014\011\uffc9\017\046\021\334\024\uffc9\076\335\001\002" +
    "\000\012\011\uffc7\017\050\021\342\024\uffc7\001\002\000" +
    "\044\014\105\016\156\033\126\051\120\063\077\064\144" +
    "\065\117\066\121\077\113\100\136\102\137\114\111\122" +
    "\151\123\101\124\122\125\146\126\140\001\002\000\044" +
    "\014\105\016\156\033\126\051\120\063\077\064\144\065" +
    "\117\066\121\077\113\100\136\102\137\114\111\122\151" +
    "\123\101\124\122\125\146\126\140\001\002\000\054\015" +
    "\337\017\161\025\202\026\172\027\204\030\165\031\160" +
    "\032\167\050\177\075\171\077\163\100\174\101\166\103" +
    "\203\104\162\113\201\114\164\115\173\116\170\117\175" +
    "\121\200\001\002\000\004\012\065\001\002\000\114\004" +
    "\uffd4\005\uffd4\006\uffd4\007\uffd4\010\uffd4\012\uffd4\013\uffd4" +
    "\014\uffd4\016\uffd4\022\uffd4\023\uffd4\033\uffd4\037\uffd4\042" +
    "\uffd4\043\uffd4\051\uffd4\055\uffd4\061\uffd4\063\uffd4\064\uffd4" +
    "\065\uffd4\066\uffd4\071\uffd4\072\uffd4\073\uffd4\074\uffd4\077" +
    "\uffd4\100\uffd4\102\uffd4\105\uffd4\114\uffd4\120\uffd4\122\uffd4" +
    "\123\uffd4\124\uffd4\125\uffd4\126\uffd4\001\002\000\056\011" +
    "\uffc8\017\161\024\uffc8\025\202\026\172\027\204\030\165" +
    "\031\160\032\167\050\177\075\171\077\163\100\174\101" +
    "\166\103\203\104\162\113\201\114\164\115\173\116\170" +
    "\117\175\121\200\001\002\000\046\012\345\014\105\016" +
    "\156\033\126\051\120\063\077\064\144\065\117\066\121" +
    "\077\113\100\136\102\137\114\111\122\151\123\101\124" +
    "\122\125\146\126\140\001\002\000\006\011\uffc5\024\uffc5" +
    "\001\002\000\056\011\uffc6\017\161\024\uffc6\025\202\026" +
    "\172\027\204\030\165\031\160\032\167\050\177\075\171" +
    "\077\163\100\174\101\166\103\203\104\162\113\201\114" +
    "\164\115\173\116\170\117\175\121\200\001\002\000\046" +
    "\012\345\014\105\016\156\033\126\051\120\063\077\064" +
    "\144\065\117\066\121\077\113\100\136\102\137\114\111" +
    "\122\151\123\101\124\122\125\146\126\140\001\002\000" +
    "\006\013\352\024\353\001\002\000\006\013\uff7b\024\uff7b" +
    "\001\002\000\006\013\uff7d\024\uff7d\001\002\000\056\013" +
    "\uff7c\017\161\024\uff7c\025\202\026\172\027\204\030\165" +
    "\031\160\032\167\050\177\075\171\077\163\100\174\101" +
    "\166\103\203\104\162\113\201\114\164\115\173\116\170" +
    "\117\175\121\200\001\002\000\010\011\uff7f\013\uff7f\024" +
    "\uff7f\001\002\000\046\012\345\014\105\016\156\033\126" +
    "\051\120\063\077\064\144\065\117\066\121\077\113\100" +
    "\136\102\137\114\111\122\151\123\101\124\122\125\146" +
    "\126\140\001\002\000\006\013\uff7e\024\uff7e\001\002\000" +
    "\004\016\357\001\002\000\006\011\uffcb\024\uffcb\001\002" +
    "\000\012\011\uffc9\017\046\021\334\024\uffc9\001\002\000" +
    "\044\014\105\016\156\033\126\051\120\063\077\064\144" +
    "\065\117\066\121\077\113\100\136\102\137\114\111\122" +
    "\151\123\101\124\122\125\146\126\140\001\002\000\054" +
    "\011\362\017\161\025\202\026\172\027\204\030\165\031" +
    "\160\032\167\050\177\075\171\077\163\100\174\101\166" +
    "\103\203\104\162\113\201\114\164\115\173\116\170\117" +
    "\175\121\200\001\002\000\044\014\105\016\156\033\126" +
    "\051\120\063\077\064\144\065\117\066\121\077\113\100" +
    "\136\102\137\114\111\122\151\123\101\124\122\125\146" +
    "\126\140\001\002\000\054\015\uffe4\017\uffaf\025\uffaf\026" +
    "\uffaf\027\uffaf\030\uffaf\031\uffaf\032\uffaf\050\uffaf\075\uffaf" +
    "\077\uffaf\100\uffaf\101\uffaf\103\uffaf\104\uffaf\113\uffaf\114" +
    "\uffaf\115\uffaf\116\uffaf\117\uffaf\121\uffaf\001\002\000\004" +
    "\015\366\001\002\000\054\015\uffe3\017\uffac\025\uffac\026" +
    "\uffac\027\uffac\030\uffac\031\uffac\032\uffac\050\uffac\075\uffac" +
    "\077\uffac\100\uffac\101\uffac\103\uffac\104\uffac\113\uffac\114" +
    "\uffac\115\uffac\116\uffac\117\uffac\121\uffac\001\002\000\004" +
    "\012\065\001\002\000\114\004\uffd2\005\uffd2\006\uffd2\007" +
    "\uffd2\010\uffd2\012\uffd2\013\uffd2\014\uffd2\016\uffd2\022\uffd2" +
    "\023\uffd2\033\uffd2\037\uffd2\042\uffd2\043\uffd2\051\uffd2\055" +
    "\uffd2\061\uffd2\063\uffd2\064\uffd2\065\uffd2\066\uffd2\071\uffd2" +
    "\072\uffd2\073\uffd2\074\uffd2\077\uffd2\100\uffd2\102\uffd2\105" +
    "\uffd2\114\uffd2\120\uffd2\122\uffd2\123\uffd2\124\uffd2\125\uffd2" +
    "\126\uffd2\001\002\000\044\014\105\016\156\033\126\051" +
    "\120\063\077\064\144\065\117\066\121\077\113\100\136" +
    "\102\137\114\111\122\151\123\101\124\122\125\146\126" +
    "\140\001\002\000\054\011\372\017\161\025\202\026\172" +
    "\027\204\030\165\031\160\032\167\050\177\075\171\077" +
    "\163\100\174\101\166\103\203\104\162\113\201\114\164" +
    "\115\173\116\170\117\175\121\200\001\002\000\044\014" +
    "\105\016\156\033\126\051\120\063\077\064\144\065\117" +
    "\066\121\077\113\100\136\102\137\114\111\122\151\123" +
    "\101\124\122\125\146\126\140\001\002\000\004\015\374" +
    "\001\002\000\004\012\065\001\002\000\114\004\uffd3\005" +
    "\uffd3\006\uffd3\007\uffd3\010\uffd3\012\uffd3\013\uffd3\014\uffd3" +
    "\016\uffd3\022\uffd3\023\uffd3\033\uffd3\037\uffd3\042\uffd3\043" +
    "\uffd3\051\uffd3\055\uffd3\061\uffd3\063\uffd3\064\uffd3\065\uffd3" +
    "\066\uffd3\071\uffd3\072\uffd3\073\uffd3\074\uffd3\077\uffd3\100" +
    "\uffd3\102\uffd3\105\uffd3\114\uffd3\120\uffd3\122\uffd3\123\uffd3" +
    "\124\uffd3\125\uffd3\126\uffd3\001\002\000\114\004\ufff8\005" +
    "\ufff8\006\ufff8\007\ufff8\010\ufff8\012\ufff8\013\ufff8\014\ufff8" +
    "\016\ufff8\022\ufff8\023\ufff8\033\ufff8\037\ufff8\042\ufff8\043" +
    "\ufff8\051\ufff8\055\ufff8\061\ufff8\063\ufff8\064\ufff8\065\ufff8" +
    "\066\ufff8\071\ufff8\072\ufff8\073\ufff8\074\ufff8\077\ufff8\100" +
    "\ufff8\102\ufff8\105\ufff8\114\ufff8\120\ufff8\122\ufff8\123\ufff8" +
    "\124\ufff8\125\ufff8\126\ufff8\001\002\000\062\011\uff79\013" +
    "\uff79\015\uff79\017\161\020\uff79\024\uff79\025\uff79\026\uff79" +
    "\027\uff79\030\uff79\031\uff79\032\uff79\050\uff79\075\uff79\076" +
    "\uff79\101\166\103\uff79\104\uff79\113\uff79\114\uff79\115\uff79" +
    "\116\uff79\117\uff79\121\uff79\001\002\000\066\011\uffb0\013" +
    "\uffb0\015\uffb0\017\161\020\uffb0\024\uffb0\025\uffb0\026\uffb0" +
    "\027\uffb0\030\uffb0\031\uffb0\032\uffb0\050\uffb0\075\uffb0\076" +
    "\uffb0\077\163\100\174\101\166\103\uffb0\104\uffb0\113\uffb0" +
    "\114\uffb0\115\173\116\170\117\uffb0\121\200\001\002\000" +
    "\004\015\u0107\001\002\000\054\015\u0106\017\161\025\202" +
    "\026\172\027\204\030\165\031\160\032\167\050\177\075" +
    "\171\077\163\100\174\101\166\103\203\104\162\113\201" +
    "\114\164\115\173\116\170\117\175\121\200\001\002\000" +
    "\054\015\u0104\017\uff9f\025\uff9f\026\uff9f\027\uff9f\030\uff9f" +
    "\031\uff9f\032\uff9f\050\uff9f\075\uff9f\077\uff9f\100\uff9f\101" +
    "\uff9f\103\uff9f\104\uff9f\113\uff9f\114\uff9f\115\uff9f\116\uff9f" +
    "\117\uff9f\121\uff9f\001\002\000\044\014\105\016\156\033" +
    "\126\051\120\063\077\064\144\065\117\066\121\077\113" +
    "\100\136\102\137\114\111\122\151\123\101\124\122\125" +
    "\146\126\140\001\002\000\066\011\uffa5\013\uffa5\015\uffa5" +
    "\017\161\020\uffa5\024\uffa5\025\uffa5\026\uffa5\027\uffa5\030" +
    "\uffa5\031\uffa5\032\uffa5\050\uffa5\075\uffa5\076\uffa5\077\uffa5" +
    "\100\uffa5\101\166\103\uffa5\104\uffa5\113\uffa5\114\uffa5\115" +
    "\uffa5\116\uffa5\117\uffa5\121\uffa5\001\002\000\066\011\uff9c" +
    "\013\uff9c\015\uff9c\017\uff9c\020\uff9c\024\uff9c\025\uff9c\026" +
    "\uff9c\027\uff9c\030\uff9c\031\uff9c\032\uff9c\050\uff9c\075\uff9c" +
    "\076\uff9c\077\uff9c\100\uff9c\101\uff9c\103\uff9c\104\uff9c\113" +
    "\uff9c\114\uff9c\115\uff9c\116\uff9c\117\uff9c\121\uff9c\001\002" +
    "\000\044\014\105\016\156\033\126\051\120\063\077\064" +
    "\144\065\117\066\121\077\113\100\136\102\137\114\111" +
    "\122\151\123\101\124\122\125\146\126\140\001\002\000" +
    "\066\011\uffa6\013\uffa6\015\uffa6\017\161\020\uffa6\024\uffa6" +
    "\025\uffa6\026\uffa6\027\uffa6\030\uffa6\031\uffa6\032\uffa6\050" +
    "\uffa6\075\uffa6\076\uffa6\077\uffa6\100\uffa6\101\166\103\uffa6" +
    "\104\uffa6\113\uffa6\114\uffa6\115\uffa6\116\uffa6\117\uffa6\121" +
    "\uffa6\001\002\000\044\014\105\016\156\033\126\051\120" +
    "\063\077\064\144\065\117\066\121\077\113\100\136\102" +
    "\137\114\111\122\151\123\101\124\122\125\146\126\140" +
    "\001\002\000\054\015\u010b\017\161\025\202\026\172\027" +
    "\204\030\165\031\160\032\167\050\177\075\171\077\163" +
    "\100\174\101\166\103\203\104\162\113\201\114\164\115" +
    "\173\116\170\117\175\121\200\001\002\000\004\012\065" +
    "\001\002\000\114\004\uffd6\005\uffd6\006\uffd6\007\uffd6\010" +
    "\uffd6\012\uffd6\013\uffd6\014\uffd6\016\uffd6\022\uffd6\023\uffd6" +
    "\033\uffd6\037\uffd6\042\uffd6\043\uffd6\051\uffd6\055\uffd6\061" +
    "\uffd6\063\uffd6\064\uffd6\065\uffd6\066\uffd6\071\uffd6\072\uffd6" +
    "\073\uffd6\074\uffd6\077\uffd6\100\uffd6\102\uffd6\105\uffd6\114" +
    "\uffd6\120\uffd6\122\uffd6\123\uffd6\124\uffd6\125\uffd6\126\uffd6" +
    "\001\002\000\044\014\105\016\156\033\126\051\120\063" +
    "\077\064\144\065\117\066\121\077\113\100\136\102\137" +
    "\114\111\122\151\123\101\124\122\125\146\126\140\001" +
    "\002\000\054\015\u010f\017\161\025\202\026\172\027\204" +
    "\030\165\031\160\032\167\050\177\075\171\077\163\100" +
    "\174\101\166\103\203\104\162\113\201\114\164\115\173" +
    "\116\170\117\175\121\200\001\002\000\004\012\065\001" +
    "\002\000\116\004\uffdc\005\uffdc\006\uffdc\007\uffdc\010\uffdc" +
    "\012\uffdc\013\uffdc\014\uffdc\016\uffdc\022\uffdc\023\uffdc\033" +
    "\uffdc\037\uffdc\042\uffdc\043\uffdc\051\uffdc\055\uffdc\061\uffdc" +
    "\063\uffdc\064\uffdc\065\uffdc\066\uffdc\071\uffdc\072\uffdc\073" +
    "\uffdc\074\uffdc\077\uffdc\100\uffdc\102\uffdc\105\uffdc\107\u0111" +
    "\114\uffdc\120\uffdc\122\uffdc\123\uffdc\124\uffdc\125\uffdc\126" +
    "\uffdc\001\002\000\006\012\065\105\103\001\002\000\114" +
    "\004\uffdb\005\uffdb\006\uffdb\007\uffdb\010\uffdb\012\uffdb\013" +
    "\uffdb\014\uffdb\016\uffdb\022\uffdb\023\uffdb\033\uffdb\037\uffdb" +
    "\042\uffdb\043\uffdb\051\uffdb\055\uffdb\061\uffdb\063\uffdb\064" +
    "\uffdb\065\uffdb\066\uffdb\071\uffdb\072\uffdb\073\uffdb\074\uffdb" +
    "\077\uffdb\100\uffdb\102\uffdb\105\uffdb\114\uffdb\120\uffdb\122" +
    "\uffdb\123\uffdb\124\uffdb\125\uffdb\126\uffdb\001\002\000\114" +
    "\004\uffd9\005\uffd9\006\uffd9\007\uffd9\010\uffd9\012\uffd9\013" +
    "\uffd9\014\uffd9\016\uffd9\022\uffd9\023\uffd9\033\uffd9\037\uffd9" +
    "\042\uffd9\043\uffd9\051\uffd9\055\uffd9\061\uffd9\063\uffd9\064" +
    "\uffd9\065\uffd9\066\uffd9\071\uffd9\072\uffd9\073\uffd9\074\uffd9" +
    "\077\uffd9\100\uffd9\102\uffd9\105\uffd9\114\uffd9\120\uffd9\122" +
    "\uffd9\123\uffd9\124\uffd9\125\uffd9\126\uffd9\001\002\000\114" +
    "\004\uffda\005\uffda\006\uffda\007\uffda\010\uffda\012\uffda\013" +
    "\uffda\014\uffda\016\uffda\022\uffda\023\uffda\033\uffda\037\uffda" +
    "\042\uffda\043\uffda\051\uffda\055\uffda\061\uffda\063\uffda\064" +
    "\uffda\065\uffda\066\uffda\071\uffda\072\uffda\073\uffda\074\uffda" +
    "\077\uffda\100\uffda\102\uffda\105\uffda\114\uffda\120\uffda\122" +
    "\uffda\123\uffda\124\uffda\125\uffda\126\uffda\001\002\000\044" +
    "\014\105\016\156\033\126\051\120\063\077\064\144\065" +
    "\117\066\121\077\113\100\136\102\137\114\111\122\151" +
    "\123\101\124\122\125\146\126\140\001\002\000\054\015" +
    "\u0117\017\161\025\202\026\172\027\204\030\165\031\160" +
    "\032\167\050\177\075\171\077\163\100\174\101\166\103" +
    "\203\104\162\113\201\114\164\115\173\116\170\117\175" +
    "\121\200\001\002\000\066\011\uffe6\013\uffe6\015\uffe6\017" +
    "\uffe6\020\uffe6\024\uffe6\025\uffe6\026\uffe6\027\uffe6\030\uffe6" +
    "\031\uffe6\032\uffe6\050\uffe6\075\uffe6\076\uffe6\077\uffe6\100" +
    "\uffe6\101\uffe6\103\uffe6\104\uffe6\113\uffe6\114\uffe6\115\uffe6" +
    "\116\uffe6\117\uffe6\121\uffe6\001\002\000\044\014\105\016" +
    "\156\033\126\051\120\063\077\064\144\065\117\066\121" +
    "\077\113\100\136\102\137\114\111\122\151\123\101\124" +
    "\122\125\146\126\140\001\002\000\054\015\u011a\017\161" +
    "\025\202\026\172\027\204\030\165\031\160\032\167\050" +
    "\177\075\171\077\163\100\174\101\166\103\203\104\162" +
    "\113\201\114\164\115\173\116\170\117\175\121\200\001" +
    "\002\000\004\012\u011b\001\002\000\004\037\u011d\001\002" +
    "\000\010\013\u0123\037\u011d\042\u0125\001\002\000\044\014" +
    "\105\016\156\033\126\051\120\063\077\064\144\065\117" +
    "\066\121\077\113\100\136\102\137\114\111\122\151\123" +
    "\101\124\122\125\146\126\140\001\002\000\010\013\uffdf" +
    "\037\uffdf\042\uffdf\001\002\000\054\017\161\025\202\026" +
    "\172\027\204\030\165\031\160\032\167\050\177\075\171" +
    "\076\u0120\077\163\100\174\101\166\103\203\104\162\113" +
    "\201\114\164\115\173\116\170\117\175\121\200\001\002" +
    "\000\106\004\014\005\017\006\015\007\006\010\022\012" +
    "\065\014\105\016\127\022\142\023\130\033\126\043\133" +
    "\051\120\055\145\061\076\063\077\064\144\065\117\066" +
    "\121\071\104\072\115\073\070\074\066\077\113\100\136" +
    "\102\137\105\103\114\111\120\072\122\151\123\101\124" +
    "\122\125\146\126\140\001\002\000\114\004\014\005\017" +
    "\006\015\007\006\010\022\012\065\013\uffde\014\105\016" +
    "\127\022\142\023\130\033\126\037\uffde\042\uffde\043\133" +
    "\051\120\055\145\061\076\063\077\064\144\065\117\066" +
    "\121\071\104\072\115\073\070\074\066\077\113\100\136" +
    "\102\137\105\103\114\111\120\072\122\151\123\101\124" +
    "\122\125\146\126\140\001\002\000\114\004\ufffb\005\ufffb" +
    "\006\ufffb\007\ufffb\010\ufffb\012\ufffb\013\ufffb\014\ufffb\016" +
    "\ufffb\022\ufffb\023\ufffb\033\ufffb\037\ufffb\042\ufffb\043\ufffb" +
    "\051\ufffb\055\ufffb\061\ufffb\063\ufffb\064\ufffb\065\ufffb\066" +
    "\ufffb\071\ufffb\072\ufffb\073\ufffb\074\ufffb\077\ufffb\100\ufffb" +
    "\102\ufffb\105\ufffb\114\ufffb\120\ufffb\122\ufffb\123\ufffb\124" +
    "\ufffb\125\ufffb\126\ufffb\001\002\000\114\004\uffe2\005\uffe2" +
    "\006\uffe2\007\uffe2\010\uffe2\012\uffe2\013\uffe2\014\uffe2\016" +
    "\uffe2\022\uffe2\023\uffe2\033\uffe2\037\uffe2\042\uffe2\043\uffe2" +
    "\051\uffe2\055\uffe2\061\uffe2\063\uffe2\064\uffe2\065\uffe2\066" +
    "\uffe2\071\uffe2\072\uffe2\073\uffe2\074\uffe2\077\uffe2\100\uffe2" +
    "\102\uffe2\105\uffe2\114\uffe2\120\uffe2\122\uffe2\123\uffe2\124" +
    "\uffe2\125\uffe2\126\uffe2\001\002\000\004\013\u0129\001\002" +
    "\000\004\076\u0127\001\002\000\010\013\uffe0\037\uffe0\042" +
    "\uffe0\001\002\000\106\004\014\005\017\006\015\007\006" +
    "\010\022\012\065\014\105\016\127\022\142\023\130\033" +
    "\126\043\133\051\120\055\145\061\076\063\077\064\144" +
    "\065\117\066\121\071\104\072\115\073\070\074\066\077" +
    "\113\100\136\102\137\105\103\114\111\120\072\122\151" +
    "\123\101\124\122\125\146\126\140\001\002\000\110\004" +
    "\014\005\017\006\015\007\006\010\022\012\065\013\uffdd" +
    "\014\105\016\127\022\142\023\130\033\126\043\133\051" +
    "\120\055\145\061\076\063\077\064\144\065\117\066\121" +
    "\071\104\072\115\073\070\074\066\077\113\100\136\102" +
    "\137\105\103\114\111\120\072\122\151\123\101\124\122" +
    "\125\146\126\140\001\002\000\114\004\uffe1\005\uffe1\006" +
    "\uffe1\007\uffe1\010\uffe1\012\uffe1\013\uffe1\014\uffe1\016\uffe1" +
    "\022\uffe1\023\uffe1\033\uffe1\037\uffe1\042\uffe1\043\uffe1\051" +
    "\uffe1\055\uffe1\061\uffe1\063\uffe1\064\uffe1\065\uffe1\066\uffe1" +
    "\071\uffe1\072\uffe1\073\uffe1\074\uffe1\077\uffe1\100\uffe1\102" +
    "\uffe1\105\uffe1\114\uffe1\120\uffe1\122\uffe1\123\uffe1\124\uffe1" +
    "\125\uffe1\126\uffe1\001\002\000\136\002\ufffd\004\ufffd\005" +
    "\ufffd\006\ufffd\007\ufffd\010\ufffd\012\ufffd\013\ufffd\014\ufffd" +
    "\016\ufffd\022\ufffd\023\ufffd\033\ufffd\034\ufffd\036\ufffd\037" +
    "\ufffd\042\ufffd\043\ufffd\045\ufffd\051\ufffd\052\ufffd\053\ufffd" +
    "\054\ufffd\055\ufffd\057\ufffd\061\ufffd\063\ufffd\064\ufffd\065" +
    "\ufffd\066\ufffd\071\ufffd\072\ufffd\073\ufffd\074\ufffd\077\ufffd" +
    "\100\ufffd\102\ufffd\105\ufffd\107\ufffd\114\ufffd\120\ufffd\122" +
    "\ufffd\123\ufffd\124\ufffd\125\ufffd\126\ufffd\001\002\000\004" +
    "\015\u012c\001\002\000\004\011\u012d\001\002\000\114\004" +
    "\uffd1\005\uffd1\006\uffd1\007\uffd1\010\uffd1\012\uffd1\013\uffd1" +
    "\014\uffd1\016\uffd1\022\uffd1\023\uffd1\033\uffd1\037\uffd1\042" +
    "\uffd1\043\uffd1\051\uffd1\055\uffd1\061\uffd1\063\uffd1\064\uffd1" +
    "\065\uffd1\066\uffd1\071\uffd1\072\uffd1\073\uffd1\074\uffd1\077" +
    "\uffd1\100\uffd1\102\uffd1\105\uffd1\114\uffd1\120\uffd1\122\uffd1" +
    "\123\uffd1\124\uffd1\125\uffd1\126\uffd1\001\002\000\114\004" +
    "\uffd7\005\uffd7\006\uffd7\007\uffd7\010\uffd7\012\uffd7\013\uffd7" +
    "\014\uffd7\016\uffd7\022\uffd7\023\uffd7\033\uffd7\037\uffd7\042" +
    "\uffd7\043\uffd7\051\uffd7\055\uffd7\061\uffd7\063\uffd7\064\uffd7" +
    "\065\uffd7\066\uffd7\071\uffd7\072\uffd7\073\uffd7\074\uffd7\077" +
    "\uffd7\100\uffd7\102\uffd7\105\uffd7\114\uffd7\120\uffd7\122\uffd7" +
    "\123\uffd7\124\uffd7\125\uffd7\126\uffd7\001\002\000\114\004" +
    "\uffee\005\uffee\006\uffee\007\uffee\010\uffee\012\uffee\013\uffee" +
    "\014\uffee\016\uffee\022\uffee\023\uffee\033\uffee\037\uffee\042" +
    "\uffee\043\uffee\051\uffee\055\uffee\061\uffee\063\uffee\064\uffee" +
    "\065\uffee\066\uffee\071\uffee\072\uffee\073\uffee\074\uffee\077" +
    "\uffee\100\uffee\102\uffee\105\uffee\114\uffee\120\uffee\122\uffee" +
    "\123\uffee\124\uffee\125\uffee\126\uffee\001\002\000\114\004" +
    "\uffd8\005\uffd8\006\uffd8\007\uffd8\010\uffd8\012\uffd8\013\uffd8" +
    "\014\uffd8\016\uffd8\022\uffd8\023\uffd8\033\uffd8\037\uffd8\042" +
    "\uffd8\043\uffd8\051\uffd8\055\uffd8\061\uffd8\063\uffd8\064\uffd8" +
    "\065\uffd8\066\uffd8\071\uffd8\072\uffd8\073\uffd8\074\uffd8\077" +
    "\uffd8\100\uffd8\102\uffd8\105\uffd8\114\uffd8\120\uffd8\122\uffd8" +
    "\123\uffd8\124\uffd8\125\uffd8\126\uffd8\001\002\000\036\002" +
    "\uffff\004\uffff\005\uffff\006\uffff\007\uffff\010\uffff\016\uffff" +
    "\034\uffff\036\uffff\045\uffff\052\uffff\053\uffff\054\uffff\057" +
    "\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u012f\000\024\012\027\013\004\037\015\047\026\050" +
    "\006\051\025\054\030\055\022\056\020\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\013\004\037\015\047\026\050\006\051\025\054\u0130\055" +
    "\022\001\001\000\002\001\001\000\004\002\063\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\013\004\037\015\050\033\051\032\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\013\004" +
    "\037\037\052\036\053\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\013\004\037\042" +
    "\001\001\000\002\001\001\000\004\031\044\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\013\004\037\037\052" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\031\055\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\013\004\037\037\052\036\053\060\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\062\002\140\003\072\004\146\005\124\006\106" +
    "\007\066\010\115\011\073\013\004\014\147\015\111\016" +
    "\113\017\134\020\131\021\122\022\074\023\105\025\142" +
    "\026\077\033\133\037\070\042\130\046\123\057\107\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\040\330\041\327\001\001\000\002\001\001\000" +
    "\060\002\140\004\u0121\005\124\006\106\007\066\010\115" +
    "\011\073\013\004\014\147\015\111\016\113\017\134\020" +
    "\131\021\122\022\074\023\105\025\142\026\077\033\133" +
    "\037\070\042\130\046\123\057\107\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\006\u0101\007\153" +
    "\010\156\011\073\013\u0100\025\142\001\001\000\002\001" +
    "\001\000\004\032\175\001\001\000\002\001\001\000\014" +
    "\006\377\007\153\010\156\011\073\025\142\001\001\000" +
    "\002\001\001\000\014\006\376\007\153\010\156\011\073" +
    "\025\142\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\312\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\032\275\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\002\262\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\006\260\007\153\010\156\011" +
    "\073\025\142\001\001\000\014\006\257\007\153\010\156" +
    "\011\073\025\142\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\006\152\007\153\010\156\011\073\025\142\030" +
    "\151\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\032" +
    "\175\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\006\246\007\153\010" +
    "\156\011\073\025\142\001\001\000\014\006\244\007\153" +
    "\010\156\011\073\025\142\001\001\000\014\006\243\007" +
    "\153\010\156\011\073\025\142\001\001\000\002\001\001" +
    "\000\014\006\242\007\153\010\156\011\073\025\142\001" +
    "\001\000\014\006\241\007\153\010\156\011\073\025\142" +
    "\001\001\000\002\001\001\000\014\006\224\007\153\010" +
    "\156\011\073\025\142\001\001\000\014\006\223\007\153" +
    "\010\156\011\073\025\142\001\001\000\014\006\220\007" +
    "\153\010\156\011\073\025\142\001\001\000\014\006\217" +
    "\007\153\010\156\011\073\025\142\001\001\000\014\006" +
    "\216\007\153\010\156\011\073\025\142\001\001\000\002" +
    "\001\001\000\014\006\215\007\153\010\156\011\073\025" +
    "\142\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\006\210\007\153\010\156\011\073\025\142\001\001\000" +
    "\014\006\207\007\153\010\156\011\073\025\142\001\001" +
    "\000\014\006\206\007\153\010\156\011\073\025\142\001" +
    "\001\000\014\006\205\007\153\010\156\011\073\025\142" +
    "\001\001\000\014\006\204\007\153\010\156\011\073\025" +
    "\142\001\001\000\004\032\175\001\001\000\004\032\175" +
    "\001\001\000\004\032\175\001\001\000\004\032\175\001" +
    "\001\000\004\032\175\001\001\000\002\001\001\000\014" +
    "\006\213\007\153\010\156\011\073\025\142\001\001\000" +
    "\004\032\175\001\001\000\002\001\001\000\004\032\175" +
    "\001\001\000\004\032\175\001\001\000\004\032\175\001" +
    "\001\000\004\032\175\001\001\000\014\006\222\007\153" +
    "\010\156\011\073\025\142\001\001\000\004\032\175\001" +
    "\001\000\004\032\175\001\001\000\004\032\175\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\032\175" +
    "\001\001\000\004\032\175\001\001\000\004\032\175\001" +
    "\001\000\004\032\175\001\001\000\002\001\001\000\004" +
    "\032\175\001\001\000\002\001\001\000\014\006\251\007" +
    "\153\010\156\011\073\025\142\001\001\000\004\032\175" +
    "\001\001\000\002\001\001\000\014\006\254\007\153\010" +
    "\156\011\073\025\142\001\001\000\004\032\175\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\032\175\001" +
    "\001\000\004\032\175\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\006\265\007\153\010" +
    "\156\011\073\025\142\001\001\000\004\032\175\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\006\271\007" +
    "\153\010\156\011\073\025\142\001\001\000\004\032\175" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\006" +
    "\300\007\153\010\156\011\073\025\142\001\001\000\002" +
    "\001\001\000\014\006\277\007\153\010\156\011\073\025" +
    "\142\001\001\000\004\032\175\001\001\000\004\032\175" +
    "\001\001\000\014\006\302\007\153\010\156\011\073\025" +
    "\142\001\001\000\004\032\175\001\001\000\014\006\304" +
    "\007\153\010\156\011\073\025\142\001\001\000\004\032" +
    "\175\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\006\310\007\153\010\156\011\073\025\142\001\001\000" +
    "\004\032\175\001\001\000\002\001\001\000\004\032\315" +
    "\001\001\000\004\032\314\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\006\317\007\153\010\156\011\073" +
    "\025\142\001\001\000\004\032\175\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\005\324\013\004\016\325" +
    "\037\326\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\040\330\041\327\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\031\332\001\001\000" +
    "\002\001\001\000\014\006\340\007\153\010\156\011\073" +
    "\025\142\001\001\000\014\006\335\007\153\010\156\011" +
    "\073\025\142\001\001\000\004\032\175\001\001\000\004" +
    "\002\337\001\001\000\002\001\001\000\004\032\175\001" +
    "\001\000\016\006\343\007\153\010\156\011\073\025\142" +
    "\036\342\001\001\000\002\001\001\000\004\032\175\001" +
    "\001\000\022\006\350\007\153\010\156\011\073\025\142" +
    "\034\347\035\345\036\346\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\032\175\001\001" +
    "\000\002\001\001\000\020\006\350\007\153\010\156\011" +
    "\073\025\142\034\353\036\346\001\001\000\002\001\001" +
    "\000\004\041\355\001\001\000\002\001\001\000\004\031" +
    "\332\001\001\000\014\006\360\007\153\010\156\011\073" +
    "\025\142\001\001\000\004\032\175\001\001\000\016\006" +
    "\106\007\362\010\364\011\073\025\142\027\363\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\002\366\001\001\000\002\001\001\000\014\006\370" +
    "\007\153\010\156\011\073\025\142\001\001\000\004\032" +
    "\175\001\001\000\016\006\106\007\362\010\364\011\073" +
    "\025\142\027\372\001\001\000\002\001\001\000\004\002" +
    "\374\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\032\175\001\001\000\004\032\175\001\001\000\002\001" +
    "\001\000\004\032\175\001\001\000\002\001\001\000\014" +
    "\006\u0104\007\153\010\156\011\073\025\142\001\001\000" +
    "\004\032\175\001\001\000\002\001\001\000\014\006\u0107" +
    "\007\153\010\156\011\073\025\142\001\001\000\004\032" +
    "\175\001\001\000\014\006\u0109\007\153\010\156\011\073" +
    "\025\142\001\001\000\004\032\175\001\001\000\004\002" +
    "\u010b\001\001\000\002\001\001\000\014\006\u010d\007\153" +
    "\010\156\011\073\025\142\001\001\000\004\032\175\001" +
    "\001\000\004\002\u010f\001\001\000\002\001\001\000\010" +
    "\002\u0112\023\u0113\024\u0111\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\006\u0115\007\153" +
    "\010\156\011\073\025\142\001\001\000\004\032\175\001" +
    "\001\000\002\001\001\000\014\006\u0118\007\153\010\156" +
    "\011\073\025\142\001\001\000\004\032\175\001\001\000" +
    "\002\001\001\000\006\043\u011d\045\u011b\001\001\000\006" +
    "\043\u0125\044\u0123\001\001\000\014\006\u011e\007\153\010" +
    "\156\011\073\025\142\001\001\000\002\001\001\000\004" +
    "\032\175\001\001\000\062\002\140\003\u0120\004\146\005" +
    "\124\006\106\007\066\010\115\011\073\013\004\014\147" +
    "\015\111\016\113\017\134\020\131\021\122\022\074\023" +
    "\105\025\142\026\077\033\133\037\070\042\130\046\123" +
    "\057\107\001\001\000\060\002\140\004\u0121\005\124\006" +
    "\106\007\066\010\115\011\073\013\004\014\147\015\111" +
    "\016\113\017\134\020\131\021\122\022\074\023\105\025" +
    "\142\026\077\033\133\037\070\042\130\046\123\057\107" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\062\002\140" +
    "\003\u0127\004\146\005\124\006\106\007\066\010\115\011" +
    "\073\013\004\014\147\015\111\016\113\017\134\020\131" +
    "\021\122\022\074\023\105\025\142\026\077\033\133\037" +
    "\070\042\130\046\123\057\107\001\001\000\060\002\140" +
    "\004\u0121\005\124\006\106\007\066\010\115\011\073\013" +
    "\004\014\147\015\111\016\113\017\134\020\131\021\122" +
    "\022\074\023\105\025\142\026\077\033\133\037\070\042" +
    "\130\046\123\057\107\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


	   	
	public ArrayList<ErrorC> listaErrores = new ArrayList();	
	public ArrayList<Instruccion> ast = new ArrayList<Instruccion>();

	public AST raiz = null;

	/*@Override
	public void syntax_error(Symbol cur_token) 
	{        
		List<Integer> listaIdTokens = expected_token_ids();
		LinkedList<String> listaNombres = new LinkedList<String>();
		for (Integer expected : listaIdTokens) 
		{			
			listaNombres.add(symbl_name_from_id(expected));
		}		
		Utilidades.Singlenton.registrarError(String.valueOf(cur_token.value), 
			String.valueOf(cur_token.value) + ". Se esperaba :"+listaNombres.toString(), ErrorC.TipoError.LEXICO, cur_token.right+1, cur_token.left+1);
		/*listaErrores.add(
					listaErrores.add(new ErrorC(ErrorC.TipoError.SINTACTICO,
								String.valueOf(cur_token.value) + ". Se esperaba :"+listaNombres.toString(),
								cur_token.right+1,
								cur_token.left+1));
                
	}*/


    public void report_error(String message, Object info) 
    {
        int linea = 0;
        int columna = 0;
        java_cup.runtime.Symbol s = null;
        StringBuilder m = new StringBuilder("Error Sintactico");

        if (info instanceof java_cup.runtime.Symbol) 
        {
            s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) 
            {                
                columna = s.left+1;
                if (s.right>= 0)
                {
                    linea = s.right+ 1;
                }                    
            }
        }

        m.append(" Se esperaba: "+message);
        //System.err.println(m.toString());
        //System.out.println("Error");
        //System.out.println("Error linea:"+linea+", col:"+columna);
        LinkedList<String> toks = new LinkedList();

        if(!expected_token_ids().isEmpty())
        {
            Imprimir("No esta vacia "+ expected_token_ids().size());		  
            for(int w=0; w<expected_token_ids().size(); w++)
            { 
                if(expected_token_ids().get(w) !=sym.error)
                {
                    int tok = (int)expected_token_ids().get(w);                        
                    toks.add( symbol_name_from_id(tok) );
                }
            }
        }

        Imprimir(expected_token_ids().size());
      
        for(int w=0; w<expected_token_ids().size(); w++)
        { 
            if(expected_token_ids().get(w)!=sym.error)
            {
                int tok = (int)expected_token_ids().get(w);
                toks.add( symbol_name_from_id(tok) );
            }
        }
        String esperados = "";
        for(String id : toks)
        {
            if(!esperados.equals(""))
            {
                esperados += ", ";
            }
            esperados += id;
            
        }        
        Utilidades.Singlenton.registrarError(s.value.toString(), "Se esperaba .. " +esperados, ErrorC.TipoError.SINTACTICO, linea, columna);		                  
    }	

    public String symbol_name_from_id(int id){
        return sym.terminalNames[id];
    }

	/*public void addError(Symbol s)
	{
		listaErrores.add(new ErrorC("Sintactico",s.rights.right+1,ConvertirObjectToString(s.value)));
	}*/
	public void Imprimir(Object cad)
	{
		System.out.println(cad.toString());
	}	


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= LFUNCION 
            {
              Object RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> inst = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Imprimir("Correcto"); raiz = new AST(inst);; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // LFUNCION ::= LFUNCION FUNCION 
            {
              ArrayList<Nodo> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Nodo> l = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Funcion f = (Funcion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		l.add(f); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LFUNCION",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LFUNCION ::= FUNCION 
            {
              ArrayList<Nodo> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Funcion f = (Funcion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<Nodo> l = new ArrayList<Nodo>(); l.add(f); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LFUNCION",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // BLOQUE ::= llavei LINST llaved 
            {
              Bloque RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Nodo> l = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Bloque(l,lright,lleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // BLOQUE ::= llavei llaved 
            {
              Bloque RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Bloque(new ArrayList<Nodo>(),lright,lleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // LINST ::= LINST INST 
            {
              ArrayList<Nodo> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Nodo> lista = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo inst = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 lista.add(inst); RESULT = lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINST",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LINST ::= INST 
            {
              ArrayList<Nodo> RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo inst = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Nodo> l = new ArrayList<Nodo>(); l.add(inst); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINST",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INST ::= DECLARACION puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Declaracion inst = (Declaracion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = inst; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INST ::= ASIG puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Asignacion inst = (Asignacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INST ::= BLOQUE 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloque inst = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = inst; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INST ::= PRINT 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Imprimir inst = (Imprimir)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = inst; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INST ::= PRINTABLE 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ImprimirT inst = (ImprimirT)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INST ::= WHILE 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		While inst = (While)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INST ::= DOWHILE 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DoWhile inst = (DoWhile)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INST ::= FOR 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		For inst = (For)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INST ::= BREAK 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Break inst = (Break)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INST ::= CONTINUE 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Continuar inst = (Continuar)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INST ::= IF 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		If inst = (If)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INST ::= AUMENTO puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion inst = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INST ::= DECREMENTO puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion inst = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INST ::= ASIGV puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AsignacionVector inst = (AsignacionVector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // INST ::= FOREACH 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ForEach inst = (ForEach)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // INST ::= SWITCH 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Switch inst = (Switch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // INST ::= RETORNO 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Retorno inst = (Retorno)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // EXPLICITCAST ::= str_ pari EXP pard 
            {
              Expresion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion expresion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new StringCast(expresion, tright, tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPLICITCAST",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // EXPLICITCAST ::= todouble pari EXP pard 
            {
              Expresion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion expresion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DoubleCast(expresion, tright, tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPLICITCAST",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EXPLICITCAST ::= tochar pari EXP pard 
            {
              Expresion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion expresion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CharCast(expresion, tright, tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPLICITCAST",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // EXPLICITCAST ::= toint pari EXP pard 
            {
              Expresion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion expresion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IntCast(expresion, tright, tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPLICITCAST",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ACTUALIZACION ::= AUMENTO 
            {
              Expresion RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion inst = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZACION",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ACTUALIZACION ::= DECREMENTO 
            {
              Expresion RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion inst = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZACION",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SWITCH ::= switch_ pari EXP pard llavei LCASO llaved 
            {
              Switch RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion condicion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Caso> lista = (ArrayList<Caso>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                RESULT = new Switch(condicion, lista, iright, ileft);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SWITCH",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SWITCH ::= switch_ pari EXP pard llavei LCASO DEFECTO llaved 
            {
              Switch RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expresion condicion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Caso> lista = (ArrayList<Caso>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int defectoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int defectoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Caso defecto = (Caso)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                lista.add(defecto);
                RESULT = new Switch(condicion, lista, iright, ileft);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SWITCH",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // LCASO ::= LCASO CASO 
            {
              ArrayList<Caso> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Caso> l = (ArrayList<Caso>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int casoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int casoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Caso caso = (Caso)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		l.add(caso); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LCASO",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // LCASO ::= CASO 
            {
              ArrayList<Caso> RESULT =null;
		int casoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int casoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Caso caso = (Caso)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<Caso> l = new ArrayList<Caso>(); l.add(caso); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LCASO",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CASO ::= caso EXP dospuntos LINST 
            {
              Caso RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion condicion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int linstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int linstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> linst = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Caso(condicion,new Bloque(linst,linstright,linstleft),iright,ileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASO",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DEFECTO ::= defecto dospuntos LINST 
            {
              Caso RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int linstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int linstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> linst = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Caso(null,new Bloque(linst,linstright,linstleft),iright,ileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFECTO",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // IF ::= si pari EXP pard BLOQUE 
            {
              If RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String si = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion condicion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new If(condicion, bloque, siright, sileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // IF ::= si pari EXP pard BLOQUE sino ELSE 
            {
              If RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String si = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion condicion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int inst2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int inst2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		If inst2 = (If)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new If(condicion,bloque,inst2,siright, sileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ELSE ::= IF 
            {
              If RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		If inst = (If)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ELSE ::= BLOQUE 
            {
              If RESULT =null;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new If(new Literal(new Tipo(Tipo.TypePrimitive.BOOL), true, bloqueright,bloqueleft),bloque, bloqueright, bloqueleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // CONTINUE ::= continuar puntocoma 
            {
              Continuar RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String inst = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Continuar(instright, instleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTINUE",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // BREAK ::= romper puntocoma 
            {
              Break RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String inst = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Break(instright, instleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BREAK",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // WHILE ::= mientras pari EXP pard BLOQUE 
            {
              While RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String inst = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion condicion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new While(condicion,bloque,instright, instleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DOWHILE ::= hacer BLOQUE mientras pari EXP pard puntocoma 
            {
              DoWhile RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String inst = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion condicion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
            RESULT = new DoWhile(condicion, bloque, iright, ileft);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DOWHILE",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // FOREACH ::= para pari TIPO id dospuntos EXP pard BLOQUE 
            {
              ForEach RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String para = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int origenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int origenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion origen = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ForEach(t,id,origen, bloque, pararight,paraleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOREACH",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // FOR ::= para pari DECLARACION puntocoma EXP puntocoma ACTUALIZACION pard BLOQUE 
            {
              For RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String para = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Declaracion dec = (Declaracion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion condicion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int actleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int actright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion act = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new For(dec,condicion,act,bloque, paraleft,pararight);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FOR ::= para pari ASIG puntocoma EXP puntocoma ACTUALIZACION pard BLOQUE 
            {
              For RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String para = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Asignacion dec = (Asignacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion condicion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int actleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int actright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion act = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new For(dec,condicion,act,bloque,paraleft,pararight);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // PRINTABLE ::= printable pari pard puntocoma 
            {
              ImprimirT RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		RESULT = new ImprimirT(pright,pleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTABLE",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // PRINT ::= println pari EXP pard puntocoma 
            {
              Imprimir RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion valor = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new Imprimir(valor, pright,pleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINT",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // PRINT ::= print pari EXP pard puntocoma 
            {
              Imprimir RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion valor = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new Imprimir(valor,false,pright,pleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINT",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ASIG ::= id igual EXP 
            {
              Asignacion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion valor = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Asignacion(id, valor, idright,idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIG",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ASIGV ::= id LEXP igual EXP 
            {
              AsignacionVector RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int coordenasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int coordenasright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Expresion> coordenas = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion valor = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AsignacionVector(id, coordenas, valor,  idright,idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGV",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DECLARACION ::= TIPO LDEC 
            {
              Declaracion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Dec> lista = (ArrayList<Dec>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Declaracion(t, lista, tright, tleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // LDEC ::= LDEC coma DEC 
            {
              ArrayList<Dec> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Dec> lista = (ArrayList<Dec>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 lista.add(dec); RESULT = lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LDEC",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // LDEC ::= DEC 
            {
              ArrayList<Dec> RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Dec> lista = new ArrayList<Dec>(); lista.add(dec); RESULT = lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LDEC",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DEC ::= id 
            {
              Dec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Dec(id,idright, idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEC",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DEC ::= id igual EXP 
            {
              Dec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion valor = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Dec(id,valor, idright, idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEC",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DEC ::= id NDIM 
            {
              Dec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer dim = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Dec(id,dim, idright, idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEC",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DEC ::= id NDIM igual EXP 
            {
              Dec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer dim = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion valor = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Dec(id,dim, valor, idright, idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEC",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DEC ::= id NDIM igual ARR 
            {
              Dec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer dim = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoNario valor = (NodoNario)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Dec(id,dim, new ExpresionArreglo(valor, valorright, valorleft), idright, idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEC",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // TIPO ::= PRIMITIVO 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = t;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // TIPO ::= id 
            {
              Tipo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Tipo(id,idright, idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // NDIM ::= NDIM corchetei corcheted 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = n+1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NDIM",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // NDIM ::= corchetei corcheted 
            {
              Integer RESULT =null;
		 RESULT = 1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NDIM",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXP ::= EXP and EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new And(opi, opd, opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXP ::= EXP or EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Or(opi, opd, opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXP ::= not EXP 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Not(op, opright,opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXP ::= EXP igualigual EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Igual(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXP ::= EXP desigual EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Desigual(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXP ::= EXP mayor EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Mayor(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXP ::= EXP mayorigual EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new MayorIgual(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXP ::= EXP menor EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Menor(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EXP ::= EXP menorigual EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new MenorIgual(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXP ::= EXP suma EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Suma(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXP ::= EXP menos EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Resta(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXP ::= EXP xor EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Xor(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXP ::= EXP multi EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Multiplicacion(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXP ::= EXP div EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Division(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXP ::= EXP modulo EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Modulo(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXP ::= TER 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Ternario op = (Ternario)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = op;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXP ::= menos EXP 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Menos(op, opright,opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXP ::= AUMENTO 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = op;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXP ::= potencia pari EXP coma EXP pard 
            {
              Expresion RESULT =null;
		int potleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int potright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String pot = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Potencia(opi,opd,potright,potleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXP ::= EXP instanceof_ id 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new InstanceOf(op,tipo, opright, opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXP ::= DECREMENTO 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = op;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXP ::= EXP punto id pari pard 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new Llamada(op,t, opright,opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXP ::= EXP punto tostring pari pard 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		RESULT = new ToString(op,opright,opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXP ::= EXP punto tolower pari pard 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		RESULT = new ToLower(op,opright,opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXP ::= EXP punto id 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int atribleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int atribright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String atrib = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Acceso(op,atrib, opright,opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXP ::= EXP punto touper pari pard 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		RESULT = new ToUper(op,opright,opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXP ::= pari PRIMITIVO pard EXP 
            {
              Expresion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Casteo(op,tipo, tright, tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXP ::= pari id pard EXP 
            {
              Expresion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Casteo(op,tipo, tright, tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXP ::= entero 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		int v = (int)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Tipo.TypePrimitive.INT), v, vright,vleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXP ::= decimal 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		double v = (double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Tipo.TypePrimitive.DOUBLE), v, vright,vleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXP ::= booleano 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		boolean v = (boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Tipo.TypePrimitive.BOOL), v, vright,vleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EXP ::= cadena 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Tipo.TypePrimitive.STRING), v, vright,vleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // EXP ::= caracter 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		char v = (char)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Tipo.TypePrimitive.CHAR), v, vright,vleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // EXP ::= id 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Variable(v, vright,vleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EXP ::= nuevo PRIMITIVO LEXP 
            {
              Expresion RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expresion> l = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExpresionArreglo(tipo,l,nright,nleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // EXP ::= nuevo id LEXP 
            {
              Expresion RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expresion> l = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExpresionArreglo(new Tipo(tipo), l,nright,nleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // EXP ::= pari EXP pard 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = op;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // EXP ::= EXP LEXP 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion id = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int coorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int coorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expresion> coor = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AccesoVector(id, coor , idright, idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // EXP ::= EXPLICITCAST 
            {
              Expresion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = exp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // RETORNO ::= retorno EXPRETORNO puntocoma 
            {
              Retorno RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Retorno(exp, rright, rleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETORNO",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // EXPRETORNO ::= EXP 
            {
              Expresion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = exp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRETORNO",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // EXPRETORNO ::= nulo 
            {
              Expresion RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Literal(new Tipo(Tipo.TypePrimitive.NULO), null, rright, rleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRETORNO",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // FUNCION ::= CABECERAMET BLOQUE 
            {
              Funcion RESULT =null;
		int funcionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int funcionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Funcion funcion = (Funcion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 funcion.setInstrucciones(bloque); RESULT = funcion;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // FUNCION ::= CABECERAMET puntocoma 
            {
              Funcion RESULT =null;
		int funcionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int funcionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Funcion funcion = (Funcion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = funcion;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // CABECERAMET ::= LMODFICADOR RESULTADO id pari LPARFORMAL pard 
            {
              Funcion RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ArrayList<String> m = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int resleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int resright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Tipo res = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<ParametroFormal> lf = (ArrayList<ParametroFormal>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 Funcion f = new Funcion(m,res,nombre, lf, mright,mleft ); RESULT = f;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CABECERAMET",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // CABECERAMET ::= RESULTADO id pari LPARFORMAL pard 
            {
              Funcion RESULT =null;
		int resleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int resright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Tipo res = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<ParametroFormal> lf = (ArrayList<ParametroFormal>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 Funcion f = new Funcion( new ArrayList<String>(),res,nombre, lf, resright,resleft ); RESULT = f;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CABECERAMET",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // LPARFORMAL ::= LPARFORMAL coma PARFORMAL 
            {
              ArrayList<ParametroFormal> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<ParametroFormal> lista = (ArrayList<ParametroFormal>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParametroFormal par = (ParametroFormal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		lista.add(par); RESULT = lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LPARFORMAL",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // LPARFORMAL ::= PARFORMAL 
            {
              ArrayList<ParametroFormal> RESULT =null;
		int parleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParametroFormal par = (ParametroFormal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<ParametroFormal> l = new ArrayList<ParametroFormal>(); l.add(par); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LPARFORMAL",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // LPARFORMAL ::= 
            {
              ArrayList<ParametroFormal> RESULT =null;
		ArrayList<ParametroFormal> l = new ArrayList<ParametroFormal>();RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LPARFORMAL",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // PARFORMAL ::= TIPO id 
            {
              ParametroFormal RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ParametroFormal(tipo, nombre, true,0, tiporight, tipoleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARFORMAL",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // PARFORMAL ::= final_ TIPO id 
            {
              ParametroFormal RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ParametroFormal(tipo, nombre, true,0,fright, fleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARFORMAL",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // PARFORMAL ::= TIPO id NDIM 
            {
              ParametroFormal RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ParametroFormal(tipo, nombre, true,n, tiporight, tipoleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARFORMAL",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // PARFORMAL ::= final_ TIPO id NDIM 
            {
              ParametroFormal RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ParametroFormal(tipo, nombre, true, n, fright, fleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARFORMAL",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // RESULTADO ::= TIPO 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = t;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RESULTADO",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // RESULTADO ::= tvoid 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Tipo(t);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RESULTADO",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // LMODFICADOR ::= LMODFICADOR MODIFICADOR 
            {
              ArrayList<String> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> l = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.add(m); RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LMODFICADOR",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // LMODFICADOR ::= MODIFICADOR 
            {
              ArrayList<String> RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<String> l = new ArrayList<String>() ; if(m!=null){l.add(m);} RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LMODFICADOR",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // MODIFICADOR ::= publico 
            {
              String RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = m;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MODIFICADOR",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // MODIFICADOR ::= protegido 
            {
              String RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = m;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MODIFICADOR",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // MODIFICADOR ::= privado 
            {
              String RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = m;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MODIFICADOR",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // MODIFICADOR ::= abstracto 
            {
              String RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = m;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MODIFICADOR",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // MODIFICADOR ::= final_ 
            {
              String RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = m;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MODIFICADOR",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // MODIFICADOR ::= estatico 
            {
              String RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = m;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MODIFICADOR",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // LEXP ::= LEXP corchetei EXP corcheted 
            {
              ArrayList<Expresion> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<Expresion> l = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		l.add(exp); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LEXP",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // LEXP ::= corchetei EXP corcheted 
            {
              ArrayList<Expresion> RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 ArrayList<Expresion> l = new ArrayList<Expresion>(); l.add(exp); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LEXP",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // ARR ::= llavei LITEM llaved 
            {
              NodoNario RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoNario nodo = (NodoNario)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = nodo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARR",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // LITEM ::= LITEM coma ITEM 
            {
              NodoNario RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoNario nodo = (NodoNario)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int itemleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int itemright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoNario item = (NodoNario)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 nodo.addHijo(item); RESULT = nodo; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LITEM",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // LITEM ::= ITEM 
            {
              NodoNario RESULT =null;
		int itemleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int itemright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoNario item = (NodoNario)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 NodoNario nodo = new NodoNario(); nodo.addHijo(item); RESULT = nodo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LITEM",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // ITEM ::= EXP 
            {
              NodoNario RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NodoNario(exp);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ITEM",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // ITEM ::= ARR 
            {
              NodoNario RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoNario exp = (NodoNario)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = exp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ITEM",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // AUMENTO ::= EXP aumento 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Aumento(op, opright, opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AUMENTO",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // AUMENTO ::= aumento EXP 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Preaumento(op, opright, opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AUMENTO",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // DECREMENTO ::= EXP decremento 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Decremento(op, opright, opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECREMENTO",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // DECREMENTO ::= decremento EXP 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Predecremento(op, opright, opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECREMENTO",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // TER ::= EXP interrogante EXP dospuntos EXP 
            {
              Ternario RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion v = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion f = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Ternario(c,v,f,cright,cleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TER",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // PRIMITIVO ::= tint 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Tipo(Tipo.TypePrimitive.INT,tright, tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // PRIMITIVO ::= tchar 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =  new Tipo(Tipo.TypePrimitive.CHAR,tright, tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // PRIMITIVO ::= tdouble 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Tipo(Tipo.TypePrimitive.DOUBLE,tright, tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // PRIMITIVO ::= tbool 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Tipo(Tipo.TypePrimitive.BOOL,tright, tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // PRIMITIVO ::= tstring 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Tipo(Tipo.TypePrimitive.STRING,tright, tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
