
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analisis;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import AST.*;
import Utilidades.ErrorC;
import AST.Instruccion.*;
import AST.Instruccion.Ciclos.*;
import AST.Expresion.*;
import AST.Entorno.*;
import AST.Expresion.Aritmetica.*;
import AST.Expresion.Relacional.*;
import AST.Expresion.Logica.*;
import AST.Expresion.Arreglo.*;
import AST.Expresion.Casteo.*;
import AST.Expresion.Casteo.Explicito.*;
import AST.Expresion.Funcion.*;
import AST.Clase.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\255\000\002\002\004\000\002\012\003\000\002\074" +
    "\004\000\002\074\003\000\002\071\010\000\002\071\012" +
    "\000\002\072\003\000\002\072\002\000\002\073\004\000" +
    "\002\073\005\000\002\073\003\000\002\073\004\000\002" +
    "\073\005\000\002\073\006\000\002\002\005\000\002\002" +
    "\004\000\002\003\004\000\002\003\003\000\002\004\004" +
    "\000\002\004\004\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\004\000\002\004\004\000\002\004\004" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\004\000\002\011\006\000\002\011\006\000\002" +
    "\011\006\000\002\011\006\000\002\027\003\000\002\027" +
    "\003\000\002\046\011\000\002\046\012\000\002\045\004" +
    "\000\002\045\003\000\002\043\006\000\002\044\005\000" +
    "\002\023\007\000\002\023\011\000\002\024\003\000\002" +
    "\024\003\000\002\022\004\000\002\021\004\000\002\017" +
    "\007\000\002\020\011\000\002\042\012\000\002\026\013" +
    "\000\002\026\013\000\002\015\006\000\002\014\007\000" +
    "\002\014\007\000\002\016\005\000\002\033\006\000\002" +
    "\005\004\000\002\040\005\000\002\040\003\000\002\041" +
    "\003\000\002\041\005\000\002\041\004\000\002\041\006" +
    "\000\002\041\006\000\002\037\003\000\002\037\003\000" +
    "\002\031\005\000\002\031\004\000\002\006\005\000\002" +
    "\006\005\000\002\006\004\000\002\006\005\000\002\006" +
    "\005\000\002\006\005\000\002\006\005\000\002\006\005" +
    "\000\002\006\005\000\002\006\005\000\002\006\005\000" +
    "\002\006\005\000\002\006\005\000\002\006\005\000\002" +
    "\006\005\000\002\006\003\000\002\006\004\000\002\006" +
    "\003\000\002\006\010\000\002\006\005\000\002\006\003" +
    "\000\002\006\007\000\002\006\007\000\002\006\005\000" +
    "\002\006\007\000\002\006\006\000\002\006\006\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\005" +
    "\000\002\006\005\000\002\006\006\000\002\006\007\000" +
    "\002\006\005\000\002\006\004\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\062\010\000\002\062" +
    "\006\000\002\061\005\000\002\064\003\000\002\064\002" +
    "\000\002\065\005\000\002\065\003\000\002\030\003\000" +
    "\002\030\003\000\002\056\004\000\002\056\004\000\002" +
    "\057\010\000\002\057\007\000\002\057\007\000\002\057" +
    "\006\000\002\052\003\000\002\052\003\000\002\054\005" +
    "\000\002\054\003\000\002\054\002\000\002\053\004\000" +
    "\002\053\005\000\002\053\005\000\002\053\006\000\002" +
    "\047\004\000\002\047\003\000\002\050\003\000\002\050" +
    "\003\000\002\070\005\000\002\070\004\000\002\066\004" +
    "\000\002\066\003\000\002\063\003\000\002\063\003\000" +
    "\002\063\003\000\002\051\003\000\002\051\003\000\002" +
    "\051\003\000\002\032\006\000\002\032\005\000\002\036" +
    "\005\000\002\035\005\000\002\035\003\000\002\034\003" +
    "\000\002\034\003\000\002\007\004\000\002\007\004\000" +
    "\002\010\004\000\002\010\004\000\002\025\007\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0169\000\016\036\012\045\014\052\004\053\006\054" +
    "\010\061\013\001\002\000\036\004\uff66\005\uff66\006\uff66" +
    "\007\uff66\010\uff66\016\uff66\034\uff66\036\uff66\041\uff66\045" +
    "\uff66\052\uff66\053\uff66\054\uff66\061\uff66\001\002\000\036" +
    "\004\uff72\005\uff72\006\uff72\007\uff72\010\uff72\016\uff72\034" +
    "\uff72\036\uff72\041\uff72\045\uff72\052\uff72\053\uff72\054\uff72" +
    "\061\uff72\001\002\000\036\004\uff67\005\uff67\006\uff67\007" +
    "\uff67\010\uff67\016\uff67\034\uff67\036\uff67\041\uff67\045\uff67" +
    "\052\uff67\053\uff67\054\uff67\061\uff67\001\002\000\004\002" +
    "\u016b\001\002\000\036\004\uff68\005\uff68\006\uff68\007\uff68" +
    "\010\uff68\016\uff68\034\uff68\036\uff68\041\uff68\045\uff68\052" +
    "\uff68\053\uff68\054\uff68\061\uff68\001\002\000\020\002\ufffe" +
    "\036\ufffe\045\ufffe\052\ufffe\053\ufffe\054\ufffe\061\ufffe\001" +
    "\002\000\036\004\uff70\005\uff70\006\uff70\007\uff70\010\uff70" +
    "\016\uff70\034\uff70\036\uff70\041\uff70\045\uff70\052\uff70\053" +
    "\uff70\054\uff70\061\uff70\001\002\000\036\004\uff6a\005\uff6a" +
    "\006\uff6a\007\uff6a\010\uff6a\016\uff6a\034\uff6a\036\uff6a\041" +
    "\uff6a\045\uff6a\052\uff6a\053\uff6a\054\uff6a\061\uff6a\001\002" +
    "\000\036\004\uff6b\005\uff6b\006\uff6b\007\uff6b\010\uff6b\016" +
    "\uff6b\034\uff6b\036\uff6b\041\uff6b\045\uff6b\052\uff6b\053\uff6b" +
    "\054\uff6b\061\uff6b\001\002\000\020\036\012\041\023\045" +
    "\014\052\004\053\006\054\010\061\013\001\002\000\036" +
    "\004\uff71\005\uff71\006\uff71\007\uff71\010\uff71\016\uff71\034" +
    "\uff71\036\uff71\041\uff71\045\uff71\052\uff71\053\uff71\054\uff71" +
    "\061\uff71\001\002\000\036\004\uff69\005\uff69\006\uff69\007" +
    "\uff69\010\uff69\016\uff69\034\uff69\036\uff69\041\uff69\045\uff69" +
    "\052\uff69\053\uff69\054\uff69\061\uff69\001\002\000\020\002" +
    "\000\036\012\045\014\052\004\053\006\054\010\061\013" +
    "\001\002\000\020\002\uffff\036\uffff\045\uffff\052\uffff\053" +
    "\uffff\054\uffff\061\uffff\001\002\000\036\004\uff73\005\uff73" +
    "\006\uff73\007\uff73\010\uff73\016\uff73\034\uff73\036\uff73\041" +
    "\uff73\045\uff73\052\uff73\053\uff73\054\uff73\061\uff73\001\002" +
    "\000\004\016\024\001\002\000\006\012\025\044\026\001" +
    "\002\000\040\004\035\005\040\006\036\007\032\010\043" +
    "\013\ufffa\016\045\034\033\036\012\045\014\052\004\053" +
    "\006\054\010\056\047\061\013\001\002\000\004\016\027" +
    "\001\002\000\004\012\030\001\002\000\040\004\035\005" +
    "\040\006\036\007\032\010\043\013\ufffa\016\045\034\033" +
    "\036\012\045\014\052\004\053\006\054\010\056\047\061" +
    "\013\001\002\000\004\016\uffb9\001\002\000\012\014\uff56" +
    "\015\uff56\016\uff56\017\uff56\001\002\000\004\016\uff7b\001" +
    "\002\000\040\004\035\005\040\006\036\007\032\010\043" +
    "\013\ufffb\016\045\034\033\036\012\045\014\052\004\053" +
    "\006\054\010\056\u0164\061\013\001\002\000\012\014\uff59" +
    "\015\uff59\016\uff59\017\uff59\001\002\000\012\014\uff58\015" +
    "\uff58\016\uff58\017\uff58\001\002\000\004\016\uff7c\001\002" +
    "\000\012\014\uff57\015\uff57\016\uff57\017\uff57\001\002\000" +
    "\004\011\u0162\001\002\000\004\013\u0161\001\002\000\012" +
    "\014\uff55\015\uff55\016\uff55\017\uff55\001\002\000\006\011" +
    "\341\012\343\001\002\000\006\014\336\016\uffb8\001\002" +
    "\000\004\016\335\001\002\000\004\057\322\001\002\000" +
    "\034\004\035\005\040\006\036\007\032\010\043\016\052" +
    "\034\033\036\012\045\014\052\004\053\006\054\010\061" +
    "\013\001\002\000\040\004\ufff7\005\ufff7\006\ufff7\007\ufff7" +
    "\010\ufff7\013\ufff7\016\ufff7\034\ufff7\036\ufff7\045\ufff7\052" +
    "\ufff7\053\ufff7\054\ufff7\056\ufff7\061\ufff7\001\002\000\006" +
    "\014\317\016\uffb8\001\002\000\004\016\056\001\002\000" +
    "\006\011\uffbf\024\uffbf\001\002\000\006\011\uff6f\024\314" +
    "\001\002\000\014\011\uffbe\014\060\017\061\021\062\024" +
    "\uffbe\001\002\000\012\011\uffbc\017\272\021\301\024\uffbc" +
    "\001\002\000\024\004\035\005\040\006\036\007\032\010" +
    "\043\015\uff78\016\262\024\uff78\045\266\001\002\000\004" +
    "\020\261\001\002\000\046\014\110\016\102\033\103\051" +
    "\111\064\112\065\101\066\105\067\067\070\064\101\073" +
    "\102\104\104\070\116\077\124\065\125\074\126\106\127" +
    "\066\130\072\001\002\000\066\011\uff8d\013\uff8d\015\uff8d" +
    "\017\uff8d\020\uff8d\024\uff8d\025\uff8d\026\uff8d\027\uff8d\030" +
    "\uff8d\031\uff8d\032\uff8d\050\uff8d\077\uff8d\100\uff8d\101\uff8d" +
    "\102\uff8d\103\uff8d\105\uff8d\106\uff8d\115\uff8d\116\uff8d\117" +
    "\uff8d\120\uff8d\121\uff8d\123\uff8d\001\002\000\004\014\256" +
    "\001\002\000\066\011\uff97\013\uff97\015\uff97\017\uff97\020" +
    "\uff97\024\uff97\025\uff97\026\uff97\027\uff97\030\uff97\031\uff97" +
    "\032\uff97\050\uff97\077\uff97\100\uff97\101\uff97\102\uff97\103" +
    "\uff97\105\uff97\106\uff97\115\uff97\116\uff97\117\uff97\120\uff97" +
    "\121\uff97\123\uff97\001\002\000\066\011\uff99\013\uff99\015" +
    "\uff99\017\uff99\020\uff99\024\uff99\025\uff99\026\uff99\027\uff99" +
    "\030\uff99\031\uff99\032\uff99\050\uff99\077\uff99\100\uff99\101" +
    "\uff99\102\uff99\103\uff99\105\uff99\106\uff99\115\uff99\116\uff99" +
    "\117\uff99\120\uff99\121\uff99\123\uff99\001\002\000\004\014" +
    "\253\001\002\000\046\014\110\016\102\033\103\051\111" +
    "\064\112\065\101\066\105\067\067\070\064\101\073\102" +
    "\104\104\070\116\077\124\065\125\074\126\106\127\066" +
    "\130\072\001\002\000\066\011\uffa6\013\uffa6\015\uffa6\017" +
    "\uffa6\020\uffa6\024\uffa6\025\uffa6\026\uffa6\027\uffa6\030\uffa6" +
    "\031\uffa6\032\uffa6\050\uffa6\077\uffa6\100\uffa6\101\uffa6\102" +
    "\uffa6\103\uffa6\105\uffa6\106\uffa6\115\uffa6\116\uffa6\117\uffa6" +
    "\120\uffa6\121\uffa6\123\uffa6\001\002\000\066\011\uff98\013" +
    "\uff98\015\uff98\017\uff98\020\uff98\024\uff98\025\uff98\026\uff98" +
    "\027\uff98\030\uff98\031\uff98\032\uff98\050\uff98\077\uff98\100" +
    "\uff98\101\uff98\102\uff98\103\uff98\105\uff98\106\uff98\115\uff98" +
    "\116\uff98\117\uff98\120\uff98\121\uff98\123\uff98\001\002\000" +
    "\046\014\110\016\102\033\103\051\111\064\112\065\101" +
    "\066\105\067\067\070\064\101\073\102\104\104\070\116" +
    "\077\124\065\125\074\126\106\127\066\130\072\001\002" +
    "\000\066\011\uff96\013\uff96\015\uff96\017\uff96\020\uff96\024" +
    "\uff96\025\uff96\026\uff96\027\uff96\030\uff96\031\uff96\032\uff96" +
    "\050\uff96\077\uff96\100\uff96\101\uff96\102\uff96\103\uff96\105" +
    "\uff96\106\uff96\115\uff96\116\uff96\117\uff96\120\uff96\121\uff96" +
    "\123\uff96\001\002\000\056\011\uffbd\017\116\024\uffbd\025" +
    "\144\026\134\027\146\030\127\031\122\032\132\050\142" +
    "\077\133\101\125\102\136\103\130\105\145\106\123\115" +
    "\143\116\126\117\135\120\131\121\137\123\141\001\002" +
    "\000\066\011\uffa4\013\uffa4\015\uffa4\017\uffa4\020\uffa4\024" +
    "\uffa4\025\uffa4\026\uffa4\027\uffa4\030\uffa4\031\uffa4\032\uffa4" +
    "\050\uffa4\077\uffa4\100\uffa4\101\uffa4\102\uffa4\103\uffa4\105" +
    "\uffa4\106\uffa4\115\uffa4\116\uffa4\117\uffa4\120\uffa4\121\uffa4" +
    "\123\uffa4\001\002\000\046\014\110\016\102\033\103\051" +
    "\111\064\112\065\101\066\105\067\067\070\064\101\073" +
    "\102\104\104\070\116\077\124\065\125\074\126\106\127" +
    "\066\130\072\001\002\000\066\011\uff8e\013\uff8e\015\uff8e" +
    "\017\uff8e\020\uff8e\024\uff8e\025\uff8e\026\uff8e\027\uff8e\030" +
    "\uff8e\031\uff8e\032\uff8e\050\uff8e\077\uff8e\100\uff8e\101\uff8e" +
    "\102\uff8e\103\uff8e\105\uff8e\106\uff8e\115\uff8e\116\uff8e\117" +
    "\uff8e\120\uff8e\121\uff8e\123\uff8e\001\002\000\004\014\245" +
    "\001\002\000\070\011\uff95\013\uff95\014\224\015\uff95\017" +
    "\uff95\020\uff95\024\uff95\025\uff95\026\uff95\027\uff95\030\uff95" +
    "\031\uff95\032\uff95\050\uff95\077\uff95\100\uff95\101\uff95\102" +
    "\uff95\103\uff95\105\uff95\106\uff95\115\uff95\116\uff95\117\uff95" +
    "\120\uff95\121\uff95\123\uff95\001\002\000\004\014\240\001" +
    "\002\000\046\014\110\016\102\033\103\051\111\064\112" +
    "\065\101\066\105\067\067\070\064\101\073\102\104\104" +
    "\070\116\077\124\065\125\074\126\106\127\066\130\072" +
    "\001\002\000\004\014\234\001\002\000\066\011\uff9a\013" +
    "\uff9a\015\uff9a\017\uff9a\020\uff9a\024\uff9a\025\uff9a\026\uff9a" +
    "\027\uff9a\030\uff9a\031\uff9a\032\uff9a\050\uff9a\077\uff9a\100" +
    "\uff9a\101\uff9a\102\uff9a\103\uff9a\105\uff9a\106\uff9a\115\uff9a" +
    "\116\uff9a\117\uff9a\120\uff9a\121\uff9a\123\uff9a\001\002\000" +
    "\066\011\uffa1\013\uffa1\015\uffa1\017\uffa1\020\uffa1\024\uffa1" +
    "\025\uffa1\026\uffa1\027\uffa1\030\uffa1\031\uffa1\032\uffa1\050" +
    "\uffa1\077\uffa1\100\uffa1\101\uffa1\102\uffa1\103\uffa1\105\uffa1" +
    "\106\uffa1\115\uffa1\116\uffa1\117\uffa1\120\uffa1\121\uffa1\123" +
    "\uffa1\001\002\000\060\004\035\005\040\006\036\007\032" +
    "\010\043\014\110\016\223\033\103\051\111\064\112\065" +
    "\101\066\105\067\067\070\064\101\073\102\104\104\070" +
    "\116\077\124\065\125\074\126\106\127\066\130\072\001" +
    "\002\000\016\004\035\005\040\006\036\007\032\010\043" +
    "\016\115\001\002\000\066\011\uff8c\013\uff8c\015\uff8c\017" +
    "\uff8c\020\uff8c\024\uff8c\025\uff8c\026\uff8c\027\uff8c\030\uff8c" +
    "\031\uff8c\032\uff8c\050\uff8c\077\uff8c\100\uff8c\101\uff8c\102" +
    "\uff8c\103\uff8c\105\uff8c\106\uff8c\115\uff8c\116\uff8c\117\uff8c" +
    "\120\uff8c\121\uff8c\123\uff8c\001\002\000\004\014\215\001" +
    "\002\000\006\014\uffb9\017\116\001\002\000\006\014\uffb8" +
    "\017\116\001\002\000\046\014\110\016\102\033\103\051" +
    "\111\064\112\065\101\066\105\067\067\070\064\101\073" +
    "\102\104\104\070\116\077\124\065\125\074\126\106\127" +
    "\066\130\072\001\002\000\066\011\uff93\013\uff93\015\uff93" +
    "\017\120\020\uff93\024\uff93\025\uff93\026\uff93\027\uff93\030" +
    "\uff93\031\uff93\032\uff93\050\uff93\077\uff93\100\uff93\101\uff93" +
    "\102\uff93\103\uff93\105\uff93\106\uff93\115\uff93\116\uff93\117" +
    "\uff93\120\uff93\121\uff93\123\uff93\001\002\000\046\014\110" +
    "\016\102\033\103\051\111\064\112\065\101\066\105\067" +
    "\067\070\064\101\073\102\104\104\070\116\077\124\065" +
    "\125\074\126\106\127\066\130\072\001\002\000\054\017" +
    "\116\020\124\025\144\026\134\027\146\030\127\031\122" +
    "\032\132\050\142\077\133\101\125\102\136\103\130\105" +
    "\145\106\123\115\143\116\126\117\135\120\131\121\137" +
    "\123\141\001\002\000\046\014\110\016\102\033\103\051" +
    "\111\064\112\065\101\066\105\067\067\070\064\101\073" +
    "\102\104\104\070\116\077\124\065\125\074\126\106\127" +
    "\066\130\072\001\002\000\046\014\110\016\102\033\103" +
    "\051\111\064\112\065\101\066\105\067\067\070\064\101" +
    "\073\102\104\104\070\116\077\124\065\125\074\126\106" +
    "\127\066\130\072\001\002\000\070\011\uff65\013\uff65\015" +
    "\uff65\017\uff65\020\uff65\021\uff65\024\uff65\025\uff65\026\uff65" +
    "\027\uff65\030\uff65\031\uff65\032\uff65\050\uff65\077\uff65\100" +
    "\uff65\101\uff65\102\uff65\103\uff65\105\uff65\106\uff65\115\uff65" +
    "\116\uff65\117\uff65\120\uff65\121\uff65\123\uff65\001\002\000" +
    "\066\011\uff5e\013\uff5e\015\uff5e\017\uff5e\020\uff5e\024\uff5e" +
    "\025\uff5e\026\uff5e\027\uff5e\030\uff5e\031\uff5e\032\uff5e\050" +
    "\uff5e\077\uff5e\100\uff5e\101\uff5e\102\uff5e\103\uff5e\105\uff5e" +
    "\106\uff5e\115\uff5e\116\uff5e\117\uff5e\120\uff5e\121\uff5e\123" +
    "\uff5e\001\002\000\046\014\110\016\102\033\103\051\111" +
    "\064\112\065\101\066\105\067\067\070\064\101\073\102" +
    "\104\104\070\116\077\124\065\125\074\126\106\127\066" +
    "\130\072\001\002\000\046\014\110\016\102\033\103\051" +
    "\111\064\112\065\101\066\105\067\067\070\064\101\073" +
    "\102\104\104\070\116\077\124\065\125\074\126\106\127" +
    "\066\130\072\001\002\000\012\016\170\112\167\113\165" +
    "\114\166\001\002\000\046\014\110\016\102\033\103\051" +
    "\111\064\112\065\101\066\105\067\067\070\064\101\073" +
    "\102\104\104\070\116\077\124\065\125\074\126\106\127" +
    "\066\130\072\001\002\000\046\014\110\016\102\033\103" +
    "\051\111\064\112\065\101\066\105\067\067\070\064\101" +
    "\073\102\104\104\070\116\077\124\065\125\074\126\106" +
    "\127\066\130\072\001\002\000\046\014\110\016\102\033" +
    "\103\051\111\064\112\065\101\066\105\067\067\070\064" +
    "\101\073\102\104\104\070\116\077\124\065\125\074\126" +
    "\106\127\066\130\072\001\002\000\046\014\110\016\102" +
    "\033\103\051\111\064\112\065\101\066\105\067\067\070" +
    "\064\101\073\102\104\104\070\116\077\124\065\125\074" +
    "\126\106\127\066\130\072\001\002\000\046\014\110\016" +
    "\102\033\103\051\111\064\112\065\101\066\105\067\067" +
    "\070\064\101\073\102\104\104\070\116\077\124\065\125" +
    "\074\126\106\127\066\130\072\001\002\000\066\011\uff5c" +
    "\013\uff5c\015\uff5c\017\uff5c\020\uff5c\024\uff5c\025\uff5c\026" +
    "\uff5c\027\uff5c\030\uff5c\031\uff5c\032\uff5c\050\uff5c\077\uff5c" +
    "\100\uff5c\101\uff5c\102\uff5c\103\uff5c\105\uff5c\106\uff5c\115" +
    "\uff5c\116\uff5c\117\uff5c\120\uff5c\121\uff5c\123\uff5c\001\002" +
    "\000\046\014\110\016\102\033\103\051\111\064\112\065" +
    "\101\066\105\067\067\070\064\101\073\102\104\104\070" +
    "\116\077\124\065\125\074\126\106\127\066\130\072\001" +
    "\002\000\066\011\uff8f\013\uff8f\015\uff8f\017\120\020\uff8f" +
    "\024\uff8f\025\uff8f\026\uff8f\027\uff8f\030\uff8f\031\uff8f\032" +
    "\uff8f\050\uff8f\077\uff8f\100\uff8f\101\uff8f\102\uff8f\103\uff8f" +
    "\105\uff8f\106\uff8f\115\uff8f\116\uff8f\117\uff8f\120\uff8f\121" +
    "\uff8f\123\uff8f\001\002\000\046\014\110\016\102\033\103" +
    "\051\111\064\112\065\101\066\105\067\067\070\064\101" +
    "\073\102\104\104\070\116\077\124\065\125\074\126\106" +
    "\127\066\130\072\001\002\000\004\016\153\001\002\000" +
    "\046\014\110\016\102\033\103\051\111\064\112\065\101" +
    "\066\105\067\067\070\064\101\073\102\104\104\070\116" +
    "\077\124\065\125\074\126\106\127\066\130\072\001\002" +
    "\000\046\014\110\016\102\033\103\051\111\064\112\065" +
    "\101\066\105\067\067\070\064\101\073\102\104\104\070" +
    "\116\077\124\065\125\074\126\106\127\066\130\072\001" +
    "\002\000\046\014\110\016\102\033\103\051\111\064\112" +
    "\065\101\066\105\067\067\070\064\101\073\102\104\104" +
    "\070\116\077\124\065\125\074\126\106\127\066\130\072" +
    "\001\002\000\046\014\110\016\102\033\103\051\111\064" +
    "\112\065\101\066\105\067\067\070\064\101\073\102\104" +
    "\104\070\116\077\124\065\125\074\126\106\127\066\130" +
    "\072\001\002\000\066\011\uffb0\013\uffb0\015\uffb0\017\116" +
    "\020\uffb0\024\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031" +
    "\uffb0\032\uffb0\050\uffb0\077\uffb0\100\uffb0\101\125\102\136" +
    "\103\130\105\uffb0\106\uffb0\115\143\116\126\117\135\120" +
    "\131\121\uffb0\123\141\001\002\000\066\011\uffb5\013\uffb5" +
    "\015\uffb5\017\116\020\uffb5\024\uffb5\025\144\026\134\027" +
    "\146\030\127\031\122\032\132\050\142\077\uffb5\100\uffb5" +
    "\101\125\102\136\103\130\105\uffb5\106\uffb5\115\143\116" +
    "\126\117\135\120\131\121\137\123\141\001\002\000\066" +
    "\011\uffb2\013\uffb2\015\uffb2\017\116\020\uffb2\024\uffb2\025" +
    "\uffb2\026\uffb2\027\146\030\127\031\122\032\132\050\142" +
    "\077\uffb2\100\uffb2\101\125\102\136\103\130\105\uffb2\106" +
    "\uffb2\115\143\116\126\117\135\120\131\121\uffb2\123\141" +
    "\001\002\000\066\011\uffac\013\uffac\015\uffac\017\116\020" +
    "\uffac\024\uffac\025\uffac\026\uffac\027\uffac\030\uffac\031\uffac" +
    "\032\uffac\050\uffac\077\uffac\100\uffac\101\125\102\136\103" +
    "\130\105\uffac\106\uffac\115\uffac\116\uffac\117\135\120\131" +
    "\121\uffac\123\141\001\002\000\066\011\uffa2\013\uffa2\015" +
    "\uffa2\017\uffa2\020\uffa2\024\uffa2\025\uffa2\026\uffa2\027\uffa2" +
    "\030\uffa2\031\uffa2\032\uffa2\050\uffa2\077\uffa2\100\uffa2\101" +
    "\uffa2\102\uffa2\103\uffa2\105\uffa2\106\uffa2\115\uffa2\116\uffa2" +
    "\117\uffa2\120\uffa2\121\uffa2\123\uffa2\001\002\000\066\011" +
    "\uffa7\013\uffa7\015\uffa7\017\116\020\uffa7\024\uffa7\025\uffa7" +
    "\026\uffa7\027\uffa7\030\uffa7\031\uffa7\032\uffa7\050\uffa7\077" +
    "\uffa7\100\uffa7\101\125\102\136\103\130\105\uffa7\106\uffa7" +
    "\115\uffa7\116\uffa7\117\uffa7\120\uffa7\121\uffa7\123\uffa7\001" +
    "\002\000\066\011\uffaa\013\uffaa\015\uffaa\017\116\020\uffaa" +
    "\024\uffaa\025\144\026\134\027\146\030\127\031\122\032" +
    "\132\050\142\077\uffaa\100\uffaa\101\125\102\136\103\130" +
    "\105\uffaa\106\uffaa\115\143\116\126\117\135\120\131\121" +
    "\uffaa\123\141\001\002\000\066\011\uffa9\013\uffa9\015\uffa9" +
    "\017\116\020\uffa9\024\uffa9\025\uffa9\026\uffa9\027\uffa9\030" +
    "\uffa9\031\uffa9\032\uffa9\050\uffa9\077\uffa9\100\uffa9\101\125" +
    "\102\136\103\130\105\uffa9\106\uffa9\115\uffa9\116\uffa9\117" +
    "\uffa9\120\uffa9\121\uffa9\123\uffa9\001\002\000\066\011\uffb1" +
    "\013\uffb1\015\uffb1\017\116\020\uffb1\024\uffb1\025\uffb1\026" +
    "\uffb1\027\146\030\127\031\122\032\132\050\142\077\uffb1" +
    "\100\uffb1\101\125\102\136\103\130\105\uffb1\106\uffb1\115" +
    "\143\116\126\117\135\120\131\121\uffb1\123\141\001\002" +
    "\000\054\017\116\025\144\026\134\027\146\030\127\031" +
    "\122\032\132\050\142\077\133\100\161\101\125\102\136" +
    "\103\130\105\145\106\123\115\143\116\126\117\135\120" +
    "\131\121\137\123\141\001\002\000\046\014\110\016\102" +
    "\033\103\051\111\064\112\065\101\066\105\067\067\070" +
    "\064\101\073\102\104\104\070\116\077\124\065\125\074" +
    "\126\106\127\066\130\072\001\002\000\066\011\uff5a\013" +
    "\uff5a\015\uff5a\017\116\020\uff5a\024\uff5a\025\144\026\134" +
    "\027\146\030\127\031\122\032\132\050\142\077\133\100" +
    "\uff5a\101\125\102\136\103\130\105\145\106\123\115\143" +
    "\116\126\117\135\120\131\121\137\123\141\001\002\000" +
    "\066\011\uffaf\013\uffaf\015\uffaf\017\116\020\uffaf\024\uffaf" +
    "\025\uffaf\026\uffaf\027\uffaf\030\uffaf\031\uffaf\032\uffaf\050" +
    "\uffaf\077\uffaf\100\uffaf\101\125\102\136\103\130\105\uffaf" +
    "\106\uffaf\115\143\116\126\117\135\120\131\121\uffaf\123" +
    "\141\001\002\000\066\011\uffa8\013\uffa8\015\uffa8\017\116" +
    "\020\uffa8\024\uffa8\025\uffa8\026\uffa8\027\uffa8\030\uffa8\031" +
    "\uffa8\032\uffa8\050\uffa8\077\uffa8\100\uffa8\101\125\102\136" +
    "\103\130\105\uffa8\106\uffa8\115\uffa8\116\uffa8\117\uffa8\120" +
    "\uffa8\121\uffa8\123\uffa8\001\002\000\004\014\204\001\002" +
    "\000\004\014\202\001\002\000\004\014\200\001\002\000" +
    "\070\011\uff9e\013\uff9e\014\171\015\uff9e\017\uff9e\020\uff9e" +
    "\024\uff9e\025\uff9e\026\uff9e\027\uff9e\030\uff9e\031\uff9e\032" +
    "\uff9e\050\uff9e\077\uff9e\100\uff9e\101\uff9e\102\uff9e\103\uff9e" +
    "\105\uff9e\106\uff9e\115\uff9e\116\uff9e\117\uff9e\120\uff9e\121" +
    "\uff9e\123\uff9e\001\002\000\050\014\110\015\uff87\016\102" +
    "\033\103\051\111\064\112\065\101\066\105\067\067\070" +
    "\064\101\073\102\104\104\070\116\077\124\065\125\074" +
    "\126\106\127\066\130\072\001\002\000\004\015\177\001" +
    "\002\000\056\015\uff85\017\116\024\uff85\025\144\026\134" +
    "\027\146\030\127\031\122\032\132\050\142\077\133\101" +
    "\125\102\136\103\130\105\145\106\123\115\143\116\126" +
    "\117\135\120\131\121\137\123\141\001\002\000\006\015" +
    "\uff88\024\175\001\002\000\046\014\110\016\102\033\103" +
    "\051\111\064\112\065\101\066\105\067\067\070\064\101" +
    "\073\102\104\104\070\116\077\124\065\125\074\126\106" +
    "\127\066\130\072\001\002\000\056\015\uff86\017\116\024" +
    "\uff86\025\144\026\134\027\146\030\127\031\122\032\132" +
    "\050\142\077\133\101\125\102\136\103\130\105\145\106" +
    "\123\115\143\116\126\117\135\120\131\121\137\123\141" +
    "\001\002\000\066\011\uff8b\013\uff8b\015\uff8b\017\uff8b\020" +
    "\uff8b\024\uff8b\025\uff8b\026\uff8b\027\uff8b\030\uff8b\031\uff8b" +
    "\032\uff8b\050\uff8b\077\uff8b\100\uff8b\101\uff8b\102\uff8b\103" +
    "\uff8b\105\uff8b\106\uff8b\115\uff8b\116\uff8b\117\uff8b\120\uff8b" +
    "\121\uff8b\123\uff8b\001\002\000\004\015\201\001\002\000" +
    "\066\011\uffa0\013\uffa0\015\uffa0\017\uffa0\020\uffa0\024\uffa0" +
    "\025\uffa0\026\uffa0\027\uffa0\030\uffa0\031\uffa0\032\uffa0\050" +
    "\uffa0\077\uffa0\100\uffa0\101\uffa0\102\uffa0\103\uffa0\105\uffa0" +
    "\106\uffa0\115\uffa0\116\uffa0\117\uffa0\120\uffa0\121\uffa0\123" +
    "\uffa0\001\002\000\004\015\203\001\002\000\066\011\uff9d" +
    "\013\uff9d\015\uff9d\017\uff9d\020\uff9d\024\uff9d\025\uff9d\026" +
    "\uff9d\027\uff9d\030\uff9d\031\uff9d\032\uff9d\050\uff9d\077\uff9d" +
    "\100\uff9d\101\uff9d\102\uff9d\103\uff9d\105\uff9d\106\uff9d\115" +
    "\uff9d\116\uff9d\117\uff9d\120\uff9d\121\uff9d\123\uff9d\001\002" +
    "\000\004\015\205\001\002\000\066\011\uff9f\013\uff9f\015" +
    "\uff9f\017\uff9f\020\uff9f\024\uff9f\025\uff9f\026\uff9f\027\uff9f" +
    "\030\uff9f\031\uff9f\032\uff9f\050\uff9f\077\uff9f\100\uff9f\101" +
    "\uff9f\102\uff9f\103\uff9f\105\uff9f\106\uff9f\115\uff9f\116\uff9f" +
    "\117\uff9f\120\uff9f\121\uff9f\123\uff9f\001\002\000\066\011" +
    "\uffae\013\uffae\015\uffae\017\116\020\uffae\024\uffae\025\uffae" +
    "\026\uffae\027\uffae\030\uffae\031\uffae\032\uffae\050\uffae\077" +
    "\uffae\100\uffae\101\125\102\136\103\130\105\uffae\106\uffae" +
    "\115\143\116\126\117\135\120\131\121\uffae\123\141\001" +
    "\002\000\066\011\uffab\013\uffab\015\uffab\017\116\020\uffab" +
    "\024\uffab\025\uffab\026\uffab\027\uffab\030\uffab\031\uffab\032" +
    "\uffab\050\uffab\077\uffab\100\uffab\101\125\102\136\103\130" +
    "\105\uffab\106\uffab\115\uffab\116\uffab\117\135\120\131\121" +
    "\uffab\123\141\001\002\000\066\011\uffb4\013\uffb4\015\uffb4" +
    "\017\116\020\uffb4\024\uffb4\025\144\026\134\027\146\030" +
    "\127\031\122\032\132\050\142\077\uffb4\100\uffb4\101\125" +
    "\102\136\103\130\105\145\106\uffb4\115\143\116\126\117" +
    "\135\120\131\121\137\123\141\001\002\000\066\011\uffad" +
    "\013\uffad\015\uffad\017\116\020\uffad\024\uffad\025\uffad\026" +
    "\uffad\027\uffad\030\uffad\031\uffad\032\uffad\050\uffad\077\uffad" +
    "\100\uffad\101\125\102\136\103\130\105\uffad\106\uffad\115" +
    "\143\116\126\117\135\120\131\121\uffad\123\141\001\002" +
    "\000\054\017\116\020\213\025\144\026\134\027\146\030" +
    "\127\031\122\032\132\050\142\077\133\101\125\102\136" +
    "\103\130\105\145\106\123\115\143\116\126\117\135\120" +
    "\131\121\137\123\141\001\002\000\070\011\uff64\013\uff64" +
    "\015\uff64\017\uff64\020\uff64\021\uff64\024\uff64\025\uff64\026" +
    "\uff64\027\uff64\030\uff64\031\uff64\032\uff64\050\uff64\077\uff64" +
    "\100\uff64\101\uff64\102\uff64\103\uff64\105\uff64\106\uff64\115" +
    "\uff64\116\uff64\117\uff64\120\uff64\121\uff64\123\uff64\001\002" +
    "\000\066\011\uff94\013\uff94\015\uff94\017\120\020\uff94\024" +
    "\uff94\025\uff94\026\uff94\027\uff94\030\uff94\031\uff94\032\uff94" +
    "\050\uff94\077\uff94\100\uff94\101\uff94\102\uff94\103\uff94\105" +
    "\uff94\106\uff94\115\uff94\116\uff94\117\uff94\120\uff94\121\uff94" +
    "\123\uff94\001\002\000\006\015\216\017\116\001\002\000" +
    "\066\011\uff92\013\uff92\015\uff92\017\uff92\020\uff92\024\uff92" +
    "\025\uff92\026\uff92\027\uff92\030\uff92\031\uff92\032\uff92\050" +
    "\uff92\077\uff92\100\uff92\101\uff92\102\uff92\103\uff92\105\uff92" +
    "\106\uff92\115\uff92\116\uff92\117\uff92\120\uff92\121\uff92\123" +
    "\uff92\001\002\000\006\015\220\017\120\001\002\000\066" +
    "\011\uff91\013\uff91\015\uff91\017\uff91\020\uff91\024\uff91\025" +
    "\uff91\026\uff91\027\uff91\030\uff91\031\uff91\032\uff91\050\uff91" +
    "\077\uff91\100\uff91\101\uff91\102\uff91\103\uff91\105\uff91\106" +
    "\uff91\115\uff91\116\uff91\117\uff91\120\uff91\121\uff91\123\uff91" +
    "\001\002\000\004\015\232\001\002\000\054\015\231\017" +
    "\116\025\144\026\134\027\146\030\127\031\122\032\132" +
    "\050\142\077\133\101\125\102\136\103\130\105\145\106" +
    "\123\115\143\116\126\117\135\120\131\121\137\123\141" +
    "\001\002\000\056\014\224\015\225\017\uff95\025\uff95\026" +
    "\uff95\027\uff95\030\uff95\031\uff95\032\uff95\050\uff95\077\uff95" +
    "\101\uff95\102\uff95\103\uff95\105\uff95\106\uff95\115\uff95\116" +
    "\uff95\117\uff95\120\uff95\121\uff95\123\uff95\001\002\000\050" +
    "\014\110\015\uff87\016\102\033\103\051\111\064\112\065" +
    "\101\066\105\067\067\070\064\101\073\102\104\104\070" +
    "\116\077\124\065\125\074\126\106\127\066\130\072\001" +
    "\002\000\046\014\110\016\102\033\103\051\111\064\112" +
    "\065\101\066\105\067\067\070\064\101\073\102\104\104" +
    "\070\116\077\124\065\125\074\126\106\127\066\130\072" +
    "\001\002\000\066\011\uff9b\013\uff9b\015\uff9b\017\116\020" +
    "\uff9b\024\uff9b\025\uff9b\026\uff9b\027\uff9b\030\uff9b\031\uff9b" +
    "\032\uff9b\050\uff9b\077\uff9b\100\uff9b\101\uff9b\102\uff9b\103" +
    "\130\105\uff9b\106\uff9b\115\uff9b\116\uff9b\117\uff9b\120\uff9b" +
    "\121\uff9b\123\uff9b\001\002\000\004\015\230\001\002\000" +
    "\066\011\uff8a\013\uff8a\015\uff8a\017\uff8a\020\uff8a\024\uff8a" +
    "\025\uff8a\026\uff8a\027\uff8a\030\uff8a\031\uff8a\032\uff8a\050" +
    "\uff8a\077\uff8a\100\uff8a\101\uff8a\102\uff8a\103\uff8a\105\uff8a" +
    "\106\uff8a\115\uff8a\116\uff8a\117\uff8a\120\uff8a\121\uff8a\123" +
    "\uff8a\001\002\000\066\011\uff90\013\uff90\015\uff90\017\uff90" +
    "\020\uff90\024\uff90\025\uff90\026\uff90\027\uff90\030\uff90\031" +
    "\uff90\032\uff90\050\uff90\077\uff90\100\uff90\101\uff90\102\uff90" +
    "\103\uff90\105\uff90\106\uff90\115\uff90\116\uff90\117\uff90\120" +
    "\uff90\121\uff90\123\uff90\001\002\000\046\014\110\016\102" +
    "\033\103\051\111\064\112\065\101\066\105\067\067\070" +
    "\064\101\073\102\104\104\070\116\077\124\065\125\074" +
    "\126\106\127\066\130\072\001\002\000\066\011\uff9c\013" +
    "\uff9c\015\uff9c\017\116\020\uff9c\024\uff9c\025\uff9c\026\uff9c" +
    "\027\uff9c\030\uff9c\031\uff9c\032\uff9c\050\uff9c\077\uff9c\100" +
    "\uff9c\101\uff9c\102\uff9c\103\130\105\uff9c\106\uff9c\115\uff9c" +
    "\116\uff9c\117\uff9c\120\uff9c\121\uff9c\123\uff9c\001\002\000" +
    "\046\014\110\016\102\033\103\051\111\064\112\065\101" +
    "\066\105\067\067\070\064\101\073\102\104\104\070\116" +
    "\077\124\065\125\074\126\106\127\066\130\072\001\002" +
    "\000\054\015\236\017\116\025\144\026\134\027\146\030" +
    "\127\031\122\032\132\050\142\077\133\101\125\102\136" +
    "\103\130\105\145\106\123\115\143\116\126\117\135\120" +
    "\131\121\137\123\141\001\002\000\066\011\uffdc\013\uffdc" +
    "\015\uffdc\017\uffdc\020\uffdc\024\uffdc\025\uffdc\026\uffdc\027" +
    "\uffdc\030\uffdc\031\uffdc\032\uffdc\050\uffdc\077\uffdc\100\uffdc" +
    "\101\uffdc\102\uffdc\103\uffdc\105\uffdc\106\uffdc\115\uffdc\116" +
    "\uffdc\117\uffdc\120\uffdc\121\uffdc\123\uffdc\001\002\000\062" +
    "\011\uff5b\013\uff5b\015\uff5b\017\116\020\uff5b\024\uff5b\025" +
    "\uff5b\026\uff5b\027\uff5b\030\uff5b\031\uff5b\032\uff5b\050\uff5b" +
    "\077\uff5b\100\uff5b\103\130\105\uff5b\106\uff5b\115\uff5b\116" +
    "\uff5b\117\uff5b\120\uff5b\121\uff5b\123\uff5b\001\002\000\046" +
    "\014\110\016\102\033\103\051\111\064\112\065\101\066" +
    "\105\067\067\070\064\101\073\102\104\104\070\116\077" +
    "\124\065\125\074\126\106\127\066\130\072\001\002\000" +
    "\054\017\116\024\242\025\144\026\134\027\146\030\127" +
    "\031\122\032\132\050\142\077\133\101\125\102\136\103" +
    "\130\105\145\106\123\115\143\116\126\117\135\120\131" +
    "\121\137\123\141\001\002\000\046\014\110\016\102\033" +
    "\103\051\111\064\112\065\101\066\105\067\067\070\064" +
    "\101\073\102\104\104\070\116\077\124\065\125\074\126" +
    "\106\127\066\130\072\001\002\000\054\015\244\017\116" +
    "\025\144\026\134\027\146\030\127\031\122\032\132\050" +
    "\142\077\133\101\125\102\136\103\130\105\145\106\123" +
    "\115\143\116\126\117\135\120\131\121\137\123\141\001" +
    "\002\000\066\011\uffa3\013\uffa3\015\uffa3\017\uffa3\020\uffa3" +
    "\024\uffa3\025\uffa3\026\uffa3\027\uffa3\030\uffa3\031\uffa3\032" +
    "\uffa3\050\uffa3\077\uffa3\100\uffa3\101\uffa3\102\uffa3\103\uffa3" +
    "\105\uffa3\106\uffa3\115\uffa3\116\uffa3\117\uffa3\120\uffa3\121" +
    "\uffa3\123\uffa3\001\002\000\046\014\110\016\102\033\103" +
    "\051\111\064\112\065\101\066\105\067\067\070\064\101" +
    "\073\102\104\104\070\116\077\124\065\125\074\126\106" +
    "\127\066\130\072\001\002\000\054\015\247\017\116\025" +
    "\144\026\134\027\146\030\127\031\122\032\132\050\142" +
    "\077\133\101\125\102\136\103\130\105\145\106\123\115" +
    "\143\116\126\117\135\120\131\121\137\123\141\001\002" +
    "\000\066\011\uffdb\013\uffdb\015\uffdb\017\uffdb\020\uffdb\024" +
    "\uffdb\025\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb" +
    "\050\uffdb\077\uffdb\100\uffdb\101\uffdb\102\uffdb\103\uffdb\105" +
    "\uffdb\106\uffdb\115\uffdb\116\uffdb\117\uffdb\120\uffdb\121\uffdb" +
    "\123\uffdb\001\002\000\066\011\uffa5\013\uffa5\015\uffa5\017" +
    "\116\020\uffa5\024\uffa5\025\uffa5\026\uffa5\027\uffa5\030\uffa5" +
    "\031\uffa5\032\uffa5\050\uffa5\077\uffa5\100\uffa5\101\125\102" +
    "\136\103\130\105\uffa5\106\uffa5\115\uffa5\116\uffa5\117\135" +
    "\120\131\121\uffa5\123\141\001\002\000\062\011\uff5d\013" +
    "\uff5d\015\uff5d\017\116\020\uff5d\024\uff5d\025\uff5d\026\uff5d" +
    "\027\uff5d\030\uff5d\031\uff5d\032\uff5d\050\uff5d\077\uff5d\100" +
    "\uff5d\103\130\105\uff5d\106\uff5d\115\uff5d\116\uff5d\117\uff5d" +
    "\120\uff5d\121\uff5d\123\uff5d\001\002\000\062\011\uffb3\013" +
    "\uffb3\015\uffb3\017\116\020\uffb3\024\uffb3\025\uffb3\026\uffb3" +
    "\027\uffb3\030\uffb3\031\uffb3\032\uffb3\050\uffb3\077\uffb3\100" +
    "\uffb3\103\130\105\uffb3\106\uffb3\115\uffb3\116\uffb3\117\uffb3" +
    "\120\uffb3\121\uffb3\123\uffb3\001\002\000\046\014\110\016" +
    "\102\033\103\051\111\064\112\065\101\066\105\067\067" +
    "\070\064\101\073\102\104\104\070\116\077\124\065\125" +
    "\074\126\106\127\066\130\072\001\002\000\054\015\255" +
    "\017\116\025\144\026\134\027\146\030\127\031\122\032" +
    "\132\050\142\077\133\101\125\102\136\103\130\105\145" +
    "\106\123\115\143\116\126\117\135\120\131\121\137\123" +
    "\141\001\002\000\066\011\uffda\013\uffda\015\uffda\017\uffda" +
    "\020\uffda\024\uffda\025\uffda\026\uffda\027\uffda\030\uffda\031" +
    "\uffda\032\uffda\050\uffda\077\uffda\100\uffda\101\uffda\102\uffda" +
    "\103\uffda\105\uffda\106\uffda\115\uffda\116\uffda\117\uffda\120" +
    "\uffda\121\uffda\123\uffda\001\002\000\046\014\110\016\102" +
    "\033\103\051\111\064\112\065\101\066\105\067\067\070" +
    "\064\101\073\102\104\104\070\116\077\124\065\125\074" +
    "\126\106\127\066\130\072\001\002\000\054\015\260\017" +
    "\116\025\144\026\134\027\146\030\127\031\122\032\132" +
    "\050\142\077\133\101\125\102\136\103\130\105\145\106" +
    "\123\115\143\116\126\117\135\120\131\121\137\123\141" +
    "\001\002\000\066\011\uffdd\013\uffdd\015\uffdd\017\uffdd\020" +
    "\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd" +
    "\032\uffdd\050\uffdd\077\uffdd\100\uffdd\101\uffdd\102\uffdd\103" +
    "\uffdd\105\uffdd\106\uffdd\115\uffdd\116\uffdd\117\uffdd\120\uffdd" +
    "\121\uffdd\123\uffdd\001\002\000\014\011\uffb6\015\uffb6\017" +
    "\uffb6\021\uffb6\024\uffb6\001\002\000\004\016\uffb8\001\002" +
    "\000\006\015\uff79\024\uff79\001\002\000\006\015\277\024" +
    "\276\001\002\000\004\016\274\001\002\000\016\004\035" +
    "\005\040\006\036\007\032\010\043\016\262\001\002\000" +
    "\004\016\270\001\002\000\010\015\uff76\017\061\024\uff76" +
    "\001\002\000\010\015\uff74\017\272\024\uff74\001\002\000" +
    "\004\020\273\001\002\000\014\011\uffb7\015\uffb7\017\uffb7" +
    "\021\uffb7\024\uffb7\001\002\000\010\015\uff77\017\061\024" +
    "\uff77\001\002\000\010\015\uff75\017\272\024\uff75\001\002" +
    "\000\020\004\035\005\040\006\036\007\032\010\043\016" +
    "\262\045\266\001\002\000\006\011\uff80\012\uff80\001\002" +
    "\000\006\015\uff7a\024\uff7a\001\002\000\050\012\304\014" +
    "\110\016\102\033\103\051\111\064\112\065\101\066\105" +
    "\067\067\070\064\101\073\102\104\104\070\116\077\124" +
    "\065\125\074\126\106\127\066\130\072\001\002\000\006" +
    "\011\uffba\024\uffba\001\002\000\056\011\uffbb\017\116\024" +
    "\uffbb\025\144\026\134\027\146\030\127\031\122\032\132" +
    "\050\142\077\133\101\125\102\136\103\130\105\145\106" +
    "\123\115\143\116\126\117\135\120\131\121\137\123\141" +
    "\001\002\000\050\012\304\014\110\016\102\033\103\051" +
    "\111\064\112\065\101\066\105\067\067\070\064\101\073" +
    "\102\104\104\070\116\077\124\065\125\074\126\106\127" +
    "\066\130\072\001\002\000\006\013\311\024\312\001\002" +
    "\000\006\013\uff5f\024\uff5f\001\002\000\006\013\uff61\024" +
    "\uff61\001\002\000\056\013\uff60\017\116\024\uff60\025\144" +
    "\026\134\027\146\030\127\031\122\032\132\050\142\077" +
    "\133\101\125\102\136\103\130\105\145\106\123\115\143" +
    "\116\126\117\135\120\131\121\137\123\141\001\002\000" +
    "\010\011\uff63\013\uff63\024\uff63\001\002\000\050\012\304" +
    "\014\110\016\102\033\103\051\111\064\112\065\101\066" +
    "\105\067\067\070\064\101\073\102\104\104\070\116\077" +
    "\124\065\125\074\126\106\127\066\130\072\001\002\000" +
    "\006\013\uff62\024\uff62\001\002\000\004\016\316\001\002" +
    "\000\006\011\uffc0\024\uffc0\001\002\000\012\011\uffbe\017" +
    "\061\021\062\024\uffbe\001\002\000\024\004\035\005\040" +
    "\006\036\007\032\010\043\015\uff78\016\262\024\uff78\045" +
    "\266\001\002\000\006\015\321\024\276\001\002\000\006" +
    "\011\uff7e\012\uff7e\001\002\000\034\004\035\005\040\006" +
    "\036\007\032\010\043\016\045\034\033\036\012\045\014" +
    "\052\004\053\006\054\010\061\013\001\002\000\004\016" +
    "\330\001\002\000\034\004\035\005\040\006\036\007\032" +
    "\010\043\016\052\034\033\036\012\045\014\052\004\053" +
    "\006\054\010\061\013\001\002\000\040\004\ufff5\005\ufff5" +
    "\006\ufff5\007\ufff5\010\ufff5\013\ufff5\016\ufff5\034\ufff5\036" +
    "\ufff5\045\ufff5\052\ufff5\053\ufff5\054\ufff5\056\ufff5\061\ufff5" +
    "\001\002\000\004\016\327\001\002\000\004\014\060\001" +
    "\002\000\004\014\331\001\002\000\024\004\035\005\040" +
    "\006\036\007\032\010\043\015\uff78\016\262\024\uff78\045" +
    "\266\001\002\000\006\015\333\024\276\001\002\000\006" +
    "\011\uff7f\012\uff7f\001\002\000\006\011\uff6e\024\314\001" +
    "\002\000\014\011\uffbe\014\331\017\061\021\062\024\uffbe" +
    "\001\002\000\024\004\035\005\040\006\036\007\032\010" +
    "\043\015\uff78\016\262\024\uff78\045\266\001\002\000\006" +
    "\015\340\024\276\001\002\000\006\011\uff7d\012\uff7d\001" +
    "\002\000\040\004\uff81\005\uff81\006\uff81\007\uff81\010\uff81" +
    "\013\uff81\016\uff81\034\uff81\036\uff81\045\uff81\052\uff81\053" +
    "\uff81\054\uff81\056\uff81\061\uff81\001\002\000\040\004\uff82" +
    "\005\uff82\006\uff82\007\uff82\010\uff82\013\uff82\016\uff82\034" +
    "\uff82\036\uff82\045\uff82\052\uff82\053\uff82\054\uff82\056\uff82" +
    "\061\uff82\001\002\000\112\004\035\005\040\006\036\007" +
    "\032\010\043\012\343\013\355\014\110\016\372\022\u0103" +
    "\023\373\033\103\043\376\051\111\055\u0105\063\353\064" +
    "\112\065\101\066\105\067\067\070\064\073\357\074\365" +
    "\075\346\076\344\101\073\102\104\104\070\107\356\116" +
    "\077\122\350\124\065\125\074\126\106\127\066\130\072" +
    "\001\002\000\004\011\u0160\001\002\000\054\011\u015f\017" +
    "\uffa4\025\uffa4\026\uffa4\027\uffa4\030\uffa4\031\uffa4\032\uffa4" +
    "\050\uffa4\077\uffa4\101\uffa4\102\uffa4\103\uffa4\105\uffa4\106" +
    "\uffa4\115\uffa4\116\uffa4\117\uffa4\120\uffa4\121\uffa4\123\uffa4" +
    "\001\002\000\004\011\u015e\001\002\000\004\016\316\001" +
    "\002\000\004\014\u015b\001\002\000\112\004\035\005\040" +
    "\006\036\007\032\010\043\012\343\013\u015a\014\110\016" +
    "\372\022\u0103\023\373\033\103\043\376\051\111\055\u0105" +
    "\063\353\064\112\065\101\066\105\067\067\070\064\073" +
    "\357\074\365\075\346\076\344\101\073\102\104\104\070" +
    "\107\356\116\077\122\350\124\065\125\074\126\106\127" +
    "\066\130\072\001\002\000\116\004\uffe6\005\uffe6\006\uffe6" +
    "\007\uffe6\010\uffe6\012\uffe6\013\uffe6\014\uffe6\016\uffe6\022" +
    "\uffe6\023\uffe6\033\uffe6\037\uffe6\042\uffe6\043\uffe6\051\uffe6" +
    "\055\uffe6\063\uffe6\064\uffe6\065\uffe6\066\uffe6\067\uffe6\070" +
    "\uffe6\073\uffe6\074\uffe6\075\uffe6\076\uffe6\101\uffe6\102\uffe6" +
    "\104\uffe6\107\uffe6\116\uffe6\122\uffe6\124\uffe6\125\uffe6\126" +
    "\uffe6\127\uffe6\130\uffe6\001\002\000\004\014\u0148\001\002" +
    "\000\116\004\uffe8\005\uffe8\006\uffe8\007\uffe8\010\uffe8\012" +
    "\uffe8\013\uffe8\014\uffe8\016\uffe8\022\uffe8\023\uffe8\033\uffe8" +
    "\037\uffe8\042\uffe8\043\uffe8\051\uffe8\055\uffe8\063\uffe8\064" +
    "\uffe8\065\uffe8\066\uffe8\067\uffe8\070\uffe8\073\uffe8\074\uffe8" +
    "\075\uffe8\076\uffe8\101\uffe8\102\uffe8\104\uffe8\107\uffe8\116" +
    "\uffe8\122\uffe8\124\uffe8\125\uffe8\126\uffe8\127\uffe8\130\uffe8" +
    "\001\002\000\140\004\ufff2\005\ufff2\006\ufff2\007\ufff2\010" +
    "\ufff2\012\ufff2\013\ufff2\014\ufff2\016\ufff2\022\ufff2\023\ufff2" +
    "\033\ufff2\034\ufff2\036\ufff2\037\ufff2\042\ufff2\043\ufff2\045" +
    "\ufff2\051\ufff2\052\ufff2\053\ufff2\054\ufff2\055\ufff2\056\ufff2" +
    "\061\ufff2\063\ufff2\064\ufff2\065\ufff2\066\ufff2\067\ufff2\070" +
    "\ufff2\073\ufff2\074\ufff2\075\ufff2\076\ufff2\101\ufff2\102\ufff2" +
    "\104\ufff2\107\ufff2\111\ufff2\116\ufff2\122\ufff2\124\ufff2\125" +
    "\ufff2\126\ufff2\127\ufff2\130\ufff2\001\002\000\004\014\u0140" +
    "\001\002\000\004\014\u013c\001\002\000\116\004\uffe5\005" +
    "\uffe5\006\uffe5\007\uffe5\010\uffe5\012\uffe5\013\uffe5\014\uffe5" +
    "\016\uffe5\022\uffe5\023\uffe5\033\uffe5\037\uffe5\042\uffe5\043" +
    "\uffe5\051\uffe5\055\uffe5\063\uffe5\064\uffe5\065\uffe5\066\uffe5" +
    "\067\uffe5\070\uffe5\073\uffe5\074\uffe5\075\uffe5\076\uffe5\101" +
    "\uffe5\102\uffe5\104\uffe5\107\uffe5\116\uffe5\122\uffe5\124\uffe5" +
    "\125\uffe5\126\uffe5\127\uffe5\130\uffe5\001\002\000\052\017" +
    "\116\025\144\026\134\027\146\030\127\031\122\032\132" +
    "\050\142\077\133\101\125\102\136\103\130\105\145\106" +
    "\123\115\143\116\126\117\135\120\131\121\137\123\141" +
    "\001\002\000\116\004\uffdf\005\uffdf\006\uffdf\007\uffdf\010" +
    "\uffdf\012\uffdf\013\uffdf\014\uffdf\016\uffdf\022\uffdf\023\uffdf" +
    "\033\uffdf\037\uffdf\042\uffdf\043\uffdf\051\uffdf\055\uffdf\063" +
    "\uffdf\064\uffdf\065\uffdf\066\uffdf\067\uffdf\070\uffdf\073\uffdf" +
    "\074\uffdf\075\uffdf\076\uffdf\101\uffdf\102\uffdf\104\uffdf\107" +
    "\uffdf\116\uffdf\122\uffdf\124\uffdf\125\uffdf\126\uffdf\127\uffdf" +
    "\130\uffdf\001\002\000\116\004\uffeb\005\uffeb\006\uffeb\007" +
    "\uffeb\010\uffeb\012\uffeb\013\uffeb\014\uffeb\016\uffeb\022\uffeb" +
    "\023\uffeb\033\uffeb\037\uffeb\042\uffeb\043\uffeb\051\uffeb\055" +
    "\uffeb\063\uffeb\064\uffeb\065\uffeb\066\uffeb\067\uffeb\070\uffeb" +
    "\073\uffeb\074\uffeb\075\uffeb\076\uffeb\101\uffeb\102\uffeb\104" +
    "\uffeb\107\uffeb\116\uffeb\122\uffeb\124\uffeb\125\uffeb\126\uffeb" +
    "\127\uffeb\130\uffeb\001\002\000\004\011\u013b\001\002\000" +
    "\004\014\u0122\001\002\000\054\011\u0121\017\uffa1\025\uffa1" +
    "\026\uffa1\027\uffa1\030\uffa1\031\uffa1\032\uffa1\050\uffa1\077" +
    "\uffa1\101\uffa1\102\uffa1\103\uffa1\105\uffa1\106\uffa1\115\uffa1" +
    "\116\uffa1\117\uffa1\120\uffa1\121\uffa1\123\uffa1\001\002\000" +
    "\116\004\uffe7\005\uffe7\006\uffe7\007\uffe7\010\uffe7\012\uffe7" +
    "\013\uffe7\014\uffe7\016\uffe7\022\uffe7\023\uffe7\033\uffe7\037" +
    "\uffe7\042\uffe7\043\uffe7\051\uffe7\055\uffe7\063\uffe7\064\uffe7" +
    "\065\uffe7\066\uffe7\067\uffe7\070\uffe7\073\uffe7\074\uffe7\075" +
    "\uffe7\076\uffe7\101\uffe7\102\uffe7\104\uffe7\107\uffe7\116\uffe7" +
    "\122\uffe7\124\uffe7\125\uffe7\126\uffe7\127\uffe7\130\uffe7\001" +
    "\002\000\116\004\uffe0\005\uffe0\006\uffe0\007\uffe0\010\uffe0" +
    "\012\uffe0\013\uffe0\014\uffe0\016\uffe0\022\uffe0\023\uffe0\033" +
    "\uffe0\037\uffe0\042\uffe0\043\uffe0\051\uffe0\055\uffe0\063\uffe0" +
    "\064\uffe0\065\uffe0\066\uffe0\067\uffe0\070\uffe0\073\uffe0\074" +
    "\uffe0\075\uffe0\076\uffe0\101\uffe0\102\uffe0\104\uffe0\107\uffe0" +
    "\116\uffe0\122\uffe0\124\uffe0\125\uffe0\126\uffe0\127\uffe0\130" +
    "\uffe0\001\002\000\004\011\u0120\001\002\000\060\014\224" +
    "\016\uffb8\017\116\021\u011b\025\uff95\026\uff95\027\uff95\030" +
    "\uff95\031\uff95\032\uff95\050\uff95\077\uff95\101\uff95\102\uff95" +
    "\103\uff95\105\uff95\106\uff95\115\uff95\116\uff95\117\uff95\120" +
    "\uff95\121\uff95\123\uff95\001\002\000\004\014\u0117\001\002" +
    "\000\116\004\uffe1\005\uffe1\006\uffe1\007\uffe1\010\uffe1\012" +
    "\uffe1\013\uffe1\014\uffe1\016\uffe1\022\uffe1\023\uffe1\033\uffe1" +
    "\037\uffe1\042\uffe1\043\uffe1\051\uffe1\055\uffe1\063\uffe1\064" +
    "\uffe1\065\uffe1\066\uffe1\067\uffe1\070\uffe1\073\uffe1\074\uffe1" +
    "\075\uffe1\076\uffe1\101\uffe1\102\uffe1\104\uffe1\107\uffe1\116" +
    "\uffe1\122\uffe1\124\uffe1\125\uffe1\126\uffe1\127\uffe1\130\uffe1" +
    "\001\002\000\116\004\uffe9\005\uffe9\006\uffe9\007\uffe9\010" +
    "\uffe9\012\uffe9\013\uffe9\014\uffe9\016\uffe9\022\uffe9\023\uffe9" +
    "\033\uffe9\037\uffe9\042\uffe9\043\uffe9\051\uffe9\055\uffe9\063" +
    "\uffe9\064\uffe9\065\uffe9\066\uffe9\067\uffe9\070\uffe9\073\uffe9" +
    "\074\uffe9\075\uffe9\076\uffe9\101\uffe9\102\uffe9\104\uffe9\107" +
    "\uffe9\116\uffe9\122\uffe9\124\uffe9\125\uffe9\126\uffe9\127\uffe9" +
    "\130\uffe9\001\002\000\004\012\343\001\002\000\004\011" +
    "\u0110\001\002\000\116\004\uffea\005\uffea\006\uffea\007\uffea" +
    "\010\uffea\012\uffea\013\uffea\014\uffea\016\uffea\022\uffea\023" +
    "\uffea\033\uffea\037\uffea\042\uffea\043\uffea\051\uffea\055\uffea" +
    "\063\uffea\064\uffea\065\uffea\066\uffea\067\uffea\070\uffea\073" +
    "\uffea\074\uffea\075\uffea\076\uffea\101\uffea\102\uffea\104\uffea" +
    "\107\uffea\116\uffea\122\uffea\124\uffea\125\uffea\126\uffea\127" +
    "\uffea\130\uffea\001\002\000\116\004\uffed\005\uffed\006\uffed" +
    "\007\uffed\010\uffed\012\uffed\013\uffed\014\uffed\016\uffed\022" +
    "\uffed\023\uffed\033\uffed\037\uffed\042\uffed\043\uffed\051\uffed" +
    "\055\uffed\063\uffed\064\uffed\065\uffed\066\uffed\067\uffed\070" +
    "\uffed\073\uffed\074\uffed\075\uffed\076\uffed\101\uffed\102\uffed" +
    "\104\uffed\107\uffed\116\uffed\122\uffed\124\uffed\125\uffed\126" +
    "\uffed\127\uffed\130\uffed\001\002\000\054\011\u010f\017\uff8d" +
    "\025\uff8d\026\uff8d\027\uff8d\030\uff8d\031\uff8d\032\uff8d\050" +
    "\uff8d\077\uff8d\101\uff8d\102\uff8d\103\uff8d\105\uff8d\106\uff8d" +
    "\115\uff8d\116\uff8d\117\uff8d\120\uff8d\121\uff8d\123\uff8d\001" +
    "\002\000\004\014\u010b\001\002\000\116\004\ufff0\005\ufff0" +
    "\006\ufff0\007\ufff0\010\ufff0\012\ufff0\013\ufff0\014\ufff0\016" +
    "\ufff0\022\ufff0\023\ufff0\033\ufff0\037\ufff0\042\ufff0\043\ufff0" +
    "\051\ufff0\055\ufff0\063\ufff0\064\ufff0\065\ufff0\066\ufff0\067" +
    "\ufff0\070\ufff0\073\ufff0\074\ufff0\075\ufff0\076\ufff0\101\ufff0" +
    "\102\ufff0\104\ufff0\107\ufff0\116\ufff0\122\ufff0\124\ufff0\125" +
    "\ufff0\126\ufff0\127\ufff0\130\ufff0\001\002\000\050\014\110" +
    "\016\102\033\103\035\u0109\051\111\064\112\065\101\066" +
    "\105\067\067\070\064\101\073\102\104\104\070\116\077" +
    "\124\065\125\074\126\106\127\066\130\072\001\002\000" +
    "\116\004\uffec\005\uffec\006\uffec\007\uffec\010\uffec\012\uffec" +
    "\013\uffec\014\uffec\016\uffec\022\uffec\023\uffec\033\uffec\037" +
    "\uffec\042\uffec\043\uffec\051\uffec\055\uffec\063\uffec\064\uffec" +
    "\065\uffec\066\uffec\067\uffec\070\uffec\073\uffec\074\uffec\075" +
    "\uffec\076\uffec\101\uffec\102\uffec\104\uffec\107\uffec\116\uffec" +
    "\122\uffec\124\uffec\125\uffec\126\uffec\127\uffec\130\uffec\001" +
    "\002\000\004\011\u010a\001\002\000\054\011\uff84\017\116" +
    "\025\144\026\134\027\146\030\127\031\122\032\132\050" +
    "\142\077\133\101\125\102\136\103\130\105\145\106\123" +
    "\115\143\116\126\117\135\120\131\121\137\123\141\001" +
    "\002\000\004\011\uff83\001\002\000\116\004\uff89\005\uff89" +
    "\006\uff89\007\uff89\010\uff89\012\uff89\013\uff89\014\uff89\016" +
    "\uff89\022\uff89\023\uff89\033\uff89\037\uff89\042\uff89\043\uff89" +
    "\051\uff89\055\uff89\063\uff89\064\uff89\065\uff89\066\uff89\067" +
    "\uff89\070\uff89\073\uff89\074\uff89\075\uff89\076\uff89\101\uff89" +
    "\102\uff89\104\uff89\107\uff89\116\uff89\122\uff89\124\uff89\125" +
    "\uff89\126\uff89\127\uff89\130\uff89\001\002\000\046\014\110" +
    "\016\102\033\103\051\111\064\112\065\101\066\105\067" +
    "\067\070\064\101\073\102\104\104\070\116\077\124\065" +
    "\125\074\126\106\127\066\130\072\001\002\000\054\015" +
    "\u010d\017\116\025\144\026\134\027\146\030\127\031\122" +
    "\032\132\050\142\077\133\101\125\102\136\103\130\105" +
    "\145\106\123\115\143\116\126\117\135\120\131\121\137" +
    "\123\141\001\002\000\004\011\u010e\001\002\000\116\004" +
    "\uffc4\005\uffc4\006\uffc4\007\uffc4\010\uffc4\012\uffc4\013\uffc4" +
    "\014\uffc4\016\uffc4\022\uffc4\023\uffc4\033\uffc4\037\uffc4\042" +
    "\uffc4\043\uffc4\051\uffc4\055\uffc4\063\uffc4\064\uffc4\065\uffc4" +
    "\066\uffc4\067\uffc4\070\uffc4\073\uffc4\074\uffc4\075\uffc4\076" +
    "\uffc4\101\uffc4\102\uffc4\104\uffc4\107\uffc4\116\uffc4\122\uffc4" +
    "\124\uffc4\125\uffc4\126\uffc4\127\uffc4\130\uffc4\001\002\000" +
    "\116\004\uffde\005\uffde\006\uffde\007\uffde\010\uffde\012\uffde" +
    "\013\uffde\014\uffde\016\uffde\022\uffde\023\uffde\033\uffde\037" +
    "\uffde\042\uffde\043\uffde\051\uffde\055\uffde\063\uffde\064\uffde" +
    "\065\uffde\066\uffde\067\uffde\070\uffde\073\uffde\074\uffde\075" +
    "\uffde\076\uffde\101\uffde\102\uffde\104\uffde\107\uffde\116\uffde" +
    "\122\uffde\124\uffde\125\uffde\126\uffde\127\uffde\130\uffde\001" +
    "\002\000\116\004\uffe2\005\uffe2\006\uffe2\007\uffe2\010\uffe2" +
    "\012\uffe2\013\uffe2\014\uffe2\016\uffe2\022\uffe2\023\uffe2\033" +
    "\uffe2\037\uffe2\042\uffe2\043\uffe2\051\uffe2\055\uffe2\063\uffe2" +
    "\064\uffe2\065\uffe2\066\uffe2\067\uffe2\070\uffe2\073\uffe2\074" +
    "\uffe2\075\uffe2\076\uffe2\101\uffe2\102\uffe2\104\uffe2\107\uffe2" +
    "\116\uffe2\122\uffe2\124\uffe2\125\uffe2\126\uffe2\127\uffe2\130" +
    "\uffe2\001\002\000\004\073\u0112\001\002\000\004\014\u0113" +
    "\001\002\000\046\014\110\016\102\033\103\051\111\064" +
    "\112\065\101\066\105\067\067\070\064\101\073\102\104" +
    "\104\070\116\077\124\065\125\074\126\106\127\066\130" +
    "\072\001\002\000\054\015\u0115\017\116\025\144\026\134" +
    "\027\146\030\127\031\122\032\132\050\142\077\133\101" +
    "\125\102\136\103\130\105\145\106\123\115\143\116\126" +
    "\117\135\120\131\121\137\123\141\001\002\000\004\011" +
    "\u0116\001\002\000\116\004\uffca\005\uffca\006\uffca\007\uffca" +
    "\010\uffca\012\uffca\013\uffca\014\uffca\016\uffca\022\uffca\023" +
    "\uffca\033\uffca\037\uffca\042\uffca\043\uffca\051\uffca\055\uffca" +
    "\063\uffca\064\uffca\065\uffca\066\uffca\067\uffca\070\uffca\073" +
    "\uffca\074\uffca\075\uffca\076\uffca\101\uffca\102\uffca\104\uffca" +
    "\107\uffca\116\uffca\122\uffca\124\uffca\125\uffca\126\uffca\127" +
    "\uffca\130\uffca\001\002\000\046\014\110\016\102\033\103" +
    "\051\111\064\112\065\101\066\105\067\067\070\064\101" +
    "\073\102\104\104\070\116\077\124\065\125\074\126\106" +
    "\127\066\130\072\001\002\000\054\015\u0119\017\116\025" +
    "\144\026\134\027\146\030\127\031\122\032\132\050\142" +
    "\077\133\101\125\102\136\103\130\105\145\106\123\115" +
    "\143\116\126\117\135\120\131\121\137\123\141\001\002" +
    "\000\004\011\u011a\001\002\000\116\004\uffc5\005\uffc5\006" +
    "\uffc5\007\uffc5\010\uffc5\012\uffc5\013\uffc5\014\uffc5\016\uffc5" +
    "\022\uffc5\023\uffc5\033\uffc5\037\uffc5\042\uffc5\043\uffc5\051" +
    "\uffc5\055\uffc5\063\uffc5\064\uffc5\065\uffc5\066\uffc5\067\uffc5" +
    "\070\uffc5\073\uffc5\074\uffc5\075\uffc5\076\uffc5\101\uffc5\102" +
    "\uffc5\104\uffc5\107\uffc5\116\uffc5\122\uffc5\124\uffc5\125\uffc5" +
    "\126\uffc5\127\uffc5\130\uffc5\001\002\000\046\014\110\016" +
    "\102\033\103\051\111\064\112\065\101\066\105\067\067" +
    "\070\064\101\073\102\104\104\070\116\077\124\065\125" +
    "\074\126\106\127\066\130\072\001\002\000\006\017\120" +
    "\021\u011d\001\002\000\046\014\110\016\102\033\103\051" +
    "\111\064\112\065\101\066\105\067\067\070\064\101\073" +
    "\102\104\104\070\116\077\124\065\125\074\126\106\127" +
    "\066\130\072\001\002\000\054\011\uffc2\017\116\025\144" +
    "\026\134\027\146\030\127\031\122\032\132\050\142\077" +
    "\133\101\125\102\136\103\130\105\145\106\123\115\143" +
    "\116\126\117\135\120\131\121\137\123\141\001\002\000" +
    "\054\011\uffc3\017\116\025\144\026\134\027\146\030\127" +
    "\031\122\032\132\050\142\077\133\101\125\102\136\103" +
    "\130\105\145\106\123\115\143\116\126\117\135\120\131" +
    "\121\137\123\141\001\002\000\116\004\uffef\005\uffef\006" +
    "\uffef\007\uffef\010\uffef\012\uffef\013\uffef\014\uffef\016\uffef" +
    "\022\uffef\023\uffef\033\uffef\037\uffef\042\uffef\043\uffef\051" +
    "\uffef\055\uffef\063\uffef\064\uffef\065\uffef\066\uffef\067\uffef" +
    "\070\uffef\073\uffef\074\uffef\075\uffef\076\uffef\101\uffef\102" +
    "\uffef\104\uffef\107\uffef\116\uffef\122\uffef\124\uffef\125\uffef" +
    "\126\uffef\127\uffef\130\uffef\001\002\000\116\004\uffe3\005" +
    "\uffe3\006\uffe3\007\uffe3\010\uffe3\012\uffe3\013\uffe3\014\uffe3" +
    "\016\uffe3\022\uffe3\023\uffe3\033\uffe3\037\uffe3\042\uffe3\043" +
    "\uffe3\051\uffe3\055\uffe3\063\uffe3\064\uffe3\065\uffe3\066\uffe3" +
    "\067\uffe3\070\uffe3\073\uffe3\074\uffe3\075\uffe3\076\uffe3\101" +
    "\uffe3\102\uffe3\104\uffe3\107\uffe3\116\uffe3\122\uffe3\124\uffe3" +
    "\125\uffe3\126\uffe3\127\uffe3\130\uffe3\001\002\000\016\004" +
    "\035\005\040\006\036\007\032\010\043\016\u0123\001\002" +
    "\000\006\016\uffb8\021\u011b\001\002\000\004\011\u0135\001" +
    "\002\000\004\011\u012d\001\002\000\004\016\u0128\001\002" +
    "\000\006\011\uffc1\024\314\001\002\000\014\011\uffbe\017" +
    "\061\021\062\024\uffbe\100\u0129\001\002\000\046\014\110" +
    "\016\102\033\103\051\111\064\112\065\101\066\105\067" +
    "\067\070\064\101\073\102\104\104\070\116\077\124\065" +
    "\125\074\126\106\127\066\130\072\001\002\000\054\015" +
    "\u012b\017\116\025\144\026\134\027\146\030\127\031\122" +
    "\032\132\050\142\077\133\101\125\102\136\103\130\105" +
    "\145\106\123\115\143\116\126\117\135\120\131\121\137" +
    "\123\141\001\002\000\004\012\343\001\002\000\116\004" +
    "\uffc9\005\uffc9\006\uffc9\007\uffc9\010\uffc9\012\uffc9\013\uffc9" +
    "\014\uffc9\016\uffc9\022\uffc9\023\uffc9\033\uffc9\037\uffc9\042" +
    "\uffc9\043\uffc9\051\uffc9\055\uffc9\063\uffc9\064\uffc9\065\uffc9" +
    "\066\uffc9\067\uffc9\070\uffc9\073\uffc9\074\uffc9\075\uffc9\076" +
    "\uffc9\101\uffc9\102\uffc9\104\uffc9\107\uffc9\116\uffc9\122\uffc9" +
    "\124\uffc9\125\uffc9\126\uffc9\127\uffc9\130\uffc9\001\002\000" +
    "\046\014\110\016\102\033\103\051\111\064\112\065\101" +
    "\066\105\067\067\070\064\101\073\102\104\104\070\116" +
    "\077\124\065\125\074\126\106\127\066\130\072\001\002" +
    "\000\054\011\u012f\017\116\025\144\026\134\027\146\030" +
    "\127\031\122\032\132\050\142\077\133\101\125\102\136" +
    "\103\130\105\145\106\123\115\143\116\126\117\135\120" +
    "\131\121\137\123\141\001\002\000\046\014\110\016\102" +
    "\033\103\051\111\064\112\065\101\066\105\067\067\070" +
    "\064\101\073\102\104\104\070\116\077\124\065\125\074" +
    "\126\106\127\066\130\072\001\002\000\054\015\uffd9\017" +
    "\uffa4\025\uffa4\026\uffa4\027\uffa4\030\uffa4\031\uffa4\032\uffa4" +
    "\050\uffa4\077\uffa4\101\uffa4\102\uffa4\103\uffa4\105\uffa4\106" +
    "\uffa4\115\uffa4\116\uffa4\117\uffa4\120\uffa4\121\uffa4\123\uffa4" +
    "\001\002\000\004\015\u0133\001\002\000\054\015\uffd8\017" +
    "\uffa1\025\uffa1\026\uffa1\027\uffa1\030\uffa1\031\uffa1\032\uffa1" +
    "\050\uffa1\077\uffa1\101\uffa1\102\uffa1\103\uffa1\105\uffa1\106" +
    "\uffa1\115\uffa1\116\uffa1\117\uffa1\120\uffa1\121\uffa1\123\uffa1" +
    "\001\002\000\004\012\343\001\002\000\116\004\uffc7\005" +
    "\uffc7\006\uffc7\007\uffc7\010\uffc7\012\uffc7\013\uffc7\014\uffc7" +
    "\016\uffc7\022\uffc7\023\uffc7\033\uffc7\037\uffc7\042\uffc7\043" +
    "\uffc7\051\uffc7\055\uffc7\063\uffc7\064\uffc7\065\uffc7\066\uffc7" +
    "\067\uffc7\070\uffc7\073\uffc7\074\uffc7\075\uffc7\076\uffc7\101" +
    "\uffc7\102\uffc7\104\uffc7\107\uffc7\116\uffc7\122\uffc7\124\uffc7" +
    "\125\uffc7\126\uffc7\127\uffc7\130\uffc7\001\002\000\046\014" +
    "\110\016\102\033\103\051\111\064\112\065\101\066\105" +
    "\067\067\070\064\101\073\102\104\104\070\116\077\124" +
    "\065\125\074\126\106\127\066\130\072\001\002\000\054" +
    "\011\u0137\017\116\025\144\026\134\027\146\030\127\031" +
    "\122\032\132\050\142\077\133\101\125\102\136\103\130" +
    "\105\145\106\123\115\143\116\126\117\135\120\131\121" +
    "\137\123\141\001\002\000\046\014\110\016\102\033\103" +
    "\051\111\064\112\065\101\066\105\067\067\070\064\101" +
    "\073\102\104\104\070\116\077\124\065\125\074\126\106" +
    "\127\066\130\072\001\002\000\004\015\u0139\001\002\000" +
    "\004\012\343\001\002\000\116\004\uffc8\005\uffc8\006\uffc8" +
    "\007\uffc8\010\uffc8\012\uffc8\013\uffc8\014\uffc8\016\uffc8\022" +
    "\uffc8\023\uffc8\033\uffc8\037\uffc8\042\uffc8\043\uffc8\051\uffc8" +
    "\055\uffc8\063\uffc8\064\uffc8\065\uffc8\066\uffc8\067\uffc8\070" +
    "\uffc8\073\uffc8\074\uffc8\075\uffc8\076\uffc8\101\uffc8\102\uffc8" +
    "\104\uffc8\107\uffc8\116\uffc8\122\uffc8\124\uffc8\125\uffc8\126" +
    "\uffc8\127\uffc8\130\uffc8\001\002\000\116\004\uffee\005\uffee" +
    "\006\uffee\007\uffee\010\uffee\012\uffee\013\uffee\014\uffee\016" +
    "\uffee\022\uffee\023\uffee\033\uffee\037\uffee\042\uffee\043\uffee" +
    "\051\uffee\055\uffee\063\uffee\064\uffee\065\uffee\066\uffee\067" +
    "\uffee\070\uffee\073\uffee\074\uffee\075\uffee\076\uffee\101\uffee" +
    "\102\uffee\104\uffee\107\uffee\116\uffee\122\uffee\124\uffee\125" +
    "\uffee\126\uffee\127\uffee\130\uffee\001\002\000\046\014\110" +
    "\016\102\033\103\051\111\064\112\065\101\066\105\067" +
    "\067\070\064\101\073\102\104\104\070\116\077\124\065" +
    "\125\074\126\106\127\066\130\072\001\002\000\054\015" +
    "\u013e\017\116\025\144\026\134\027\146\030\127\031\122" +
    "\032\132\050\142\077\133\101\125\102\136\103\130\105" +
    "\145\106\123\115\143\116\126\117\135\120\131\121\137" +
    "\123\141\001\002\000\004\012\343\001\002\000\116\004" +
    "\uffcb\005\uffcb\006\uffcb\007\uffcb\010\uffcb\012\uffcb\013\uffcb" +
    "\014\uffcb\016\uffcb\022\uffcb\023\uffcb\033\uffcb\037\uffcb\042" +
    "\uffcb\043\uffcb\051\uffcb\055\uffcb\063\uffcb\064\uffcb\065\uffcb" +
    "\066\uffcb\067\uffcb\070\uffcb\073\uffcb\074\uffcb\075\uffcb\076" +
    "\uffcb\101\uffcb\102\uffcb\104\uffcb\107\uffcb\116\uffcb\122\uffcb" +
    "\124\uffcb\125\uffcb\126\uffcb\127\uffcb\130\uffcb\001\002\000" +
    "\046\014\110\016\102\033\103\051\111\064\112\065\101" +
    "\066\105\067\067\070\064\101\073\102\104\104\070\116" +
    "\077\124\065\125\074\126\106\127\066\130\072\001\002" +
    "\000\054\015\u0142\017\116\025\144\026\134\027\146\030" +
    "\127\031\122\032\132\050\142\077\133\101\125\102\136" +
    "\103\130\105\145\106\123\115\143\116\126\117\135\120" +
    "\131\121\137\123\141\001\002\000\004\012\343\001\002" +
    "\000\120\004\uffd1\005\uffd1\006\uffd1\007\uffd1\010\uffd1\012" +
    "\uffd1\013\uffd1\014\uffd1\016\uffd1\022\uffd1\023\uffd1\033\uffd1" +
    "\037\uffd1\042\uffd1\043\uffd1\051\uffd1\055\uffd1\063\uffd1\064" +
    "\uffd1\065\uffd1\066\uffd1\067\uffd1\070\uffd1\073\uffd1\074\uffd1" +
    "\075\uffd1\076\uffd1\101\uffd1\102\uffd1\104\uffd1\107\uffd1\111" +
    "\u0144\116\uffd1\122\uffd1\124\uffd1\125\uffd1\126\uffd1\127\uffd1" +
    "\130\uffd1\001\002\000\006\012\343\107\356\001\002\000" +
    "\116\004\uffd0\005\uffd0\006\uffd0\007\uffd0\010\uffd0\012\uffd0" +
    "\013\uffd0\014\uffd0\016\uffd0\022\uffd0\023\uffd0\033\uffd0\037" +
    "\uffd0\042\uffd0\043\uffd0\051\uffd0\055\uffd0\063\uffd0\064\uffd0" +
    "\065\uffd0\066\uffd0\067\uffd0\070\uffd0\073\uffd0\074\uffd0\075" +
    "\uffd0\076\uffd0\101\uffd0\102\uffd0\104\uffd0\107\uffd0\116\uffd0" +
    "\122\uffd0\124\uffd0\125\uffd0\126\uffd0\127\uffd0\130\uffd0\001" +
    "\002\000\116\004\uffce\005\uffce\006\uffce\007\uffce\010\uffce" +
    "\012\uffce\013\uffce\014\uffce\016\uffce\022\uffce\023\uffce\033" +
    "\uffce\037\uffce\042\uffce\043\uffce\051\uffce\055\uffce\063\uffce" +
    "\064\uffce\065\uffce\066\uffce\067\uffce\070\uffce\073\uffce\074" +
    "\uffce\075\uffce\076\uffce\101\uffce\102\uffce\104\uffce\107\uffce" +
    "\116\uffce\122\uffce\124\uffce\125\uffce\126\uffce\127\uffce\130" +
    "\uffce\001\002\000\116\004\uffcf\005\uffcf\006\uffcf\007\uffcf" +
    "\010\uffcf\012\uffcf\013\uffcf\014\uffcf\016\uffcf\022\uffcf\023" +
    "\uffcf\033\uffcf\037\uffcf\042\uffcf\043\uffcf\051\uffcf\055\uffcf" +
    "\063\uffcf\064\uffcf\065\uffcf\066\uffcf\067\uffcf\070\uffcf\073" +
    "\uffcf\074\uffcf\075\uffcf\076\uffcf\101\uffcf\102\uffcf\104\uffcf" +
    "\107\uffcf\116\uffcf\122\uffcf\124\uffcf\125\uffcf\126\uffcf\127" +
    "\uffcf\130\uffcf\001\002\000\046\014\110\016\102\033\103" +
    "\051\111\064\112\065\101\066\105\067\067\070\064\101" +
    "\073\102\104\104\070\116\077\124\065\125\074\126\106" +
    "\127\066\130\072\001\002\000\054\015\u014a\017\116\025" +
    "\144\026\134\027\146\030\127\031\122\032\132\050\142" +
    "\077\133\101\125\102\136\103\130\105\145\106\123\115" +
    "\143\116\126\117\135\120\131\121\137\123\141\001\002" +
    "\000\004\012\u014b\001\002\000\004\037\u014d\001\002\000" +
    "\010\013\u0153\037\u014d\042\u0155\001\002\000\046\014\110" +
    "\016\102\033\103\051\111\064\112\065\101\066\105\067" +
    "\067\070\064\101\073\102\104\104\070\116\077\124\065" +
    "\125\074\126\106\127\066\130\072\001\002\000\010\013" +
    "\uffd4\037\uffd4\042\uffd4\001\002\000\054\017\116\025\144" +
    "\026\134\027\146\030\127\031\122\032\132\050\142\077" +
    "\133\100\u0150\101\125\102\136\103\130\105\145\106\123" +
    "\115\143\116\126\117\135\120\131\121\137\123\141\001" +
    "\002\000\110\004\035\005\040\006\036\007\032\010\043" +
    "\012\343\014\110\016\372\022\u0103\023\373\033\103\043" +
    "\376\051\111\055\u0105\063\353\064\112\065\101\066\105" +
    "\067\067\070\064\073\357\074\365\075\346\076\344\101" +
    "\073\102\104\104\070\107\356\116\077\122\350\124\065" +
    "\125\074\126\106\127\066\130\072\001\002\000\116\004" +
    "\035\005\040\006\036\007\032\010\043\012\343\013\uffd3" +
    "\014\110\016\372\022\u0103\023\373\033\103\037\uffd3\042" +
    "\uffd3\043\376\051\111\055\u0105\063\353\064\112\065\101" +
    "\066\105\067\067\070\064\073\357\074\365\075\346\076" +
    "\344\101\073\102\104\104\070\107\356\116\077\122\350" +
    "\124\065\125\074\126\106\127\066\130\072\001\002\000" +
    "\116\004\ufff1\005\ufff1\006\ufff1\007\ufff1\010\ufff1\012\ufff1" +
    "\013\ufff1\014\ufff1\016\ufff1\022\ufff1\023\ufff1\033\ufff1\037" +
    "\ufff1\042\ufff1\043\ufff1\051\ufff1\055\ufff1\063\ufff1\064\ufff1" +
    "\065\ufff1\066\ufff1\067\ufff1\070\ufff1\073\ufff1\074\ufff1\075" +
    "\ufff1\076\ufff1\101\ufff1\102\ufff1\104\ufff1\107\ufff1\116\ufff1" +
    "\122\ufff1\124\ufff1\125\ufff1\126\ufff1\127\ufff1\130\ufff1\001" +
    "\002\000\116\004\uffd7\005\uffd7\006\uffd7\007\uffd7\010\uffd7" +
    "\012\uffd7\013\uffd7\014\uffd7\016\uffd7\022\uffd7\023\uffd7\033" +
    "\uffd7\037\uffd7\042\uffd7\043\uffd7\051\uffd7\055\uffd7\063\uffd7" +
    "\064\uffd7\065\uffd7\066\uffd7\067\uffd7\070\uffd7\073\uffd7\074" +
    "\uffd7\075\uffd7\076\uffd7\101\uffd7\102\uffd7\104\uffd7\107\uffd7" +
    "\116\uffd7\122\uffd7\124\uffd7\125\uffd7\126\uffd7\127\uffd7\130" +
    "\uffd7\001\002\000\004\013\u0159\001\002\000\004\100\u0157" +
    "\001\002\000\010\013\uffd5\037\uffd5\042\uffd5\001\002\000" +
    "\110\004\035\005\040\006\036\007\032\010\043\012\343" +
    "\014\110\016\372\022\u0103\023\373\033\103\043\376\051" +
    "\111\055\u0105\063\353\064\112\065\101\066\105\067\067" +
    "\070\064\073\357\074\365\075\346\076\344\101\073\102" +
    "\104\104\070\107\356\116\077\122\350\124\065\125\074" +
    "\126\106\127\066\130\072\001\002\000\112\004\035\005" +
    "\040\006\036\007\032\010\043\012\343\013\uffd2\014\110" +
    "\016\372\022\u0103\023\373\033\103\043\376\051\111\055" +
    "\u0105\063\353\064\112\065\101\066\105\067\067\070\064" +
    "\073\357\074\365\075\346\076\344\101\073\102\104\104" +
    "\070\107\356\116\077\122\350\124\065\125\074\126\106" +
    "\127\066\130\072\001\002\000\116\004\uffd6\005\uffd6\006" +
    "\uffd6\007\uffd6\010\uffd6\012\uffd6\013\uffd6\014\uffd6\016\uffd6" +
    "\022\uffd6\023\uffd6\033\uffd6\037\uffd6\042\uffd6\043\uffd6\051" +
    "\uffd6\055\uffd6\063\uffd6\064\uffd6\065\uffd6\066\uffd6\067\uffd6" +
    "\070\uffd6\073\uffd6\074\uffd6\075\uffd6\076\uffd6\101\uffd6\102" +
    "\uffd6\104\uffd6\107\uffd6\116\uffd6\122\uffd6\124\uffd6\125\uffd6" +
    "\126\uffd6\127\uffd6\130\uffd6\001\002\000\140\004\ufff3\005" +
    "\ufff3\006\ufff3\007\ufff3\010\ufff3\012\ufff3\013\ufff3\014\ufff3" +
    "\016\ufff3\022\ufff3\023\ufff3\033\ufff3\034\ufff3\036\ufff3\037" +
    "\ufff3\042\ufff3\043\ufff3\045\ufff3\051\ufff3\052\ufff3\053\ufff3" +
    "\054\ufff3\055\ufff3\056\ufff3\061\ufff3\063\ufff3\064\ufff3\065" +
    "\ufff3\066\ufff3\067\ufff3\070\ufff3\073\ufff3\074\ufff3\075\ufff3" +
    "\076\ufff3\101\ufff3\102\ufff3\104\ufff3\107\ufff3\111\ufff3\116" +
    "\ufff3\122\ufff3\124\ufff3\125\ufff3\126\ufff3\127\ufff3\130\ufff3" +
    "\001\002\000\004\015\u015c\001\002\000\004\011\u015d\001" +
    "\002\000\116\004\uffc6\005\uffc6\006\uffc6\007\uffc6\010\uffc6" +
    "\012\uffc6\013\uffc6\014\uffc6\016\uffc6\022\uffc6\023\uffc6\033" +
    "\uffc6\037\uffc6\042\uffc6\043\uffc6\051\uffc6\055\uffc6\063\uffc6" +
    "\064\uffc6\065\uffc6\066\uffc6\067\uffc6\070\uffc6\073\uffc6\074" +
    "\uffc6\075\uffc6\076\uffc6\101\uffc6\102\uffc6\104\uffc6\107\uffc6" +
    "\116\uffc6\122\uffc6\124\uffc6\125\uffc6\126\uffc6\127\uffc6\130" +
    "\uffc6\001\002\000\116\004\uffcc\005\uffcc\006\uffcc\007\uffcc" +
    "\010\uffcc\012\uffcc\013\uffcc\014\uffcc\016\uffcc\022\uffcc\023" +
    "\uffcc\033\uffcc\037\uffcc\042\uffcc\043\uffcc\051\uffcc\055\uffcc" +
    "\063\uffcc\064\uffcc\065\uffcc\066\uffcc\067\uffcc\070\uffcc\073" +
    "\uffcc\074\uffcc\075\uffcc\076\uffcc\101\uffcc\102\uffcc\104\uffcc" +
    "\107\uffcc\116\uffcc\122\uffcc\124\uffcc\125\uffcc\126\uffcc\127" +
    "\uffcc\130\uffcc\001\002\000\116\004\uffe4\005\uffe4\006\uffe4" +
    "\007\uffe4\010\uffe4\012\uffe4\013\uffe4\014\uffe4\016\uffe4\022" +
    "\uffe4\023\uffe4\033\uffe4\037\uffe4\042\uffe4\043\uffe4\051\uffe4" +
    "\055\uffe4\063\uffe4\064\uffe4\065\uffe4\066\uffe4\067\uffe4\070" +
    "\uffe4\073\uffe4\074\uffe4\075\uffe4\076\uffe4\101\uffe4\102\uffe4" +
    "\104\uffe4\107\uffe4\116\uffe4\122\uffe4\124\uffe4\125\uffe4\126" +
    "\uffe4\127\uffe4\130\uffe4\001\002\000\116\004\uffcd\005\uffcd" +
    "\006\uffcd\007\uffcd\010\uffcd\012\uffcd\013\uffcd\014\uffcd\016" +
    "\uffcd\022\uffcd\023\uffcd\033\uffcd\037\uffcd\042\uffcd\043\uffcd" +
    "\051\uffcd\055\uffcd\063\uffcd\064\uffcd\065\uffcd\066\uffcd\067" +
    "\uffcd\070\uffcd\073\uffcd\074\uffcd\075\uffcd\076\uffcd\101\uffcd" +
    "\102\uffcd\104\uffcd\107\uffcd\116\uffcd\122\uffcd\124\uffcd\125" +
    "\uffcd\126\uffcd\127\uffcd\130\uffcd\001\002\000\020\002\ufffc" +
    "\036\ufffc\045\ufffc\052\ufffc\053\ufffc\054\ufffc\061\ufffc\001" +
    "\002\000\040\004\ufff6\005\ufff6\006\ufff6\007\ufff6\010\ufff6" +
    "\013\ufff6\016\ufff6\034\ufff6\036\ufff6\045\ufff6\052\ufff6\053" +
    "\ufff6\054\ufff6\056\ufff6\061\ufff6\001\002\000\004\011\u0168" +
    "\001\002\000\004\057\u0166\001\002\000\040\004\ufff9\005" +
    "\ufff9\006\ufff9\007\ufff9\010\ufff9\013\ufff9\016\ufff9\034\ufff9" +
    "\036\ufff9\045\ufff9\052\ufff9\053\ufff9\054\ufff9\056\ufff9\061" +
    "\ufff9\001\002\000\034\004\035\005\040\006\036\007\032" +
    "\010\043\016\045\034\033\036\012\045\014\052\004\053" +
    "\006\054\010\061\013\001\002\000\040\004\ufff4\005\ufff4" +
    "\006\ufff4\007\ufff4\010\ufff4\013\ufff4\016\ufff4\034\ufff4\036" +
    "\ufff4\045\ufff4\052\ufff4\053\ufff4\054\ufff4\056\ufff4\061\ufff4" +
    "\001\002\000\040\004\ufff8\005\ufff8\006\ufff8\007\ufff8\010" +
    "\ufff8\013\ufff8\016\ufff8\034\ufff8\036\ufff8\045\ufff8\052\ufff8" +
    "\053\ufff8\054\ufff8\056\ufff8\061\ufff8\001\002\000\004\013" +
    "\u016a\001\002\000\020\002\ufffd\036\ufffd\045\ufffd\052\ufffd" +
    "\053\ufffd\054\ufffd\061\ufffd\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0169\000\020\012\006\047\014\050\004\051\016\063" +
    "\015\071\010\074\017\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\050\021\051\016\063\015\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\047\014" +
    "\050\004\051\016\063\015\071\020\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\013\030\037\036\047\047\050\004\051\016\052" +
    "\045\056\050\057\043\063\015\070\040\072\u0168\073\033" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\013" +
    "\030\037\036\047\047\050\004\051\016\052\045\056\050" +
    "\057\043\063\015\070\040\072\041\073\033\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\013\030\037\036\047\047\050\004\051\016\052\045\056" +
    "\u0164\057\043\063\015\070\u0162\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\002\341\001\001\000\002\001\001\000\006\040\333\041" +
    "\053\001\001\000\002\001\001\000\016\013\030\037\036" +
    "\050\021\051\016\052\052\063\015\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\040\054\041\053\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\031\056\001" +
    "\001\000\002\001\001\000\012\013\030\037\264\053\262" +
    "\054\263\001\001\000\002\001\001\000\016\006\074\007" +
    "\075\010\106\011\077\025\070\062\062\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\006\251\007\075\010\106" +
    "\011\077\025\070\062\062\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\006\250\007\075\010\106\011\077" +
    "\025\070\062\062\001\001\000\002\001\001\000\004\032" +
    "\137\001\001\000\002\001\001\000\016\006\247\007\075" +
    "\010\106\011\077\025\070\062\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\006\236\007\075\010\106\011\077\025\070\062" +
    "\062\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\006\221\007\075\010\106\011\077\013" +
    "\220\025\070\062\062\001\001\000\006\013\113\037\112" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\032" +
    "\213\001\001\000\004\032\116\001\001\000\016\006\211" +
    "\007\075\010\106\011\077\025\070\062\062\001\001\000" +
    "\002\001\001\000\016\006\120\007\075\010\106\011\077" +
    "\025\070\062\062\001\001\000\004\032\137\001\001\000" +
    "\016\006\210\007\075\010\106\011\077\025\070\062\062" +
    "\001\001\000\016\006\207\007\075\010\106\011\077\025" +
    "\070\062\062\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\006\206\007\075\010\106\011\077\025\070\062" +
    "\062\001\001\000\016\006\205\007\075\010\106\011\077" +
    "\025\070\062\062\001\001\000\002\001\001\000\016\006" +
    "\163\007\075\010\106\011\077\025\070\062\062\001\001" +
    "\000\016\006\162\007\075\010\106\011\077\025\070\062" +
    "\062\001\001\000\016\006\157\007\075\010\106\011\077" +
    "\025\070\062\062\001\001\000\016\006\156\007\075\010" +
    "\106\011\077\025\070\062\062\001\001\000\016\006\155" +
    "\007\075\010\106\011\077\025\070\062\062\001\001\000" +
    "\002\001\001\000\016\006\154\007\075\010\106\011\077" +
    "\025\070\062\062\001\001\000\002\001\001\000\016\006" +
    "\153\007\075\010\106\011\077\025\070\062\062\001\001" +
    "\000\002\001\001\000\016\006\151\007\075\010\106\011" +
    "\077\025\070\062\062\001\001\000\016\006\150\007\075" +
    "\010\106\011\077\025\070\062\062\001\001\000\016\006" +
    "\147\007\075\010\106\011\077\025\070\062\062\001\001" +
    "\000\016\006\146\007\075\010\106\011\077\025\070\062" +
    "\062\001\001\000\004\032\137\001\001\000\004\032\137" +
    "\001\001\000\004\032\137\001\001\000\004\032\137\001" +
    "\001\000\002\001\001\000\004\032\137\001\001\000\004" +
    "\032\137\001\001\000\004\032\137\001\001\000\004\032" +
    "\137\001\001\000\004\032\137\001\001\000\016\006\161" +
    "\007\075\010\106\011\077\025\070\062\062\001\001\000" +
    "\004\032\137\001\001\000\004\032\137\001\001\000\004" +
    "\032\137\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\006\172\007\075" +
    "\010\106\011\077\025\070\062\062\064\171\065\173\001" +
    "\001\000\002\001\001\000\004\032\137\001\001\000\002" +
    "\001\001\000\016\006\175\007\075\010\106\011\077\025" +
    "\070\062\062\001\001\000\004\032\137\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\032\137\001\001\000\004\032\137\001\001\000" +
    "\004\032\137\001\001\000\004\032\137\001\001\000\004" +
    "\032\137\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\032\216\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\032\137\001" +
    "\001\000\002\001\001\000\022\006\172\007\075\010\106" +
    "\011\077\025\070\062\062\064\226\065\173\001\001\000" +
    "\016\006\225\007\075\010\106\011\077\025\070\062\062" +
    "\001\001\000\004\032\137\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\006\232\007\075" +
    "\010\106\011\077\025\070\062\062\001\001\000\004\032" +
    "\137\001\001\000\016\006\234\007\075\010\106\011\077" +
    "\025\070\062\062\001\001\000\004\032\137\001\001\000" +
    "\002\001\001\000\004\032\137\001\001\000\016\006\240" +
    "\007\075\010\106\011\077\025\070\062\062\001\001\000" +
    "\004\032\137\001\001\000\016\006\242\007\075\010\106" +
    "\011\077\025\070\062\062\001\001\000\004\032\137\001" +
    "\001\000\002\001\001\000\016\006\245\007\075\010\106" +
    "\011\077\025\070\062\062\001\001\000\004\032\137\001" +
    "\001\000\002\001\001\000\004\032\137\001\001\000\004" +
    "\032\137\001\001\000\004\032\137\001\001\000\016\006" +
    "\253\007\075\010\106\011\077\025\070\062\062\001\001" +
    "\000\004\032\137\001\001\000\002\001\001\000\016\006" +
    "\256\007\075\010\106\011\077\025\070\062\062\001\001" +
    "\000\004\032\137\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\013\030\037\266\001\001\000" +
    "\002\001\001\000\004\031\270\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\031\274\001" +
    "\001\000\002\001\001\000\010\013\030\037\264\053\277" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\006" +
    "\302\007\075\010\106\011\077\025\070\036\301\062\062" +
    "\001\001\000\002\001\001\000\004\032\137\001\001\000" +
    "\024\006\307\007\075\010\106\011\077\025\070\034\306" +
    "\035\304\036\305\062\062\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\032\137\001\001" +
    "\000\002\001\001\000\022\006\307\007\075\010\106\011" +
    "\077\025\070\034\312\036\305\062\062\001\001\000\002" +
    "\001\001\000\004\041\314\001\001\000\002\001\001\000" +
    "\004\031\056\001\001\000\012\013\030\037\264\053\262" +
    "\054\317\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\013\030\037\036\047\323\050\004\051\016\052\322" +
    "\056\324\057\043\063\015\001\001\000\002\001\001\000" +
    "\016\013\030\037\036\050\021\051\016\052\325\063\015" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\013\030\037\264\053\262" +
    "\054\331\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\031\056\001\001\000\012\013\030" +
    "\037\264\053\262\054\336\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\064" +
    "\002\u0100\003\350\004\u0103\005\370\006\360\007\344\010" +
    "\365\011\077\013\030\014\u0105\015\362\016\363\017\377" +
    "\020\374\021\366\022\351\023\357\025\070\026\353\033" +
    "\376\037\346\042\373\046\367\061\361\062\u0101\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\040\u0126\041\053\001\001\000\002\001\001\000\062" +
    "\002\u0100\004\u0151\005\370\006\360\007\344\010\365\011" +
    "\077\013\030\014\u0105\015\362\016\363\017\377\020\374" +
    "\021\366\022\351\023\357\025\070\026\353\033\376\037" +
    "\346\042\373\046\367\061\361\062\u0101\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\032\137\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\032\u011b\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\002\u0110\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\006\u0107\007" +
    "\075\010\106\011\077\025\070\030\u0106\062\062\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\032\137\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\006\u010b" +
    "\007\075\010\106\011\077\025\070\062\062\001\001\000" +
    "\004\032\137\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\006\u0113\007\075\010\106\011\077" +
    "\025\070\062\062\001\001\000\004\032\137\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\006\u0117\007\075" +
    "\010\106\011\077\025\070\062\062\001\001\000\004\032" +
    "\137\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\006\u011e\007\075\010\106\011\077\025\070\062\062\001" +
    "\001\000\002\001\001\000\016\006\u011d\007\075\010\106" +
    "\011\077\025\070\062\062\001\001\000\004\032\137\001" +
    "\001\000\004\032\137\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\005\u0123\013\030\016\u0124\037\u0125\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\040\u0126\041\053\001\001\000\002\001\001\000" +
    "\004\031\056\001\001\000\016\006\u0129\007\075\010\106" +
    "\011\077\025\070\062\062\001\001\000\004\032\137\001" +
    "\001\000\004\002\u012b\001\001\000\002\001\001\000\016" +
    "\006\u012d\007\075\010\106\011\077\025\070\062\062\001" +
    "\001\000\004\032\137\001\001\000\020\006\360\007\u012f" +
    "\010\u0131\011\077\025\070\027\u0130\062\062\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\002\u0133\001\001\000\002\001\001\000\016\006\u0135\007" +
    "\075\010\106\011\077\025\070\062\062\001\001\000\004" +
    "\032\137\001\001\000\020\006\360\007\u012f\010\u0131\011" +
    "\077\025\070\027\u0137\062\062\001\001\000\002\001\001" +
    "\000\004\002\u0139\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\006\u013c\007\075\010\106\011\077\025\070" +
    "\062\062\001\001\000\004\032\137\001\001\000\004\002" +
    "\u013e\001\001\000\002\001\001\000\016\006\u0140\007\075" +
    "\010\106\011\077\025\070\062\062\001\001\000\004\032" +
    "\137\001\001\000\004\002\u0142\001\001\000\002\001\001" +
    "\000\010\002\u0145\023\u0146\024\u0144\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\006\u0148" +
    "\007\075\010\106\011\077\025\070\062\062\001\001\000" +
    "\004\032\137\001\001\000\002\001\001\000\006\043\u014d" +
    "\045\u014b\001\001\000\006\043\u0155\044\u0153\001\001\000" +
    "\016\006\u014e\007\075\010\106\011\077\025\070\062\062" +
    "\001\001\000\002\001\001\000\004\032\137\001\001\000" +
    "\064\002\u0100\003\u0150\004\u0103\005\370\006\360\007\344" +
    "\010\365\011\077\013\030\014\u0105\015\362\016\363\017" +
    "\377\020\374\021\366\022\351\023\357\025\070\026\353" +
    "\033\376\037\346\042\373\046\367\061\361\062\u0101\001" +
    "\001\000\062\002\u0100\004\u0151\005\370\006\360\007\344" +
    "\010\365\011\077\013\030\014\u0105\015\362\016\363\017" +
    "\377\020\374\021\366\022\351\023\357\025\070\026\353" +
    "\033\376\037\346\042\373\046\367\061\361\062\u0101\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\064\002\u0100\003" +
    "\u0157\004\u0103\005\370\006\360\007\344\010\365\011\077" +
    "\013\030\014\u0105\015\362\016\363\017\377\020\374\021" +
    "\366\022\351\023\357\025\070\026\353\033\376\037\346" +
    "\042\373\046\367\061\361\062\u0101\001\001\000\062\002" +
    "\u0100\004\u0151\005\370\006\360\007\344\010\365\011\077" +
    "\013\030\014\u0105\015\362\016\363\017\377\020\374\021" +
    "\366\022\351\023\357\025\070\026\353\033\376\037\346" +
    "\042\373\046\367\061\361\062\u0101\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\013" +
    "\030\037\036\047\323\050\004\051\016\052\322\056\u0166" +
    "\057\043\063\015\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


	   	
	public ArrayList<ErrorC> listaErrores = new ArrayList();	
	public ArrayList<Instruccion> ast = new ArrayList<Instruccion>();

	public AST raiz = null;

	/*@Override
	public void syntax_error(Symbol cur_token) 
	{        
		List<Integer> listaIdTokens = expected_token_ids();
		LinkedList<String> listaNombres = new LinkedList<String>();
		for (Integer expected : listaIdTokens) 
		{			
			listaNombres.add(symbl_name_from_id(expected));
		}		
		Utilidades.Singlenton.registrarError(String.valueOf(cur_token.value), 
			String.valueOf(cur_token.value) + ". Se esperaba :"+listaNombres.toString(), ErrorC.TipoError.LEXICO, cur_token.right+1, cur_token.left+1);
		/*listaErrores.add(
					listaErrores.add(new ErrorC(ErrorC.TipoError.SINTACTICO,
								String.valueOf(cur_token.value) + ". Se esperaba :"+listaNombres.toString(),
								cur_token.right+1,
								cur_token.left+1));
                
	}*/


    public void report_error(String message, Object info) 
    {
        int linea = 0;
        int columna = 0;
        java_cup.runtime.Symbol s = null;
        StringBuilder m = new StringBuilder("Error Sintactico");

        if (info instanceof java_cup.runtime.Symbol) 
        {
            s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) 
            {                
                columna = s.left+1;
                if (s.right>= 0)
                {
                    linea = s.right+ 1;
                }                    
            }
        }

        m.append(" Se esperaba: "+message);
        //System.err.println(m.toString());
        //System.out.println("Error");
        //System.out.println("Error linea:"+linea+", col:"+columna);
        LinkedList<String> toks = new LinkedList();

        if(!expected_token_ids().isEmpty())
        {
            Imprimir("No esta vacia "+ expected_token_ids().size());		  
            for(int w=0; w<expected_token_ids().size(); w++)
            { 
                if(expected_token_ids().get(w) !=sym.error)
                {
                    int tok = (int)expected_token_ids().get(w);                        
                    toks.add( symbol_name_from_id(tok) );
                }
            }
        }

        Imprimir(expected_token_ids().size());
      
        for(int w=0; w<expected_token_ids().size(); w++)
        { 
            if(expected_token_ids().get(w)!=sym.error)
            {
                int tok = (int)expected_token_ids().get(w);
                toks.add( symbol_name_from_id(tok) );
            }
        }
        String esperados = "";
        for(String id : toks)
        {
            if(!esperados.equals(""))
            {
                esperados += ", ";
            }
            esperados += id;
            
        }        
        Utilidades.Singlenton.registrarError(s.value.toString(), "Se esperaba .. " +esperados, ErrorC.TipoError.SINTACTICO, linea, columna);		                  
    }	

    public String symbol_name_from_id(int id){
        return sym.terminalNames[id];
    }

	/*public void addError(Symbol s)
	{
		listaErrores.add(new ErrorC("Sintactico",s.rights.right+1,ConvertirObjectToString(s.value)));
	}*/
	public void Imprimir(Object cad)
	{
		System.out.println(cad.toString());
	}	


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= LCLASE 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> lista = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Imprimir("Correcto"); raiz = new AST(lista);; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // LCLASE ::= LCLASE CLASE 
            {
              ArrayList<Nodo> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Nodo> lista = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int claseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int claseright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Clase clase = (Clase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 lista.add(clase); RESULT = lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LCLASE",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LCLASE ::= CLASE 
            {
              ArrayList<Nodo> RESULT =null;
		int claseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int claseright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Clase clase = (Clase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Nodo> l = new ArrayList<Nodo>(); l.add(clase); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LCLASE",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CLASE ::= LMODFICADOR clase id llavei CUERPOCLASE llaved 
            {
              Clase RESULT =null;
		int modificadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int modificadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ArrayList<String> modificador = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int claseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int claseright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Clase clase = (Clase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                clase.setModificadores(modificador); 
                clase.setId(nombre);                
                RESULT = clase;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CLASE",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CLASE ::= LMODFICADOR clase id extiende id llavei CUERPOCLASE llaved 
            {
              Clase RESULT =null;
		int modificadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int modificadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		ArrayList<String> modificador = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int padreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int padreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String padre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int claseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int claseright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Clase clase = (Clase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                clase.setModificadores(modificador); 
                clase.setId(nombre);
                clase.setPadre(padre);
                RESULT = clase;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CLASE",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CUERPOCLASE ::= CUERPO 
            {
              Clase RESULT =null;
		int claseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int claseright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Clase clase = (Clase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = clase;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPOCLASE",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CUERPOCLASE ::= 
            {
              Clase RESULT =null;
		RESULT = new Clase();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPOCLASE",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CUERPO ::= CUERPO FUNCION 
            {
              Clase RESULT =null;
		int claseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int claseright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Clase clase = (Clase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Funcion f = (Funcion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 clase.addFuncion(f); RESULT = clase;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CUERPO ::= CUERPO DECATRIB puntocoma 
            {
              Clase RESULT =null;
		int claseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int claseright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Clase clase = (Clase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DeclaracionAtributo f = (DeclaracionAtributo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 clase.addAtributo(f); RESULT = clase;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CUERPO ::= FUNCION 
            {
              Clase RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Funcion f = (Funcion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Clase c = new Clase(fright,fleft); c.addFuncion(f); RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CUERPO ::= DECATRIB puntocoma 
            {
              Clase RESULT =null;
		int atributosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int atributosright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DeclaracionAtributo atributos = (DeclaracionAtributo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Clase c = new Clase(atributosright,atributosleft); c.addAtributo(atributos); RESULT = c;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CUERPO ::= arroba sobrescrito FUNCION 
            {
              Clase RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Funcion f = (Funcion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Clase c = new Clase(fright,fleft); f.setSobreescrito(true); c.addFuncion(f); RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CUERPO ::= CUERPO arroba sobrescrito FUNCION 
            {
              Clase RESULT =null;
		int claseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int claseright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Clase clase = (Clase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Funcion f = (Funcion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 f.setSobreescrito(true); clase.addFuncion(f); RESULT = clase;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // BLOQUE ::= llavei LINST llaved 
            {
              Bloque RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Nodo> l = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Bloque(l,lright,lleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // BLOQUE ::= llavei llaved 
            {
              Bloque RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Bloque(new ArrayList<Nodo>(),lright,lleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // LINST ::= LINST INST 
            {
              ArrayList<Nodo> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Nodo> lista = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo inst = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 lista.add(inst); RESULT = lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINST",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // LINST ::= INST 
            {
              ArrayList<Nodo> RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo inst = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Nodo> l = new ArrayList<Nodo>(); l.add(inst); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINST",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INST ::= DECLARACION puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Declaracion inst = (Declaracion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = inst; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INST ::= ASIG puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Asignacion inst = (Asignacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INST ::= BLOQUE 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloque inst = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = inst; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INST ::= PRINT 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Imprimir inst = (Imprimir)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = inst; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // INST ::= PRINTABLE 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ImprimirT inst = (ImprimirT)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // INST ::= WHILE 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		While inst = (While)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // INST ::= DOWHILE 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DoWhile inst = (DoWhile)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // INST ::= FOR 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		For inst = (For)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // INST ::= BREAK 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Break inst = (Break)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // INST ::= CONTINUE 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Continuar inst = (Continuar)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // INST ::= IF 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		If inst = (If)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // INST ::= AUMENTO puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion inst = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // INST ::= DECREMENTO puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion inst = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // INST ::= ASIGV puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AsignacionVector inst = (AsignacionVector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // INST ::= FOREACH 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ForEach inst = (ForEach)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // INST ::= SWITCH 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Switch inst = (Switch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // INST ::= RETORNO 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Retorno inst = (Retorno)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // INST ::= LLAMADA puntocoma 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Llamada inst = (Llamada)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EXPLICITCAST ::= str_ pari EXP pard 
            {
              Expresion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion expresion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new StringCast(expresion, tright, tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPLICITCAST",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXPLICITCAST ::= todouble pari EXP pard 
            {
              Expresion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion expresion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DoubleCast(expresion, tright, tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPLICITCAST",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXPLICITCAST ::= tochar pari EXP pard 
            {
              Expresion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion expresion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CharCast(expresion, tright, tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPLICITCAST",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXPLICITCAST ::= toint pari EXP pard 
            {
              Expresion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion expresion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IntCast(expresion, tright, tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPLICITCAST",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ACTUALIZACION ::= AUMENTO 
            {
              Expresion RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion inst = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZACION",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ACTUALIZACION ::= DECREMENTO 
            {
              Expresion RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion inst = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZACION",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SWITCH ::= switch_ pari EXP pard llavei LCASO llaved 
            {
              Switch RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion condicion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Caso> lista = (ArrayList<Caso>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                RESULT = new Switch(condicion, lista, iright, ileft);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SWITCH",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SWITCH ::= switch_ pari EXP pard llavei LCASO DEFECTO llaved 
            {
              Switch RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expresion condicion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Caso> lista = (ArrayList<Caso>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int defectoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int defectoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Caso defecto = (Caso)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                lista.add(defecto);
                RESULT = new Switch(condicion, lista, iright, ileft);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SWITCH",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // LCASO ::= LCASO CASO 
            {
              ArrayList<Caso> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Caso> l = (ArrayList<Caso>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int casoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int casoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Caso caso = (Caso)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		l.add(caso); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LCASO",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // LCASO ::= CASO 
            {
              ArrayList<Caso> RESULT =null;
		int casoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int casoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Caso caso = (Caso)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<Caso> l = new ArrayList<Caso>(); l.add(caso); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LCASO",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CASO ::= caso EXP dospuntos LINST 
            {
              Caso RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion condicion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int linstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int linstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> linst = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Caso(condicion,new Bloque(linst,linstright,linstleft),iright,ileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASO",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DEFECTO ::= defecto dospuntos LINST 
            {
              Caso RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int linstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int linstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> linst = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Caso(null,new Bloque(linst,linstright,linstleft),iright,ileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFECTO",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // IF ::= si pari EXP pard BLOQUE 
            {
              If RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String si = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion condicion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new If(condicion, bloque, siright, sileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // IF ::= si pari EXP pard BLOQUE sino ELSE 
            {
              If RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String si = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion condicion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int inst2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int inst2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		If inst2 = (If)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new If(condicion,bloque,inst2,siright, sileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ELSE ::= IF 
            {
              If RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		If inst = (If)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ELSE ::= BLOQUE 
            {
              If RESULT =null;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new If(new Literal(new Tipo(Tipo.TypePrimitive.BOOL), true, bloqueright,bloqueleft),bloque, bloqueright, bloqueleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CONTINUE ::= continuar puntocoma 
            {
              Continuar RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String inst = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Continuar(instright, instleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTINUE",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // BREAK ::= romper puntocoma 
            {
              Break RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String inst = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Break(instright, instleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BREAK",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // WHILE ::= mientras pari EXP pard BLOQUE 
            {
              While RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String inst = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion condicion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new While(condicion,bloque,instright, instleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DOWHILE ::= hacer BLOQUE mientras pari EXP pard puntocoma 
            {
              DoWhile RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String inst = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion condicion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
            RESULT = new DoWhile(condicion, bloque, iright, ileft);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DOWHILE",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // FOREACH ::= para pari TIPO id dospuntos EXP pard BLOQUE 
            {
              ForEach RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String para = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int origenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int origenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion origen = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ForEach(t,id,origen, bloque, pararight,paraleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOREACH",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // FOR ::= para pari DECLARACION puntocoma EXP puntocoma ACTUALIZACION pard BLOQUE 
            {
              For RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String para = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Declaracion dec = (Declaracion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion condicion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int actleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int actright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion act = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new For(dec,condicion,act,bloque, paraleft,pararight);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // FOR ::= para pari ASIG puntocoma EXP puntocoma ACTUALIZACION pard BLOQUE 
            {
              For RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String para = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Asignacion dec = (Asignacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion condicion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int actleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int actright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion act = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new For(dec,condicion,act,bloque,paraleft,pararight);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // PRINTABLE ::= printable pari pard puntocoma 
            {
              ImprimirT RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		RESULT = new ImprimirT(pright,pleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTABLE",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // PRINT ::= println pari EXP pard puntocoma 
            {
              Imprimir RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion valor = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new Imprimir(valor, pright,pleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINT",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // PRINT ::= print pari EXP pard puntocoma 
            {
              Imprimir RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion valor = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new Imprimir(valor,false,pright,pleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINT",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ASIG ::= id igual EXP 
            {
              Asignacion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion valor = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Asignacion(id, valor, idright,idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIG",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ASIGV ::= id LEXP igual EXP 
            {
              AsignacionVector RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int coordenasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int coordenasright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Expresion> coordenas = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion valor = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AsignacionVector(id, coordenas, valor,  idright,idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGV",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DECLARACION ::= TIPO LDEC 
            {
              Declaracion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Dec> lista = (ArrayList<Dec>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Declaracion(t, lista, tright, tleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // LDEC ::= LDEC coma DEC 
            {
              ArrayList<Dec> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Dec> lista = (ArrayList<Dec>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 lista.add(dec); RESULT = lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LDEC",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // LDEC ::= DEC 
            {
              ArrayList<Dec> RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Dec> lista = new ArrayList<Dec>(); lista.add(dec); RESULT = lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LDEC",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DEC ::= id 
            {
              Dec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Dec(id,idright, idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEC",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DEC ::= id igual EXP 
            {
              Dec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion valor = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Dec(id,valor, idright, idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEC",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DEC ::= id NDIM 
            {
              Dec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer dim = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Dec(id,dim, idright, idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEC",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // DEC ::= id NDIM igual EXP 
            {
              Dec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer dim = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion valor = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Dec(id,dim, valor, idright, idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEC",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // DEC ::= id NDIM igual ARR 
            {
              Dec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer dim = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoNario valor = (NodoNario)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Dec(id,dim, new ExpresionArreglo(valor, valorright, valorleft), idright, idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEC",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // TIPO ::= PRIMITIVO 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = t;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // TIPO ::= id 
            {
              Tipo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Tipo(id,idright, idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // NDIM ::= NDIM corchetei corcheted 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = n+1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NDIM",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // NDIM ::= corchetei corcheted 
            {
              Integer RESULT =null;
		 RESULT = 1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NDIM",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXP ::= EXP and EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new And(opi, opd, opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXP ::= EXP or EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Or(opi, opd, opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXP ::= not EXP 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Not(op, opright,opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXP ::= EXP igualigual EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Igual(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXP ::= EXP desigual EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Desigual(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXP ::= EXP mayor EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Mayor(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXP ::= EXP mayorigual EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new MayorIgual(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXP ::= EXP menor EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Menor(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXP ::= EXP menorigual EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new MenorIgual(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXP ::= EXP suma EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Suma(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXP ::= EXP menos EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Resta(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXP ::= EXP xor EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Xor(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXP ::= EXP multi EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Multiplicacion(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXP ::= EXP div EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Division(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXP ::= EXP modulo EXP 
            {
              Expresion RESULT =null;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Modulo(opi,opd,opiright,opileft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXP ::= TER 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Ternario op = (Ternario)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = op;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXP ::= menos EXP 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Menos(op, opright,opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXP ::= AUMENTO 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = op;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXP ::= potencia pari EXP coma EXP pard 
            {
              Expresion RESULT =null;
		int potleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int potright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String pot = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int opileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int opiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expresion opi = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion opd = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Potencia(opi,opd,potright,potleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXP ::= EXP instanceof_ id 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new InstanceOf(op,tipo, opright, opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EXP ::= DECREMENTO 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = op;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // EXP ::= EXP punto tostring pari pard 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		RESULT = new ToString(op,opright,opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // EXP ::= EXP punto tolower pari pard 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		RESULT = new ToLower(op,opright,opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EXP ::= EXP punto id 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int atribleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int atribright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String atrib = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Acceso(op,atrib, opright,opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // EXP ::= EXP punto touper pari pard 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		RESULT = new ToUper(op,opright,opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // EXP ::= pari PRIMITIVO pard EXP 
            {
              Expresion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Casteo(op,tipo, tright, tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // EXP ::= pari id pard EXP 
            {
              Expresion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Casteo(op,tipo, tright, tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // EXP ::= entero 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		int v = (int)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Tipo.TypePrimitive.INT), v, vright,vleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // EXP ::= decimal 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		double v = (double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Tipo.TypePrimitive.DOUBLE), v, vright,vleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // EXP ::= booleano 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		boolean v = (boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Tipo.TypePrimitive.BOOL), v, vright,vleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // EXP ::= cadena 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Tipo.TypePrimitive.STRING), v, vright,vleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // EXP ::= caracter 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		char v = (char)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Tipo.TypePrimitive.CHAR), v, vright,vleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // EXP ::= id 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Variable(v, vright,vleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // EXP ::= nuevo PRIMITIVO LEXP 
            {
              Expresion RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expresion> l = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExpresionArreglo(tipo,l,nright,nleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // EXP ::= nuevo id LEXP 
            {
              Expresion RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expresion> l = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExpresionArreglo(new Tipo(tipo), l,nright,nleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // EXP ::= nuevo TIPO pari pard 
            {
              Expresion RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Instancia(tipo,nright, nleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // EXP ::= nuevo TIPO pari LEXP pard 
            {
              Expresion RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Expresion> lista = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Instancia(tipo, lista, nright, nleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // EXP ::= pari EXP pard 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = op;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // EXP ::= EXP LEXP 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion id = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int coorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int coorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expresion> coor = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AccesoVector(id, coor , idright, idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // EXP ::= EXPLICITCAST 
            {
              Expresion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = exp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // EXP ::= LLAMADA 
            {
              Expresion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Llamada exp = (Llamada)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = exp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // EXP ::= este 
            {
              Expresion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Variable(exp,expright,expleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // LLAMADA ::= EXP punto id pari PARACTUALES pard 
            {
              Llamada RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Expresion> l = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Llamada(op,t,l, opright,opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADA",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // LLAMADA ::= id pari PARACTUALES pard 
            {
              Llamada RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Expresion> l = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Llamada(null,t,l, tright,tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADA",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // RETORNO ::= retorno EXPRETORNO puntocoma 
            {
              Retorno RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Retorno(exp, rright, rleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETORNO",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // PARACTUALES ::= ACTUALES 
            {
              ArrayList<Expresion> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expresion> l = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARACTUALES",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // PARACTUALES ::= 
            {
              ArrayList<Expresion> RESULT =null;
		RESULT = new ArrayList<Expresion>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARACTUALES",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // ACTUALES ::= ACTUALES coma EXP 
            {
              ArrayList<Expresion> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Expresion> l = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		l.add(exp);RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALES",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // ACTUALES ::= EXP 
            {
              ArrayList<Expresion> RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<Expresion> l = new ArrayList<Expresion>(); l.add(exp); RESULT = l ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALES",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // EXPRETORNO ::= EXP 
            {
              Expresion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = exp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRETORNO",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // EXPRETORNO ::= nulo 
            {
              Expresion RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Literal(new Tipo(Tipo.TypePrimitive.NULO), null, rright, rleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRETORNO",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // FUNCION ::= CABECERAMET BLOQUE 
            {
              Funcion RESULT =null;
		int funcionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int funcionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Funcion funcion = (Funcion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 funcion.setInstrucciones(bloque); RESULT = funcion;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // FUNCION ::= CABECERAMET puntocoma 
            {
              Funcion RESULT =null;
		int funcionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int funcionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Funcion funcion = (Funcion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = funcion;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // CABECERAMET ::= LMODFICADOR RESULTADO id pari LPARFORMAL pard 
            {
              Funcion RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ArrayList<String> m = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int resleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int resright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Tipo res = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<ParametroFormal> lf = (ArrayList<ParametroFormal>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 Funcion f = new Funcion(m,res,nombre, lf, mright,mleft ); RESULT = f;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CABECERAMET",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // CABECERAMET ::= RESULTADO id pari LPARFORMAL pard 
            {
              Funcion RESULT =null;
		int resleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int resright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Tipo res = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<ParametroFormal> lf = (ArrayList<ParametroFormal>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 Funcion f = new Funcion( new ArrayList<String>(),res,nombre, lf, resright,resleft ); RESULT = f;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CABECERAMET",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // CABECERAMET ::= LMODFICADOR id pari LPARFORMAL pard 
            {
              Funcion RESULT =null;
		int modificadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int modificadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<String> modificador = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int formalesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int formalesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<ParametroFormal> formales = (ArrayList<ParametroFormal>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Constructor(modificador,nombre,formales,nombreright,nombreleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CABECERAMET",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // CABECERAMET ::= id pari LPARFORMAL pard 
            {
              Funcion RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int formalesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int formalesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<ParametroFormal> formales = (ArrayList<ParametroFormal>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Constructor(new ArrayList<String>(),nombre,formales, nombreright,nombreleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CABECERAMET",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // RESULTADO ::= TIPO 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = t;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RESULTADO",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // RESULTADO ::= tvoid 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Tipo(t);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RESULTADO",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // LPARFORMAL ::= LPARFORMAL coma PARFORMAL 
            {
              ArrayList<ParametroFormal> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<ParametroFormal> lista = (ArrayList<ParametroFormal>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParametroFormal par = (ParametroFormal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		lista.add(par); RESULT = lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LPARFORMAL",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // LPARFORMAL ::= PARFORMAL 
            {
              ArrayList<ParametroFormal> RESULT =null;
		int parleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParametroFormal par = (ParametroFormal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<ParametroFormal> l = new ArrayList<ParametroFormal>(); l.add(par); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LPARFORMAL",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // LPARFORMAL ::= 
            {
              ArrayList<ParametroFormal> RESULT =null;
		 ArrayList<ParametroFormal> l = new ArrayList<ParametroFormal>();RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LPARFORMAL",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // PARFORMAL ::= TIPO id 
            {
              ParametroFormal RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ParametroFormal(tipo, nombre, true,0, tiporight, tipoleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARFORMAL",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // PARFORMAL ::= final_ TIPO id 
            {
              ParametroFormal RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ParametroFormal(tipo, nombre, true,0,fright, fleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARFORMAL",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // PARFORMAL ::= TIPO id NDIM 
            {
              ParametroFormal RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ParametroFormal(tipo, nombre, true,n, tiporight, tipoleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARFORMAL",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // PARFORMAL ::= final_ TIPO id NDIM 
            {
              ParametroFormal RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ParametroFormal(tipo, nombre, true, n, fright, fleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARFORMAL",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // LMODFICADOR ::= LMODFICADOR MODFUNCION 
            {
              ArrayList<String> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> l = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.add(m); RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LMODFICADOR",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // LMODFICADOR ::= MODFUNCION 
            {
              ArrayList<String> RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<String> l = new ArrayList<String>() ; if(m!=null){l.add(m);} RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LMODFICADOR",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // MODFUNCION ::= MODATRIB 
            {
              String RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = m;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MODFUNCION",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // MODFUNCION ::= abstracto 
            {
              String RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = m;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MODFUNCION",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // DECATRIB ::= LMODFICADOR RESULTADO LDEC 
            {
              DeclaracionAtributo RESULT =null;
		int lmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<String> lm = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int declaracionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int declaracionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Dec> declaraciones = (ArrayList<Dec>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                Declaracion d  = new Declaracion(tipo,declaraciones,tiporight,tipoleft);     
                RESULT = new DeclaracionAtributo(lm, d.tipo, d, lmright, lmleft); 
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECATRIB",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // DECATRIB ::= RESULTADO LDEC 
            {
              DeclaracionAtributo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int declaracionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int declaracionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Dec> declaraciones = (ArrayList<Dec>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;		 
                Declaracion d  = new Declaracion(tipo,declaraciones,tiporight,tipoleft);     
                ArrayList<String> l = new ArrayList<String>();
                l.add("public");
                RESULT = new DeclaracionAtributo(l, d.tipo, d, tiporight,tipoleft); 
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECATRIB",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // LMODATRIB ::= LMODATRIB MODATRIB 
            {
              ArrayList<String> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> lista = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int modleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int modright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String mod = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		lista.add(mod); RESULT = lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LMODATRIB",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // LMODATRIB ::= MODATRIB 
            {
              ArrayList<String> RESULT =null;
		int modleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int modright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String mod = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<String> l = new ArrayList<String>(); l.add(mod); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LMODATRIB",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // MODATRIB ::= final_ 
            {
              String RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = m;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MODATRIB",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // MODATRIB ::= estatico 
            {
              String RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = m;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MODATRIB",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // MODATRIB ::= MODCONST 
            {
              String RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = m;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MODATRIB",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // MODCONST ::= publico 
            {
              String RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = m;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MODCONST",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // MODCONST ::= protegido 
            {
              String RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = m;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MODCONST",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // MODCONST ::= privado 
            {
              String RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = m;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MODCONST",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // LEXP ::= LEXP corchetei EXP corcheted 
            {
              ArrayList<Expresion> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<Expresion> l = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		l.add(exp); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LEXP",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // LEXP ::= corchetei EXP corcheted 
            {
              ArrayList<Expresion> RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 ArrayList<Expresion> l = new ArrayList<Expresion>(); l.add(exp); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LEXP",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // ARR ::= llavei LITEM llaved 
            {
              NodoNario RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoNario nodo = (NodoNario)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = nodo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARR",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // LITEM ::= LITEM coma ITEM 
            {
              NodoNario RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoNario nodo = (NodoNario)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int itemleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int itemright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoNario item = (NodoNario)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 nodo.addHijo(item); RESULT = nodo; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LITEM",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // LITEM ::= ITEM 
            {
              NodoNario RESULT =null;
		int itemleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int itemright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoNario item = (NodoNario)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 NodoNario nodo = new NodoNario(); nodo.addHijo(item); RESULT = nodo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LITEM",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // ITEM ::= EXP 
            {
              NodoNario RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NodoNario(exp);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ITEM",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // ITEM ::= ARR 
            {
              NodoNario RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoNario exp = (NodoNario)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = exp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ITEM",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // AUMENTO ::= EXP aumento 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Aumento(op, opright, opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AUMENTO",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // AUMENTO ::= aumento EXP 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Preaumento(op, opright, opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AUMENTO",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // DECREMENTO ::= EXP decremento 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Decremento(op, opright, opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECREMENTO",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // DECREMENTO ::= decremento EXP 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion op = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Predecremento(op, opright, opleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECREMENTO",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // TER ::= EXP interrogante EXP dospuntos EXP 
            {
              Ternario RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion v = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion f = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Ternario(c,v,f,cright,cleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TER",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // PRIMITIVO ::= tint 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Tipo(Tipo.TypePrimitive.INT,tright, tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // PRIMITIVO ::= tchar 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =  new Tipo(Tipo.TypePrimitive.CHAR,tright, tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // PRIMITIVO ::= tdouble 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Tipo(Tipo.TypePrimitive.DOUBLE,tright, tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // PRIMITIVO ::= tbool 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Tipo(Tipo.TypePrimitive.BOOL,tright, tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // PRIMITIVO ::= tstring 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Tipo(Tipo.TypePrimitive.STRING,tright, tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
